
baca_mpu6050.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007094  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000318  080071a8  080071a8  000171a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080074c0  080074c0  000174c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080074c4  080074c4  000174c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001f0  20000000  080074c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000017c  200001f0  080076b8  000201f0  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  2000036c  080076b8  0002036c  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d566  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001acc  00000000  00000000  0002d77f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ea8  00000000  00000000  0002f250  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000e28  00000000  00000000  000300f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   00006fe7  00000000  00000000  00030f20  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004580  00000000  00000000  00037f07  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  0003c487  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00004a9c  00000000  00000000  0003c504  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800718c 	.word	0x0800718c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	0800718c 	.word	0x0800718c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f092 0f00 	teq	r2, #0
 800044a:	bf14      	ite	ne
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	4770      	bxeq	lr
 8000452:	b530      	push	{r4, r5, lr}
 8000454:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000458:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800045c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000460:	e720      	b.n	80002a4 <__adddf3+0x138>
 8000462:	bf00      	nop

08000464 <__aeabi_ul2d>:
 8000464:	ea50 0201 	orrs.w	r2, r0, r1
 8000468:	bf08      	it	eq
 800046a:	4770      	bxeq	lr
 800046c:	b530      	push	{r4, r5, lr}
 800046e:	f04f 0500 	mov.w	r5, #0
 8000472:	e00a      	b.n	800048a <__aeabi_l2d+0x16>

08000474 <__aeabi_l2d>:
 8000474:	ea50 0201 	orrs.w	r2, r0, r1
 8000478:	bf08      	it	eq
 800047a:	4770      	bxeq	lr
 800047c:	b530      	push	{r4, r5, lr}
 800047e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000482:	d502      	bpl.n	800048a <__aeabi_l2d+0x16>
 8000484:	4240      	negs	r0, r0
 8000486:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000492:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000496:	f43f aedc 	beq.w	8000252 <__adddf3+0xe6>
 800049a:	f04f 0203 	mov.w	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004b2:	f1c2 0320 	rsb	r3, r2, #32
 80004b6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ba:	fa20 f002 	lsr.w	r0, r0, r2
 80004be:	fa01 fe03 	lsl.w	lr, r1, r3
 80004c2:	ea40 000e 	orr.w	r0, r0, lr
 80004c6:	fa21 f102 	lsr.w	r1, r1, r2
 80004ca:	4414      	add	r4, r2
 80004cc:	e6c1      	b.n	8000252 <__adddf3+0xe6>
 80004ce:	bf00      	nop

080004d0 <__aeabi_dmul>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004de:	bf1d      	ittte	ne
 80004e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004e4:	ea94 0f0c 	teqne	r4, ip
 80004e8:	ea95 0f0c 	teqne	r5, ip
 80004ec:	f000 f8de 	bleq	80006ac <__aeabi_dmul+0x1dc>
 80004f0:	442c      	add	r4, r5
 80004f2:	ea81 0603 	eor.w	r6, r1, r3
 80004f6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004fa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004fe:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000502:	bf18      	it	ne
 8000504:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000508:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800050c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000510:	d038      	beq.n	8000584 <__aeabi_dmul+0xb4>
 8000512:	fba0 ce02 	umull	ip, lr, r0, r2
 8000516:	f04f 0500 	mov.w	r5, #0
 800051a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800051e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000522:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000526:	f04f 0600 	mov.w	r6, #0
 800052a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800052e:	f09c 0f00 	teq	ip, #0
 8000532:	bf18      	it	ne
 8000534:	f04e 0e01 	orrne.w	lr, lr, #1
 8000538:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800053c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000540:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000544:	d204      	bcs.n	8000550 <__aeabi_dmul+0x80>
 8000546:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800054a:	416d      	adcs	r5, r5
 800054c:	eb46 0606 	adc.w	r6, r6, r6
 8000550:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000554:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000558:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800055c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000560:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000564:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000568:	bf88      	it	hi
 800056a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800056e:	d81e      	bhi.n	80005ae <__aeabi_dmul+0xde>
 8000570:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000574:	bf08      	it	eq
 8000576:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800057a:	f150 0000 	adcs.w	r0, r0, #0
 800057e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000582:	bd70      	pop	{r4, r5, r6, pc}
 8000584:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000588:	ea46 0101 	orr.w	r1, r6, r1
 800058c:	ea40 0002 	orr.w	r0, r0, r2
 8000590:	ea81 0103 	eor.w	r1, r1, r3
 8000594:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000598:	bfc2      	ittt	gt
 800059a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800059e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005a2:	bd70      	popgt	{r4, r5, r6, pc}
 80005a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a8:	f04f 0e00 	mov.w	lr, #0
 80005ac:	3c01      	subs	r4, #1
 80005ae:	f300 80ab 	bgt.w	8000708 <__aeabi_dmul+0x238>
 80005b2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005b6:	bfde      	ittt	le
 80005b8:	2000      	movle	r0, #0
 80005ba:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005be:	bd70      	pople	{r4, r5, r6, pc}
 80005c0:	f1c4 0400 	rsb	r4, r4, #0
 80005c4:	3c20      	subs	r4, #32
 80005c6:	da35      	bge.n	8000634 <__aeabi_dmul+0x164>
 80005c8:	340c      	adds	r4, #12
 80005ca:	dc1b      	bgt.n	8000604 <__aeabi_dmul+0x134>
 80005cc:	f104 0414 	add.w	r4, r4, #20
 80005d0:	f1c4 0520 	rsb	r5, r4, #32
 80005d4:	fa00 f305 	lsl.w	r3, r0, r5
 80005d8:	fa20 f004 	lsr.w	r0, r0, r4
 80005dc:	fa01 f205 	lsl.w	r2, r1, r5
 80005e0:	ea40 0002 	orr.w	r0, r0, r2
 80005e4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005ec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f0:	fa21 f604 	lsr.w	r6, r1, r4
 80005f4:	eb42 0106 	adc.w	r1, r2, r6
 80005f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005fc:	bf08      	it	eq
 80005fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f1c4 040c 	rsb	r4, r4, #12
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f304 	lsl.w	r3, r0, r4
 8000610:	fa20 f005 	lsr.w	r0, r0, r5
 8000614:	fa01 f204 	lsl.w	r2, r1, r4
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	f141 0100 	adc.w	r1, r1, #0
 8000628:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800062c:	bf08      	it	eq
 800062e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f1c4 0520 	rsb	r5, r4, #32
 8000638:	fa00 f205 	lsl.w	r2, r0, r5
 800063c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000640:	fa20 f304 	lsr.w	r3, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea43 0302 	orr.w	r3, r3, r2
 800064c:	fa21 f004 	lsr.w	r0, r1, r4
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	fa21 f204 	lsr.w	r2, r1, r4
 8000658:	ea20 0002 	bic.w	r0, r0, r2
 800065c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f094 0f00 	teq	r4, #0
 8000670:	d10f      	bne.n	8000692 <__aeabi_dmul+0x1c2>
 8000672:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000676:	0040      	lsls	r0, r0, #1
 8000678:	eb41 0101 	adc.w	r1, r1, r1
 800067c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000680:	bf08      	it	eq
 8000682:	3c01      	subeq	r4, #1
 8000684:	d0f7      	beq.n	8000676 <__aeabi_dmul+0x1a6>
 8000686:	ea41 0106 	orr.w	r1, r1, r6
 800068a:	f095 0f00 	teq	r5, #0
 800068e:	bf18      	it	ne
 8000690:	4770      	bxne	lr
 8000692:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000696:	0052      	lsls	r2, r2, #1
 8000698:	eb43 0303 	adc.w	r3, r3, r3
 800069c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a0:	bf08      	it	eq
 80006a2:	3d01      	subeq	r5, #1
 80006a4:	d0f7      	beq.n	8000696 <__aeabi_dmul+0x1c6>
 80006a6:	ea43 0306 	orr.w	r3, r3, r6
 80006aa:	4770      	bx	lr
 80006ac:	ea94 0f0c 	teq	r4, ip
 80006b0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006b4:	bf18      	it	ne
 80006b6:	ea95 0f0c 	teqne	r5, ip
 80006ba:	d00c      	beq.n	80006d6 <__aeabi_dmul+0x206>
 80006bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c0:	bf18      	it	ne
 80006c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006c6:	d1d1      	bne.n	800066c <__aeabi_dmul+0x19c>
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	f04f 0000 	mov.w	r0, #0
 80006d4:	bd70      	pop	{r4, r5, r6, pc}
 80006d6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006da:	bf06      	itte	eq
 80006dc:	4610      	moveq	r0, r2
 80006de:	4619      	moveq	r1, r3
 80006e0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e4:	d019      	beq.n	800071a <__aeabi_dmul+0x24a>
 80006e6:	ea94 0f0c 	teq	r4, ip
 80006ea:	d102      	bne.n	80006f2 <__aeabi_dmul+0x222>
 80006ec:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f0:	d113      	bne.n	800071a <__aeabi_dmul+0x24a>
 80006f2:	ea95 0f0c 	teq	r5, ip
 80006f6:	d105      	bne.n	8000704 <__aeabi_dmul+0x234>
 80006f8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006fc:	bf1c      	itt	ne
 80006fe:	4610      	movne	r0, r2
 8000700:	4619      	movne	r1, r3
 8000702:	d10a      	bne.n	800071a <__aeabi_dmul+0x24a>
 8000704:	ea81 0103 	eor.w	r1, r1, r3
 8000708:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800070c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000710:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000714:	f04f 0000 	mov.w	r0, #0
 8000718:	bd70      	pop	{r4, r5, r6, pc}
 800071a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800071e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000722:	bd70      	pop	{r4, r5, r6, pc}

08000724 <__aeabi_ddiv>:
 8000724:	b570      	push	{r4, r5, r6, lr}
 8000726:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800072a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800072e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000732:	bf1d      	ittte	ne
 8000734:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000738:	ea94 0f0c 	teqne	r4, ip
 800073c:	ea95 0f0c 	teqne	r5, ip
 8000740:	f000 f8a7 	bleq	8000892 <__aeabi_ddiv+0x16e>
 8000744:	eba4 0405 	sub.w	r4, r4, r5
 8000748:	ea81 0e03 	eor.w	lr, r1, r3
 800074c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000750:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000754:	f000 8088 	beq.w	8000868 <__aeabi_ddiv+0x144>
 8000758:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800075c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000760:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000764:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000768:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800076c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000770:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000774:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000778:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800077c:	429d      	cmp	r5, r3
 800077e:	bf08      	it	eq
 8000780:	4296      	cmpeq	r6, r2
 8000782:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000786:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800078a:	d202      	bcs.n	8000792 <__aeabi_ddiv+0x6e>
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	1ab6      	subs	r6, r6, r2
 8000794:	eb65 0503 	sbc.w	r5, r5, r3
 8000798:	085b      	lsrs	r3, r3, #1
 800079a:	ea4f 0232 	mov.w	r2, r2, rrx
 800079e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007a2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ae:	bf22      	ittt	cs
 80007b0:	1ab6      	subcs	r6, r6, r2
 80007b2:	4675      	movcs	r5, lr
 80007b4:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b8:	085b      	lsrs	r3, r3, #1
 80007ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000800:	ea55 0e06 	orrs.w	lr, r5, r6
 8000804:	d018      	beq.n	8000838 <__aeabi_ddiv+0x114>
 8000806:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800080a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800080e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000812:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000816:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800081a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800081e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000822:	d1c0      	bne.n	80007a6 <__aeabi_ddiv+0x82>
 8000824:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000828:	d10b      	bne.n	8000842 <__aeabi_ddiv+0x11e>
 800082a:	ea41 0100 	orr.w	r1, r1, r0
 800082e:	f04f 0000 	mov.w	r0, #0
 8000832:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000836:	e7b6      	b.n	80007a6 <__aeabi_ddiv+0x82>
 8000838:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800083c:	bf04      	itt	eq
 800083e:	4301      	orreq	r1, r0
 8000840:	2000      	moveq	r0, #0
 8000842:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000846:	bf88      	it	hi
 8000848:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800084c:	f63f aeaf 	bhi.w	80005ae <__aeabi_dmul+0xde>
 8000850:	ebb5 0c03 	subs.w	ip, r5, r3
 8000854:	bf04      	itt	eq
 8000856:	ebb6 0c02 	subseq.w	ip, r6, r2
 800085a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800085e:	f150 0000 	adcs.w	r0, r0, #0
 8000862:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800086c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000870:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000874:	bfc2      	ittt	gt
 8000876:	ebd4 050c 	rsbsgt	r5, r4, ip
 800087a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800087e:	bd70      	popgt	{r4, r5, r6, pc}
 8000880:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000884:	f04f 0e00 	mov.w	lr, #0
 8000888:	3c01      	subs	r4, #1
 800088a:	e690      	b.n	80005ae <__aeabi_dmul+0xde>
 800088c:	ea45 0e06 	orr.w	lr, r5, r6
 8000890:	e68d      	b.n	80005ae <__aeabi_dmul+0xde>
 8000892:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000896:	ea94 0f0c 	teq	r4, ip
 800089a:	bf08      	it	eq
 800089c:	ea95 0f0c 	teqeq	r5, ip
 80008a0:	f43f af3b 	beq.w	800071a <__aeabi_dmul+0x24a>
 80008a4:	ea94 0f0c 	teq	r4, ip
 80008a8:	d10a      	bne.n	80008c0 <__aeabi_ddiv+0x19c>
 80008aa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ae:	f47f af34 	bne.w	800071a <__aeabi_dmul+0x24a>
 80008b2:	ea95 0f0c 	teq	r5, ip
 80008b6:	f47f af25 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ba:	4610      	mov	r0, r2
 80008bc:	4619      	mov	r1, r3
 80008be:	e72c      	b.n	800071a <__aeabi_dmul+0x24a>
 80008c0:	ea95 0f0c 	teq	r5, ip
 80008c4:	d106      	bne.n	80008d4 <__aeabi_ddiv+0x1b0>
 80008c6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008ca:	f43f aefd 	beq.w	80006c8 <__aeabi_dmul+0x1f8>
 80008ce:	4610      	mov	r0, r2
 80008d0:	4619      	mov	r1, r3
 80008d2:	e722      	b.n	800071a <__aeabi_dmul+0x24a>
 80008d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d8:	bf18      	it	ne
 80008da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008de:	f47f aec5 	bne.w	800066c <__aeabi_dmul+0x19c>
 80008e2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008e6:	f47f af0d 	bne.w	8000704 <__aeabi_dmul+0x234>
 80008ea:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008ee:	f47f aeeb 	bne.w	80006c8 <__aeabi_dmul+0x1f8>
 80008f2:	e712      	b.n	800071a <__aeabi_dmul+0x24a>

080008f4 <__gedf2>:
 80008f4:	f04f 3cff 	mov.w	ip, #4294967295
 80008f8:	e006      	b.n	8000908 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__ledf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	e002      	b.n	8000908 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__cmpdf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	f84d cd04 	str.w	ip, [sp, #-4]!
 800090c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000910:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000914:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000918:	bf18      	it	ne
 800091a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800091e:	d01b      	beq.n	8000958 <__cmpdf2+0x54>
 8000920:	b001      	add	sp, #4
 8000922:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000926:	bf0c      	ite	eq
 8000928:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800092c:	ea91 0f03 	teqne	r1, r3
 8000930:	bf02      	ittt	eq
 8000932:	ea90 0f02 	teqeq	r0, r2
 8000936:	2000      	moveq	r0, #0
 8000938:	4770      	bxeq	lr
 800093a:	f110 0f00 	cmn.w	r0, #0
 800093e:	ea91 0f03 	teq	r1, r3
 8000942:	bf58      	it	pl
 8000944:	4299      	cmppl	r1, r3
 8000946:	bf08      	it	eq
 8000948:	4290      	cmpeq	r0, r2
 800094a:	bf2c      	ite	cs
 800094c:	17d8      	asrcs	r0, r3, #31
 800094e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000952:	f040 0001 	orr.w	r0, r0, #1
 8000956:	4770      	bx	lr
 8000958:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800095c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000960:	d102      	bne.n	8000968 <__cmpdf2+0x64>
 8000962:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000966:	d107      	bne.n	8000978 <__cmpdf2+0x74>
 8000968:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800096c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000970:	d1d6      	bne.n	8000920 <__cmpdf2+0x1c>
 8000972:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000976:	d0d3      	beq.n	8000920 <__cmpdf2+0x1c>
 8000978:	f85d 0b04 	ldr.w	r0, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop

08000980 <__aeabi_cdrcmple>:
 8000980:	4684      	mov	ip, r0
 8000982:	4610      	mov	r0, r2
 8000984:	4662      	mov	r2, ip
 8000986:	468c      	mov	ip, r1
 8000988:	4619      	mov	r1, r3
 800098a:	4663      	mov	r3, ip
 800098c:	e000      	b.n	8000990 <__aeabi_cdcmpeq>
 800098e:	bf00      	nop

08000990 <__aeabi_cdcmpeq>:
 8000990:	b501      	push	{r0, lr}
 8000992:	f7ff ffb7 	bl	8000904 <__cmpdf2>
 8000996:	2800      	cmp	r0, #0
 8000998:	bf48      	it	mi
 800099a:	f110 0f00 	cmnmi.w	r0, #0
 800099e:	bd01      	pop	{r0, pc}

080009a0 <__aeabi_dcmpeq>:
 80009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009a4:	f7ff fff4 	bl	8000990 <__aeabi_cdcmpeq>
 80009a8:	bf0c      	ite	eq
 80009aa:	2001      	moveq	r0, #1
 80009ac:	2000      	movne	r0, #0
 80009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 80009b2:	bf00      	nop

080009b4 <__aeabi_dcmplt>:
 80009b4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b8:	f7ff ffea 	bl	8000990 <__aeabi_cdcmpeq>
 80009bc:	bf34      	ite	cc
 80009be:	2001      	movcc	r0, #1
 80009c0:	2000      	movcs	r0, #0
 80009c2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009c6:	bf00      	nop

080009c8 <__aeabi_dcmple>:
 80009c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009cc:	f7ff ffe0 	bl	8000990 <__aeabi_cdcmpeq>
 80009d0:	bf94      	ite	ls
 80009d2:	2001      	movls	r0, #1
 80009d4:	2000      	movhi	r0, #0
 80009d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009da:	bf00      	nop

080009dc <__aeabi_dcmpge>:
 80009dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e0:	f7ff ffce 	bl	8000980 <__aeabi_cdrcmple>
 80009e4:	bf94      	ite	ls
 80009e6:	2001      	movls	r0, #1
 80009e8:	2000      	movhi	r0, #0
 80009ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ee:	bf00      	nop

080009f0 <__aeabi_dcmpgt>:
 80009f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f4:	f7ff ffc4 	bl	8000980 <__aeabi_cdrcmple>
 80009f8:	bf34      	ite	cc
 80009fa:	2001      	movcc	r0, #1
 80009fc:	2000      	movcs	r0, #0
 80009fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a02:	bf00      	nop

08000a04 <__aeabi_dcmpun>:
 8000a04:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a08:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a0c:	d102      	bne.n	8000a14 <__aeabi_dcmpun+0x10>
 8000a0e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a12:	d10a      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a14:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a1c:	d102      	bne.n	8000a24 <__aeabi_dcmpun+0x20>
 8000a1e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a22:	d102      	bne.n	8000a2a <__aeabi_dcmpun+0x26>
 8000a24:	f04f 0000 	mov.w	r0, #0
 8000a28:	4770      	bx	lr
 8000a2a:	f04f 0001 	mov.w	r0, #1
 8000a2e:	4770      	bx	lr

08000a30 <__aeabi_d2iz>:
 8000a30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a34:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a38:	d215      	bcs.n	8000a66 <__aeabi_d2iz+0x36>
 8000a3a:	d511      	bpl.n	8000a60 <__aeabi_d2iz+0x30>
 8000a3c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a40:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a44:	d912      	bls.n	8000a6c <__aeabi_d2iz+0x3c>
 8000a46:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a4e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a52:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a56:	fa23 f002 	lsr.w	r0, r3, r2
 8000a5a:	bf18      	it	ne
 8000a5c:	4240      	negne	r0, r0
 8000a5e:	4770      	bx	lr
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	4770      	bx	lr
 8000a66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6a:	d105      	bne.n	8000a78 <__aeabi_d2iz+0x48>
 8000a6c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a70:	bf08      	it	eq
 8000a72:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a76:	4770      	bx	lr
 8000a78:	f04f 0000 	mov.w	r0, #0
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop

08000a80 <__aeabi_d2f>:
 8000a80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a84:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a88:	bf24      	itt	cs
 8000a8a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a92:	d90d      	bls.n	8000ab0 <__aeabi_d2f+0x30>
 8000a94:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a98:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a9c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa8:	bf08      	it	eq
 8000aaa:	f020 0001 	biceq.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab4:	d121      	bne.n	8000afa <__aeabi_d2f+0x7a>
 8000ab6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aba:	bfbc      	itt	lt
 8000abc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac0:	4770      	bxlt	lr
 8000ac2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000aca:	f1c2 0218 	rsb	r2, r2, #24
 8000ace:	f1c2 0c20 	rsb	ip, r2, #32
 8000ad2:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad6:	fa20 f002 	lsr.w	r0, r0, r2
 8000ada:	bf18      	it	ne
 8000adc:	f040 0001 	orrne.w	r0, r0, #1
 8000ae0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aec:	ea40 000c 	orr.w	r0, r0, ip
 8000af0:	fa23 f302 	lsr.w	r3, r3, r2
 8000af4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af8:	e7cc      	b.n	8000a94 <__aeabi_d2f+0x14>
 8000afa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afe:	d107      	bne.n	8000b10 <__aeabi_d2f+0x90>
 8000b00:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b04:	bf1e      	ittt	ne
 8000b06:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b0a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0e:	4770      	bxne	lr
 8000b10:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop

08000b20 <__aeabi_frsub>:
 8000b20:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b24:	e002      	b.n	8000b2c <__addsf3>
 8000b26:	bf00      	nop

08000b28 <__aeabi_fsub>:
 8000b28:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b2c <__addsf3>:
 8000b2c:	0042      	lsls	r2, r0, #1
 8000b2e:	bf1f      	itttt	ne
 8000b30:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b34:	ea92 0f03 	teqne	r2, r3
 8000b38:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b3c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b40:	d06a      	beq.n	8000c18 <__addsf3+0xec>
 8000b42:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b46:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b4a:	bfc1      	itttt	gt
 8000b4c:	18d2      	addgt	r2, r2, r3
 8000b4e:	4041      	eorgt	r1, r0
 8000b50:	4048      	eorgt	r0, r1
 8000b52:	4041      	eorgt	r1, r0
 8000b54:	bfb8      	it	lt
 8000b56:	425b      	neglt	r3, r3
 8000b58:	2b19      	cmp	r3, #25
 8000b5a:	bf88      	it	hi
 8000b5c:	4770      	bxhi	lr
 8000b5e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b62:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b66:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b6a:	bf18      	it	ne
 8000b6c:	4240      	negne	r0, r0
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b76:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b7a:	bf18      	it	ne
 8000b7c:	4249      	negne	r1, r1
 8000b7e:	ea92 0f03 	teq	r2, r3
 8000b82:	d03f      	beq.n	8000c04 <__addsf3+0xd8>
 8000b84:	f1a2 0201 	sub.w	r2, r2, #1
 8000b88:	fa41 fc03 	asr.w	ip, r1, r3
 8000b8c:	eb10 000c 	adds.w	r0, r0, ip
 8000b90:	f1c3 0320 	rsb	r3, r3, #32
 8000b94:	fa01 f103 	lsl.w	r1, r1, r3
 8000b98:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b9c:	d502      	bpl.n	8000ba4 <__addsf3+0x78>
 8000b9e:	4249      	negs	r1, r1
 8000ba0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ba4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000ba8:	d313      	bcc.n	8000bd2 <__addsf3+0xa6>
 8000baa:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bae:	d306      	bcc.n	8000bbe <__addsf3+0x92>
 8000bb0:	0840      	lsrs	r0, r0, #1
 8000bb2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bb6:	f102 0201 	add.w	r2, r2, #1
 8000bba:	2afe      	cmp	r2, #254	; 0xfe
 8000bbc:	d251      	bcs.n	8000c62 <__addsf3+0x136>
 8000bbe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bc2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bc6:	bf08      	it	eq
 8000bc8:	f020 0001 	biceq.w	r0, r0, #1
 8000bcc:	ea40 0003 	orr.w	r0, r0, r3
 8000bd0:	4770      	bx	lr
 8000bd2:	0049      	lsls	r1, r1, #1
 8000bd4:	eb40 0000 	adc.w	r0, r0, r0
 8000bd8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000bdc:	f1a2 0201 	sub.w	r2, r2, #1
 8000be0:	d1ed      	bne.n	8000bbe <__addsf3+0x92>
 8000be2:	fab0 fc80 	clz	ip, r0
 8000be6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bea:	ebb2 020c 	subs.w	r2, r2, ip
 8000bee:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bf2:	bfaa      	itet	ge
 8000bf4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bf8:	4252      	neglt	r2, r2
 8000bfa:	4318      	orrge	r0, r3
 8000bfc:	bfbc      	itt	lt
 8000bfe:	40d0      	lsrlt	r0, r2
 8000c00:	4318      	orrlt	r0, r3
 8000c02:	4770      	bx	lr
 8000c04:	f092 0f00 	teq	r2, #0
 8000c08:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c0c:	bf06      	itte	eq
 8000c0e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c12:	3201      	addeq	r2, #1
 8000c14:	3b01      	subne	r3, #1
 8000c16:	e7b5      	b.n	8000b84 <__addsf3+0x58>
 8000c18:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c1c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c20:	bf18      	it	ne
 8000c22:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c26:	d021      	beq.n	8000c6c <__addsf3+0x140>
 8000c28:	ea92 0f03 	teq	r2, r3
 8000c2c:	d004      	beq.n	8000c38 <__addsf3+0x10c>
 8000c2e:	f092 0f00 	teq	r2, #0
 8000c32:	bf08      	it	eq
 8000c34:	4608      	moveq	r0, r1
 8000c36:	4770      	bx	lr
 8000c38:	ea90 0f01 	teq	r0, r1
 8000c3c:	bf1c      	itt	ne
 8000c3e:	2000      	movne	r0, #0
 8000c40:	4770      	bxne	lr
 8000c42:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c46:	d104      	bne.n	8000c52 <__addsf3+0x126>
 8000c48:	0040      	lsls	r0, r0, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c50:	4770      	bx	lr
 8000c52:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c56:	bf3c      	itt	cc
 8000c58:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c5c:	4770      	bxcc	lr
 8000c5e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c62:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c66:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c6a:	4770      	bx	lr
 8000c6c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c70:	bf16      	itet	ne
 8000c72:	4608      	movne	r0, r1
 8000c74:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c78:	4601      	movne	r1, r0
 8000c7a:	0242      	lsls	r2, r0, #9
 8000c7c:	bf06      	itte	eq
 8000c7e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c82:	ea90 0f01 	teqeq	r0, r1
 8000c86:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c8a:	4770      	bx	lr

08000c8c <__aeabi_ui2f>:
 8000c8c:	f04f 0300 	mov.w	r3, #0
 8000c90:	e004      	b.n	8000c9c <__aeabi_i2f+0x8>
 8000c92:	bf00      	nop

08000c94 <__aeabi_i2f>:
 8000c94:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c98:	bf48      	it	mi
 8000c9a:	4240      	negmi	r0, r0
 8000c9c:	ea5f 0c00 	movs.w	ip, r0
 8000ca0:	bf08      	it	eq
 8000ca2:	4770      	bxeq	lr
 8000ca4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000ca8:	4601      	mov	r1, r0
 8000caa:	f04f 0000 	mov.w	r0, #0
 8000cae:	e01c      	b.n	8000cea <__aeabi_l2f+0x2a>

08000cb0 <__aeabi_ul2f>:
 8000cb0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cb4:	bf08      	it	eq
 8000cb6:	4770      	bxeq	lr
 8000cb8:	f04f 0300 	mov.w	r3, #0
 8000cbc:	e00a      	b.n	8000cd4 <__aeabi_l2f+0x14>
 8000cbe:	bf00      	nop

08000cc0 <__aeabi_l2f>:
 8000cc0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cc4:	bf08      	it	eq
 8000cc6:	4770      	bxeq	lr
 8000cc8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000ccc:	d502      	bpl.n	8000cd4 <__aeabi_l2f+0x14>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	ea5f 0c01 	movs.w	ip, r1
 8000cd8:	bf02      	ittt	eq
 8000cda:	4684      	moveq	ip, r0
 8000cdc:	4601      	moveq	r1, r0
 8000cde:	2000      	moveq	r0, #0
 8000ce0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000ce4:	bf08      	it	eq
 8000ce6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000cea:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000cee:	fabc f28c 	clz	r2, ip
 8000cf2:	3a08      	subs	r2, #8
 8000cf4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cf8:	db10      	blt.n	8000d1c <__aeabi_l2f+0x5c>
 8000cfa:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cfe:	4463      	add	r3, ip
 8000d00:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d04:	f1c2 0220 	rsb	r2, r2, #32
 8000d08:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d0c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d10:	eb43 0002 	adc.w	r0, r3, r2
 8000d14:	bf08      	it	eq
 8000d16:	f020 0001 	biceq.w	r0, r0, #1
 8000d1a:	4770      	bx	lr
 8000d1c:	f102 0220 	add.w	r2, r2, #32
 8000d20:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d24:	f1c2 0220 	rsb	r2, r2, #32
 8000d28:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d2c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d30:	eb43 0002 	adc.w	r0, r3, r2
 8000d34:	bf08      	it	eq
 8000d36:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d3a:	4770      	bx	lr

08000d3c <__aeabi_fmul>:
 8000d3c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d40:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d44:	bf1e      	ittt	ne
 8000d46:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d4a:	ea92 0f0c 	teqne	r2, ip
 8000d4e:	ea93 0f0c 	teqne	r3, ip
 8000d52:	d06f      	beq.n	8000e34 <__aeabi_fmul+0xf8>
 8000d54:	441a      	add	r2, r3
 8000d56:	ea80 0c01 	eor.w	ip, r0, r1
 8000d5a:	0240      	lsls	r0, r0, #9
 8000d5c:	bf18      	it	ne
 8000d5e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d62:	d01e      	beq.n	8000da2 <__aeabi_fmul+0x66>
 8000d64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d68:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d6c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d70:	fba0 3101 	umull	r3, r1, r0, r1
 8000d74:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d78:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d7c:	bf3e      	ittt	cc
 8000d7e:	0049      	lslcc	r1, r1, #1
 8000d80:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d84:	005b      	lslcc	r3, r3, #1
 8000d86:	ea40 0001 	orr.w	r0, r0, r1
 8000d8a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d8e:	2afd      	cmp	r2, #253	; 0xfd
 8000d90:	d81d      	bhi.n	8000dce <__aeabi_fmul+0x92>
 8000d92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d96:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d9a:	bf08      	it	eq
 8000d9c:	f020 0001 	biceq.w	r0, r0, #1
 8000da0:	4770      	bx	lr
 8000da2:	f090 0f00 	teq	r0, #0
 8000da6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000daa:	bf08      	it	eq
 8000dac:	0249      	lsleq	r1, r1, #9
 8000dae:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000db6:	3a7f      	subs	r2, #127	; 0x7f
 8000db8:	bfc2      	ittt	gt
 8000dba:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dbe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dc2:	4770      	bxgt	lr
 8000dc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dc8:	f04f 0300 	mov.w	r3, #0
 8000dcc:	3a01      	subs	r2, #1
 8000dce:	dc5d      	bgt.n	8000e8c <__aeabi_fmul+0x150>
 8000dd0:	f112 0f19 	cmn.w	r2, #25
 8000dd4:	bfdc      	itt	le
 8000dd6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000dda:	4770      	bxle	lr
 8000ddc:	f1c2 0200 	rsb	r2, r2, #0
 8000de0:	0041      	lsls	r1, r0, #1
 8000de2:	fa21 f102 	lsr.w	r1, r1, r2
 8000de6:	f1c2 0220 	rsb	r2, r2, #32
 8000dea:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dee:	ea5f 0031 	movs.w	r0, r1, rrx
 8000df2:	f140 0000 	adc.w	r0, r0, #0
 8000df6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dfa:	bf08      	it	eq
 8000dfc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e00:	4770      	bx	lr
 8000e02:	f092 0f00 	teq	r2, #0
 8000e06:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0040      	lsleq	r0, r0, #1
 8000e0e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e12:	3a01      	subeq	r2, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fmul+0xce>
 8000e16:	ea40 000c 	orr.w	r0, r0, ip
 8000e1a:	f093 0f00 	teq	r3, #0
 8000e1e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e22:	bf02      	ittt	eq
 8000e24:	0049      	lsleq	r1, r1, #1
 8000e26:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e2a:	3b01      	subeq	r3, #1
 8000e2c:	d0f9      	beq.n	8000e22 <__aeabi_fmul+0xe6>
 8000e2e:	ea41 010c 	orr.w	r1, r1, ip
 8000e32:	e78f      	b.n	8000d54 <__aeabi_fmul+0x18>
 8000e34:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e38:	ea92 0f0c 	teq	r2, ip
 8000e3c:	bf18      	it	ne
 8000e3e:	ea93 0f0c 	teqne	r3, ip
 8000e42:	d00a      	beq.n	8000e5a <__aeabi_fmul+0x11e>
 8000e44:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e48:	bf18      	it	ne
 8000e4a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e4e:	d1d8      	bne.n	8000e02 <__aeabi_fmul+0xc6>
 8000e50:	ea80 0001 	eor.w	r0, r0, r1
 8000e54:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e58:	4770      	bx	lr
 8000e5a:	f090 0f00 	teq	r0, #0
 8000e5e:	bf17      	itett	ne
 8000e60:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e64:	4608      	moveq	r0, r1
 8000e66:	f091 0f00 	teqne	r1, #0
 8000e6a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e6e:	d014      	beq.n	8000e9a <__aeabi_fmul+0x15e>
 8000e70:	ea92 0f0c 	teq	r2, ip
 8000e74:	d101      	bne.n	8000e7a <__aeabi_fmul+0x13e>
 8000e76:	0242      	lsls	r2, r0, #9
 8000e78:	d10f      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e7a:	ea93 0f0c 	teq	r3, ip
 8000e7e:	d103      	bne.n	8000e88 <__aeabi_fmul+0x14c>
 8000e80:	024b      	lsls	r3, r1, #9
 8000e82:	bf18      	it	ne
 8000e84:	4608      	movne	r0, r1
 8000e86:	d108      	bne.n	8000e9a <__aeabi_fmul+0x15e>
 8000e88:	ea80 0001 	eor.w	r0, r0, r1
 8000e8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e90:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e94:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e98:	4770      	bx	lr
 8000e9a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e9e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000ea2:	4770      	bx	lr

08000ea4 <__aeabi_fdiv>:
 8000ea4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ea8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000eac:	bf1e      	ittt	ne
 8000eae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000eb2:	ea92 0f0c 	teqne	r2, ip
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d069      	beq.n	8000f90 <__aeabi_fdiv+0xec>
 8000ebc:	eba2 0203 	sub.w	r2, r2, r3
 8000ec0:	ea80 0c01 	eor.w	ip, r0, r1
 8000ec4:	0249      	lsls	r1, r1, #9
 8000ec6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000eca:	d037      	beq.n	8000f3c <__aeabi_fdiv+0x98>
 8000ecc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ed0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ed4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ed8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000edc:	428b      	cmp	r3, r1
 8000ede:	bf38      	it	cc
 8000ee0:	005b      	lslcc	r3, r3, #1
 8000ee2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ee6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000eea:	428b      	cmp	r3, r1
 8000eec:	bf24      	itt	cs
 8000eee:	1a5b      	subcs	r3, r3, r1
 8000ef0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ef4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ef8:	bf24      	itt	cs
 8000efa:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000efe:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f02:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f06:	bf24      	itt	cs
 8000f08:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f10:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f1a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f1e:	011b      	lsls	r3, r3, #4
 8000f20:	bf18      	it	ne
 8000f22:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f26:	d1e0      	bne.n	8000eea <__aeabi_fdiv+0x46>
 8000f28:	2afd      	cmp	r2, #253	; 0xfd
 8000f2a:	f63f af50 	bhi.w	8000dce <__aeabi_fmul+0x92>
 8000f2e:	428b      	cmp	r3, r1
 8000f30:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f34:	bf08      	it	eq
 8000f36:	f020 0001 	biceq.w	r0, r0, #1
 8000f3a:	4770      	bx	lr
 8000f3c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f40:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f44:	327f      	adds	r2, #127	; 0x7f
 8000f46:	bfc2      	ittt	gt
 8000f48:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f4c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f50:	4770      	bxgt	lr
 8000f52:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f56:	f04f 0300 	mov.w	r3, #0
 8000f5a:	3a01      	subs	r2, #1
 8000f5c:	e737      	b.n	8000dce <__aeabi_fmul+0x92>
 8000f5e:	f092 0f00 	teq	r2, #0
 8000f62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f66:	bf02      	ittt	eq
 8000f68:	0040      	lsleq	r0, r0, #1
 8000f6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f6e:	3a01      	subeq	r2, #1
 8000f70:	d0f9      	beq.n	8000f66 <__aeabi_fdiv+0xc2>
 8000f72:	ea40 000c 	orr.w	r0, r0, ip
 8000f76:	f093 0f00 	teq	r3, #0
 8000f7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	bf02      	ittt	eq
 8000f80:	0049      	lsleq	r1, r1, #1
 8000f82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f86:	3b01      	subeq	r3, #1
 8000f88:	d0f9      	beq.n	8000f7e <__aeabi_fdiv+0xda>
 8000f8a:	ea41 010c 	orr.w	r1, r1, ip
 8000f8e:	e795      	b.n	8000ebc <__aeabi_fdiv+0x18>
 8000f90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f94:	ea92 0f0c 	teq	r2, ip
 8000f98:	d108      	bne.n	8000fac <__aeabi_fdiv+0x108>
 8000f9a:	0242      	lsls	r2, r0, #9
 8000f9c:	f47f af7d 	bne.w	8000e9a <__aeabi_fmul+0x15e>
 8000fa0:	ea93 0f0c 	teq	r3, ip
 8000fa4:	f47f af70 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fa8:	4608      	mov	r0, r1
 8000faa:	e776      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fac:	ea93 0f0c 	teq	r3, ip
 8000fb0:	d104      	bne.n	8000fbc <__aeabi_fdiv+0x118>
 8000fb2:	024b      	lsls	r3, r1, #9
 8000fb4:	f43f af4c 	beq.w	8000e50 <__aeabi_fmul+0x114>
 8000fb8:	4608      	mov	r0, r1
 8000fba:	e76e      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fbc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000fc0:	bf18      	it	ne
 8000fc2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	d1ca      	bne.n	8000f5e <__aeabi_fdiv+0xba>
 8000fc8:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000fcc:	f47f af5c 	bne.w	8000e88 <__aeabi_fmul+0x14c>
 8000fd0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000fd4:	f47f af3c 	bne.w	8000e50 <__aeabi_fmul+0x114>
 8000fd8:	e75f      	b.n	8000e9a <__aeabi_fmul+0x15e>
 8000fda:	bf00      	nop

08000fdc <__aeabi_f2iz>:
 8000fdc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fe0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fe4:	d30f      	bcc.n	8001006 <__aeabi_f2iz+0x2a>
 8000fe6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fea:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fee:	d90d      	bls.n	800100c <__aeabi_f2iz+0x30>
 8000ff0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000ff4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ff8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000ffc:	fa23 f002 	lsr.w	r0, r3, r2
 8001000:	bf18      	it	ne
 8001002:	4240      	negne	r0, r0
 8001004:	4770      	bx	lr
 8001006:	f04f 0000 	mov.w	r0, #0
 800100a:	4770      	bx	lr
 800100c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001010:	d101      	bne.n	8001016 <__aeabi_f2iz+0x3a>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	d105      	bne.n	8001022 <__aeabi_f2iz+0x46>
 8001016:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800101a:	bf08      	it	eq
 800101c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001020:	4770      	bx	lr
 8001022:	f04f 0000 	mov.w	r0, #0
 8001026:	4770      	bx	lr

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b090      	sub	sp, #64	; 0x40
 800102c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102e:	f000 fde7 	bl	8001c00 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001032:	f000 fb0b 	bl	800164c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001036:	f000 fc49 	bl	80018cc <MX_GPIO_Init>
  MX_I2C1_Init();
 800103a:	f000 fb4d 	bl	80016d8 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 800103e:	f000 fc1b 	bl	8001878 <MX_USART3_UART_Init>
  MX_TIM1_Init();
 8001042:	f000 fb77 	bl	8001734 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_I2C_IsDeviceReady(&hi2c1, MPU_ADDRESS, 2, 100) == HAL_OK) {
 8001046:	2364      	movs	r3, #100	; 0x64
 8001048:	2202      	movs	r2, #2
 800104a:	21d0      	movs	r1, #208	; 0xd0
 800104c:	4886      	ldr	r0, [pc, #536]	; (8001268 <main+0x240>)
 800104e:	f001 fd27 	bl	8002aa0 <HAL_I2C_IsDeviceReady>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d115      	bne.n	8001084 <main+0x5c>
  		sprintf((char*) uart_send_buffer, "slave ready!\r\n");
 8001058:	463b      	mov	r3, r7
 800105a:	4a84      	ldr	r2, [pc, #528]	; (800126c <main+0x244>)
 800105c:	461c      	mov	r4, r3
 800105e:	4613      	mov	r3, r2
 8001060:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001062:	c407      	stmia	r4!, {r0, r1, r2}
 8001064:	8023      	strh	r3, [r4, #0]
 8001066:	3402      	adds	r4, #2
 8001068:	0c1b      	lsrs	r3, r3, #16
 800106a:	7023      	strb	r3, [r4, #0]
  		HAL_UART_Transmit(&huart3, uart_send_buffer,
  				(uint16_t) strlen((char*) uart_send_buffer), 50);
 800106c:	463b      	mov	r3, r7
 800106e:	4618      	mov	r0, r3
 8001070:	f7ff f86e 	bl	8000150 <strlen>
 8001074:	4603      	mov	r3, r0
  		HAL_UART_Transmit(&huart3, uart_send_buffer,
 8001076:	b29a      	uxth	r2, r3
 8001078:	4639      	mov	r1, r7
 800107a:	2332      	movs	r3, #50	; 0x32
 800107c:	487c      	ldr	r0, [pc, #496]	; (8001270 <main+0x248>)
 800107e:	f003 fbe5 	bl	800484c <HAL_UART_Transmit>
 8001082:	e011      	b.n	80010a8 <main+0x80>
} else {
  		sprintf((char*) uart_send_buffer, "slave error\r\n");
 8001084:	463b      	mov	r3, r7
 8001086:	4a7b      	ldr	r2, [pc, #492]	; (8001274 <main+0x24c>)
 8001088:	461c      	mov	r4, r3
 800108a:	4613      	mov	r3, r2
 800108c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800108e:	c407      	stmia	r4!, {r0, r1, r2}
 8001090:	8023      	strh	r3, [r4, #0]
  		HAL_UART_Transmit(&huart3, uart_send_buffer,
  				(uint16_t) strlen((char*) uart_send_buffer), 50);
 8001092:	463b      	mov	r3, r7
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff f85b 	bl	8000150 <strlen>
 800109a:	4603      	mov	r3, r0
  		HAL_UART_Transmit(&huart3, uart_send_buffer,
 800109c:	b29a      	uxth	r2, r3
 800109e:	4639      	mov	r1, r7
 80010a0:	2332      	movs	r3, #50	; 0x32
 80010a2:	4873      	ldr	r0, [pc, #460]	; (8001270 <main+0x248>)
 80010a4:	f003 fbd2 	bl	800484c <HAL_UART_Transmit>
}
  //SLEEP MOD OFF
   HAL_I2C_Master_Transmit(&hi2c1, MPU_ADDRESS, sleep_off, 2, 100);
 80010a8:	2364      	movs	r3, #100	; 0x64
 80010aa:	9300      	str	r3, [sp, #0]
 80010ac:	2302      	movs	r3, #2
 80010ae:	4a72      	ldr	r2, [pc, #456]	; (8001278 <main+0x250>)
 80010b0:	21d0      	movs	r1, #208	; 0xd0
 80010b2:	486d      	ldr	r0, [pc, #436]	; (8001268 <main+0x240>)
 80010b4:	f001 f99c 	bl	80023f0 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Transmit(&hi2c1, MPU_ADDRESS, settings_buffer1, 2, 100);
 80010b8:	2364      	movs	r3, #100	; 0x64
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2302      	movs	r3, #2
 80010be:	4a6f      	ldr	r2, [pc, #444]	; (800127c <main+0x254>)
 80010c0:	21d0      	movs	r1, #208	; 0xd0
 80010c2:	4869      	ldr	r0, [pc, #420]	; (8001268 <main+0x240>)
 80010c4:	f001 f994 	bl	80023f0 <HAL_I2C_Master_Transmit>
   HAL_I2C_Master_Transmit(&hi2c1, MPU_ADDRESS, settings_buffer2, 2, 100);
 80010c8:	2364      	movs	r3, #100	; 0x64
 80010ca:	9300      	str	r3, [sp, #0]
 80010cc:	2302      	movs	r3, #2
 80010ce:	4a6c      	ldr	r2, [pc, #432]	; (8001280 <main+0x258>)
 80010d0:	21d0      	movs	r1, #208	; 0xd0
 80010d2:	4865      	ldr	r0, [pc, #404]	; (8001268 <main+0x240>)
 80010d4:	f001 f98c 	bl	80023f0 <HAL_I2C_Master_Transmit>
  //SERVO
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010d8:	2100      	movs	r1, #0
 80010da:	486a      	ldr	r0, [pc, #424]	; (8001284 <main+0x25c>)
 80010dc:	f002 fdfe 	bl	8003cdc <HAL_TIM_PWM_Start>
   htim1.Instance->CCR1 = 3000;
 80010e0:	4b68      	ldr	r3, [pc, #416]	; (8001284 <main+0x25c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80010e8:	635a      	str	r2, [r3, #52]	; 0x34
   HAL_Delay(2000);
 80010ea:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80010ee:	f000 fde9 	bl	8001cc4 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	  while (1)
	  {
		  HAL_I2C_Master_Transmit(&hi2c1, MPU_ADDRESS, mpu_start, 1,100);
 80010f2:	2364      	movs	r3, #100	; 0x64
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	2301      	movs	r3, #1
 80010f8:	4a63      	ldr	r2, [pc, #396]	; (8001288 <main+0x260>)
 80010fa:	21d0      	movs	r1, #208	; 0xd0
 80010fc:	485a      	ldr	r0, [pc, #360]	; (8001268 <main+0x240>)
 80010fe:	f001 f977 	bl	80023f0 <HAL_I2C_Master_Transmit>
		  HAL_I2C_Master_Receive(&hi2c1, MPU_ADDRESS, mpu6050_buffer, 8,100);
 8001102:	2364      	movs	r3, #100	; 0x64
 8001104:	9300      	str	r3, [sp, #0]
 8001106:	2308      	movs	r3, #8
 8001108:	4a60      	ldr	r2, [pc, #384]	; (800128c <main+0x264>)
 800110a:	21d0      	movs	r1, #208	; 0xd0
 800110c:	4856      	ldr	r0, [pc, #344]	; (8001268 <main+0x240>)
 800110e:	f001 fa6d 	bl	80025ec <HAL_I2C_Master_Receive>
		  waktu = HAL_GetTick();
 8001112:	f000 fdcd 	bl	8001cb0 <HAL_GetTick>
 8001116:	4602      	mov	r2, r0
 8001118:	4b5d      	ldr	r3, [pc, #372]	; (8001290 <main+0x268>)
 800111a:	601a      	str	r2, [r3, #0]
		  aX1 = (mpu6050_buffer[0]<<8 | mpu6050_buffer[1]);
 800111c:	4b5b      	ldr	r3, [pc, #364]	; (800128c <main+0x264>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	b21a      	sxth	r2, r3
 8001124:	4b59      	ldr	r3, [pc, #356]	; (800128c <main+0x264>)
 8001126:	785b      	ldrb	r3, [r3, #1]
 8001128:	b21b      	sxth	r3, r3
 800112a:	4313      	orrs	r3, r2
 800112c:	b21a      	sxth	r2, r3
 800112e:	4b59      	ldr	r3, [pc, #356]	; (8001294 <main+0x26c>)
 8001130:	801a      	strh	r2, [r3, #0]
		  aY1 = (mpu6050_buffer[2]<<8 | mpu6050_buffer[3]);
 8001132:	4b56      	ldr	r3, [pc, #344]	; (800128c <main+0x264>)
 8001134:	789b      	ldrb	r3, [r3, #2]
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	b21a      	sxth	r2, r3
 800113a:	4b54      	ldr	r3, [pc, #336]	; (800128c <main+0x264>)
 800113c:	78db      	ldrb	r3, [r3, #3]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b21a      	sxth	r2, r3
 8001144:	4b54      	ldr	r3, [pc, #336]	; (8001298 <main+0x270>)
 8001146:	801a      	strh	r2, [r3, #0]
		  aZ1 = (mpu6050_buffer[4]<<8 | mpu6050_buffer[5]);
 8001148:	4b50      	ldr	r3, [pc, #320]	; (800128c <main+0x264>)
 800114a:	791b      	ldrb	r3, [r3, #4]
 800114c:	021b      	lsls	r3, r3, #8
 800114e:	b21a      	sxth	r2, r3
 8001150:	4b4e      	ldr	r3, [pc, #312]	; (800128c <main+0x264>)
 8001152:	795b      	ldrb	r3, [r3, #5]
 8001154:	b21b      	sxth	r3, r3
 8001156:	4313      	orrs	r3, r2
 8001158:	b21a      	sxth	r2, r3
 800115a:	4b50      	ldr	r3, [pc, #320]	; (800129c <main+0x274>)
 800115c:	801a      	strh	r2, [r3, #0]

		  temp = (mpu6050_buffer[6]<<8 | mpu6050_buffer[7]);
 800115e:	4b4b      	ldr	r3, [pc, #300]	; (800128c <main+0x264>)
 8001160:	799b      	ldrb	r3, [r3, #6]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	4a49      	ldr	r2, [pc, #292]	; (800128c <main+0x264>)
 8001166:	79d2      	ldrb	r2, [r2, #7]
 8001168:	4313      	orrs	r3, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff fd92 	bl	8000c94 <__aeabi_i2f>
 8001170:	4602      	mov	r2, r0
 8001172:	4b4b      	ldr	r3, [pc, #300]	; (80012a0 <main+0x278>)
 8001174:	601a      	str	r2, [r3, #0]

		  aX = (float) aX1  / 16384.00;
 8001176:	4b47      	ldr	r3, [pc, #284]	; (8001294 <main+0x26c>)
 8001178:	f9b3 3000 	ldrsh.w	r3, [r3]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fd89 	bl	8000c94 <__aeabi_i2f>
 8001182:	4603      	mov	r3, r0
 8001184:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fe8b 	bl	8000ea4 <__aeabi_fdiv>
 800118e:	4603      	mov	r3, r0
 8001190:	461a      	mov	r2, r3
 8001192:	4b44      	ldr	r3, [pc, #272]	; (80012a4 <main+0x27c>)
 8001194:	601a      	str	r2, [r3, #0]
		  aY = (float) aY1  / 16384.00;
 8001196:	4b40      	ldr	r3, [pc, #256]	; (8001298 <main+0x270>)
 8001198:	f9b3 3000 	ldrsh.w	r3, [r3]
 800119c:	4618      	mov	r0, r3
 800119e:	f7ff fd79 	bl	8000c94 <__aeabi_i2f>
 80011a2:	4603      	mov	r3, r0
 80011a4:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80011a8:	4618      	mov	r0, r3
 80011aa:	f7ff fe7b 	bl	8000ea4 <__aeabi_fdiv>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	4b3d      	ldr	r3, [pc, #244]	; (80012a8 <main+0x280>)
 80011b4:	601a      	str	r2, [r3, #0]
		  aZ = (float) aZ1  / 16384.00;
 80011b6:	4b39      	ldr	r3, [pc, #228]	; (800129c <main+0x274>)
 80011b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fd69 	bl	8000c94 <__aeabi_i2f>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f04f 418d 	mov.w	r1, #1182793728	; 0x46800000
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fe6b 	bl	8000ea4 <__aeabi_fdiv>
 80011ce:	4603      	mov	r3, r0
 80011d0:	461a      	mov	r2, r3
 80011d2:	4b36      	ldr	r3, [pc, #216]	; (80012ac <main+0x284>)
 80011d4:	601a      	str	r2, [r3, #0]

		  accRoll = (atan2(aX,aZ))*57.2958;
 80011d6:	4b33      	ldr	r3, [pc, #204]	; (80012a4 <main+0x27c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff f924 	bl	8000428 <__aeabi_f2d>
 80011e0:	4604      	mov	r4, r0
 80011e2:	460d      	mov	r5, r1
 80011e4:	4b31      	ldr	r3, [pc, #196]	; (80012ac <main+0x284>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f91d 	bl	8000428 <__aeabi_f2d>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4620      	mov	r0, r4
 80011f4:	4629      	mov	r1, r5
 80011f6:	f005 fd55 	bl	8006ca4 <atan2>
 80011fa:	a319      	add	r3, pc, #100	; (adr r3, 8001260 <main+0x238>)
 80011fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001200:	f7ff f966 	bl	80004d0 <__aeabi_dmul>
 8001204:	4603      	mov	r3, r0
 8001206:	460c      	mov	r4, r1
 8001208:	4618      	mov	r0, r3
 800120a:	4621      	mov	r1, r4
 800120c:	f7ff fc38 	bl	8000a80 <__aeabi_d2f>
 8001210:	4602      	mov	r2, r0
 8001212:	4b27      	ldr	r3, [pc, #156]	; (80012b0 <main+0x288>)
 8001214:	601a      	str	r2, [r3, #0]
		  accPitch = (atan2(aY,aZ))*57.2958;
 8001216:	4b24      	ldr	r3, [pc, #144]	; (80012a8 <main+0x280>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f904 	bl	8000428 <__aeabi_f2d>
 8001220:	4604      	mov	r4, r0
 8001222:	460d      	mov	r5, r1
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <main+0x284>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff f8fd 	bl	8000428 <__aeabi_f2d>
 800122e:	4602      	mov	r2, r0
 8001230:	460b      	mov	r3, r1
 8001232:	4620      	mov	r0, r4
 8001234:	4629      	mov	r1, r5
 8001236:	f005 fd35 	bl	8006ca4 <atan2>
 800123a:	a309      	add	r3, pc, #36	; (adr r3, 8001260 <main+0x238>)
 800123c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001240:	f7ff f946 	bl	80004d0 <__aeabi_dmul>
 8001244:	4603      	mov	r3, r0
 8001246:	460c      	mov	r4, r1
 8001248:	4618      	mov	r0, r3
 800124a:	4621      	mov	r1, r4
 800124c:	f7ff fc18 	bl	8000a80 <__aeabi_d2f>
 8001250:	4602      	mov	r2, r0
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <main+0x28c>)
 8001254:	601a      	str	r2, [r3, #0]

		  for (int i = 0; i<10 ; i++)
 8001256:	2300      	movs	r3, #0
 8001258:	637b      	str	r3, [r7, #52]	; 0x34
 800125a:	e128      	b.n	80014ae <main+0x486>
 800125c:	f3af 8000 	nop.w
 8001260:	c63f1412 	.word	0xc63f1412
 8001264:	404ca5dc 	.word	0x404ca5dc
 8001268:	20000260 	.word	0x20000260
 800126c:	080071a8 	.word	0x080071a8
 8001270:	20000218 	.word	0x20000218
 8001274:	080071b8 	.word	0x080071b8
 8001278:	20000008 	.word	0x20000008
 800127c:	20000000 	.word	0x20000000
 8001280:	20000004 	.word	0x20000004
 8001284:	200002e0 	.word	0x200002e0
 8001288:	2000000c 	.word	0x2000000c
 800128c:	20000338 	.word	0x20000338
 8001290:	200002cc 	.word	0x200002cc
 8001294:	200002c0 	.word	0x200002c0
 8001298:	2000034c 	.word	0x2000034c
 800129c:	2000032c 	.word	0x2000032c
 80012a0:	200002bc 	.word	0x200002bc
 80012a4:	20000328 	.word	0x20000328
 80012a8:	200002d4 	.word	0x200002d4
 80012ac:	2000035c 	.word	0x2000035c
 80012b0:	20000358 	.word	0x20000358
 80012b4:	20000360 	.word	0x20000360
		    {
			  dt = (HAL_GetTick() - waktu)/1000.00;
 80012b8:	f000 fcfa 	bl	8001cb0 <HAL_GetTick>
 80012bc:	4602      	mov	r2, r0
 80012be:	4b6a      	ldr	r3, [pc, #424]	; (8001468 <main+0x440>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff f88d 	bl	80003e4 <__aeabi_ui2d>
 80012ca:	f04f 0200 	mov.w	r2, #0
 80012ce:	4b67      	ldr	r3, [pc, #412]	; (800146c <main+0x444>)
 80012d0:	f7ff fa28 	bl	8000724 <__aeabi_ddiv>
 80012d4:	4603      	mov	r3, r0
 80012d6:	460c      	mov	r4, r1
 80012d8:	4618      	mov	r0, r3
 80012da:	4621      	mov	r1, r4
 80012dc:	f7ff fbd0 	bl	8000a80 <__aeabi_d2f>
 80012e0:	4602      	mov	r2, r0
 80012e2:	4b63      	ldr	r3, [pc, #396]	; (8001470 <main+0x448>)
 80012e4:	601a      	str	r2, [r3, #0]
			  HAL_I2C_Master_Transmit(&hi2c1, MPU_ADDRESS, mpu_start2, 1,100);
 80012e6:	2364      	movs	r3, #100	; 0x64
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2301      	movs	r3, #1
 80012ec:	4a61      	ldr	r2, [pc, #388]	; (8001474 <main+0x44c>)
 80012ee:	21d0      	movs	r1, #208	; 0xd0
 80012f0:	4861      	ldr	r0, [pc, #388]	; (8001478 <main+0x450>)
 80012f2:	f001 f87d 	bl	80023f0 <HAL_I2C_Master_Transmit>
			  HAL_I2C_Master_Receive(&hi2c1, MPU_ADDRESS, mpu6050_buffer, 6,100);
 80012f6:	2364      	movs	r3, #100	; 0x64
 80012f8:	9300      	str	r3, [sp, #0]
 80012fa:	2306      	movs	r3, #6
 80012fc:	4a5f      	ldr	r2, [pc, #380]	; (800147c <main+0x454>)
 80012fe:	21d0      	movs	r1, #208	; 0xd0
 8001300:	485d      	ldr	r0, [pc, #372]	; (8001478 <main+0x450>)
 8001302:	f001 f973 	bl	80025ec <HAL_I2C_Master_Receive>

			  gX1 = (mpu6050_buffer[8]<<8 | mpu6050_buffer[9]);
 8001306:	4b5d      	ldr	r3, [pc, #372]	; (800147c <main+0x454>)
 8001308:	7a1b      	ldrb	r3, [r3, #8]
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	b21a      	sxth	r2, r3
 800130e:	4b5b      	ldr	r3, [pc, #364]	; (800147c <main+0x454>)
 8001310:	7a5b      	ldrb	r3, [r3, #9]
 8001312:	b21b      	sxth	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b21a      	sxth	r2, r3
 8001318:	4b59      	ldr	r3, [pc, #356]	; (8001480 <main+0x458>)
 800131a:	801a      	strh	r2, [r3, #0]
			  gY1 = (mpu6050_buffer[10]<<8 | mpu6050_buffer[11]);
 800131c:	4b57      	ldr	r3, [pc, #348]	; (800147c <main+0x454>)
 800131e:	7a9b      	ldrb	r3, [r3, #10]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b21a      	sxth	r2, r3
 8001324:	4b55      	ldr	r3, [pc, #340]	; (800147c <main+0x454>)
 8001326:	7adb      	ldrb	r3, [r3, #11]
 8001328:	b21b      	sxth	r3, r3
 800132a:	4313      	orrs	r3, r2
 800132c:	b21a      	sxth	r2, r3
 800132e:	4b55      	ldr	r3, [pc, #340]	; (8001484 <main+0x45c>)
 8001330:	801a      	strh	r2, [r3, #0]
			  gZ1 = (mpu6050_buffer[12]<<8 | mpu6050_buffer[13]);
 8001332:	4b52      	ldr	r3, [pc, #328]	; (800147c <main+0x454>)
 8001334:	7b1b      	ldrb	r3, [r3, #12]
 8001336:	021b      	lsls	r3, r3, #8
 8001338:	b21a      	sxth	r2, r3
 800133a:	4b50      	ldr	r3, [pc, #320]	; (800147c <main+0x454>)
 800133c:	7b5b      	ldrb	r3, [r3, #13]
 800133e:	b21b      	sxth	r3, r3
 8001340:	4313      	orrs	r3, r2
 8001342:	b21a      	sxth	r2, r3
 8001344:	4b50      	ldr	r3, [pc, #320]	; (8001488 <main+0x460>)
 8001346:	801a      	strh	r2, [r3, #0]

			  gX = (float) gX1  / 131;
 8001348:	4b4d      	ldr	r3, [pc, #308]	; (8001480 <main+0x458>)
 800134a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fca0 	bl	8000c94 <__aeabi_i2f>
 8001354:	4603      	mov	r3, r0
 8001356:	494d      	ldr	r1, [pc, #308]	; (800148c <main+0x464>)
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fda3 	bl	8000ea4 <__aeabi_fdiv>
 800135e:	4603      	mov	r3, r0
 8001360:	461a      	mov	r2, r3
 8001362:	4b4b      	ldr	r3, [pc, #300]	; (8001490 <main+0x468>)
 8001364:	601a      	str	r2, [r3, #0]
			  gY = (float) gY1  / 131;
 8001366:	4b47      	ldr	r3, [pc, #284]	; (8001484 <main+0x45c>)
 8001368:	f9b3 3000 	ldrsh.w	r3, [r3]
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fc91 	bl	8000c94 <__aeabi_i2f>
 8001372:	4603      	mov	r3, r0
 8001374:	4945      	ldr	r1, [pc, #276]	; (800148c <main+0x464>)
 8001376:	4618      	mov	r0, r3
 8001378:	f7ff fd94 	bl	8000ea4 <__aeabi_fdiv>
 800137c:	4603      	mov	r3, r0
 800137e:	461a      	mov	r2, r3
 8001380:	4b44      	ldr	r3, [pc, #272]	; (8001494 <main+0x46c>)
 8001382:	601a      	str	r2, [r3, #0]
			  gZ = (float) gZ1  / 131;
 8001384:	4b40      	ldr	r3, [pc, #256]	; (8001488 <main+0x460>)
 8001386:	f9b3 3000 	ldrsh.w	r3, [r3]
 800138a:	4618      	mov	r0, r3
 800138c:	f7ff fc82 	bl	8000c94 <__aeabi_i2f>
 8001390:	4603      	mov	r3, r0
 8001392:	493e      	ldr	r1, [pc, #248]	; (800148c <main+0x464>)
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fd85 	bl	8000ea4 <__aeabi_fdiv>
 800139a:	4603      	mov	r3, r0
 800139c:	461a      	mov	r2, r3
 800139e:	4b3e      	ldr	r3, [pc, #248]	; (8001498 <main+0x470>)
 80013a0:	601a      	str	r2, [r3, #0]

			  gyrRoll += gY*dt;
 80013a2:	4b3c      	ldr	r3, [pc, #240]	; (8001494 <main+0x46c>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	4b32      	ldr	r3, [pc, #200]	; (8001470 <main+0x448>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4619      	mov	r1, r3
 80013ac:	4610      	mov	r0, r2
 80013ae:	f7ff fcc5 	bl	8000d3c <__aeabi_fmul>
 80013b2:	4603      	mov	r3, r0
 80013b4:	461a      	mov	r2, r3
 80013b6:	4b39      	ldr	r3, [pc, #228]	; (800149c <main+0x474>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	4619      	mov	r1, r3
 80013bc:	4610      	mov	r0, r2
 80013be:	f7ff fbb5 	bl	8000b2c <__addsf3>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	4b35      	ldr	r3, [pc, #212]	; (800149c <main+0x474>)
 80013c8:	601a      	str	r2, [r3, #0]
			  gyrPitch += gX*dt;
 80013ca:	4b31      	ldr	r3, [pc, #196]	; (8001490 <main+0x468>)
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	4b28      	ldr	r3, [pc, #160]	; (8001470 <main+0x448>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4619      	mov	r1, r3
 80013d4:	4610      	mov	r0, r2
 80013d6:	f7ff fcb1 	bl	8000d3c <__aeabi_fmul>
 80013da:	4603      	mov	r3, r0
 80013dc:	461a      	mov	r2, r3
 80013de:	4b30      	ldr	r3, [pc, #192]	; (80014a0 <main+0x478>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4619      	mov	r1, r3
 80013e4:	4610      	mov	r0, r2
 80013e6:	f7ff fba1 	bl	8000b2c <__addsf3>
 80013ea:	4603      	mov	r3, r0
 80013ec:	461a      	mov	r2, r3
 80013ee:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <main+0x478>)
 80013f0:	601a      	str	r2, [r3, #0]
			  if(i==100-1)
 80013f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013f4:	2b63      	cmp	r3, #99	; 0x63
 80013f6:	d157      	bne.n	80014a8 <main+0x480>
			    {
			       gyrRoll = (gyrRoll/100)*57.2958;
 80013f8:	4b28      	ldr	r3, [pc, #160]	; (800149c <main+0x474>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4929      	ldr	r1, [pc, #164]	; (80014a4 <main+0x47c>)
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff fd50 	bl	8000ea4 <__aeabi_fdiv>
 8001404:	4603      	mov	r3, r0
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f80e 	bl	8000428 <__aeabi_f2d>
 800140c:	a314      	add	r3, pc, #80	; (adr r3, 8001460 <main+0x438>)
 800140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001412:	f7ff f85d 	bl	80004d0 <__aeabi_dmul>
 8001416:	4603      	mov	r3, r0
 8001418:	460c      	mov	r4, r1
 800141a:	4618      	mov	r0, r3
 800141c:	4621      	mov	r1, r4
 800141e:	f7ff fb2f 	bl	8000a80 <__aeabi_d2f>
 8001422:	4602      	mov	r2, r0
 8001424:	4b1d      	ldr	r3, [pc, #116]	; (800149c <main+0x474>)
 8001426:	601a      	str	r2, [r3, #0]
			       gyrPitch = (gyrPitch/100)*57.2958;
 8001428:	4b1d      	ldr	r3, [pc, #116]	; (80014a0 <main+0x478>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	491d      	ldr	r1, [pc, #116]	; (80014a4 <main+0x47c>)
 800142e:	4618      	mov	r0, r3
 8001430:	f7ff fd38 	bl	8000ea4 <__aeabi_fdiv>
 8001434:	4603      	mov	r3, r0
 8001436:	4618      	mov	r0, r3
 8001438:	f7fe fff6 	bl	8000428 <__aeabi_f2d>
 800143c:	a308      	add	r3, pc, #32	; (adr r3, 8001460 <main+0x438>)
 800143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001442:	f7ff f845 	bl	80004d0 <__aeabi_dmul>
 8001446:	4603      	mov	r3, r0
 8001448:	460c      	mov	r4, r1
 800144a:	4618      	mov	r0, r3
 800144c:	4621      	mov	r1, r4
 800144e:	f7ff fb17 	bl	8000a80 <__aeabi_d2f>
 8001452:	4602      	mov	r2, r0
 8001454:	4b12      	ldr	r3, [pc, #72]	; (80014a0 <main+0x478>)
 8001456:	601a      	str	r2, [r3, #0]
			       break;
 8001458:	e02d      	b.n	80014b6 <main+0x48e>
 800145a:	bf00      	nop
 800145c:	f3af 8000 	nop.w
 8001460:	c63f1412 	.word	0xc63f1412
 8001464:	404ca5dc 	.word	0x404ca5dc
 8001468:	200002cc 	.word	0x200002cc
 800146c:	408f4000 	.word	0x408f4000
 8001470:	20000350 	.word	0x20000350
 8001474:	20000010 	.word	0x20000010
 8001478:	20000260 	.word	0x20000260
 800147c:	20000338 	.word	0x20000338
 8001480:	200002c8 	.word	0x200002c8
 8001484:	2000032e 	.word	0x2000032e
 8001488:	20000354 	.word	0x20000354
 800148c:	43030000 	.word	0x43030000
 8001490:	20000330 	.word	0x20000330
 8001494:	200002b4 	.word	0x200002b4
 8001498:	200002c4 	.word	0x200002c4
 800149c:	2000025c 	.word	0x2000025c
 80014a0:	200002b8 	.word	0x200002b8
 80014a4:	42c80000 	.word	0x42c80000
		  for (int i = 0; i<10 ; i++)
 80014a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014aa:	3301      	adds	r3, #1
 80014ac:	637b      	str	r3, [r7, #52]	; 0x34
 80014ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b0:	2b09      	cmp	r3, #9
 80014b2:	f77f af01 	ble.w	80012b8 <main+0x290>
			     }
			 }
		  //COMPLEMENTARY FILTER
		  roll = (accRoll * 0.9998 + gyrRoll * 0.0002) / (0.9998+0.0002);
 80014b6:	4b58      	ldr	r3, [pc, #352]	; (8001618 <main+0x5f0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f7fe ffb4 	bl	8000428 <__aeabi_f2d>
 80014c0:	a351      	add	r3, pc, #324	; (adr r3, 8001608 <main+0x5e0>)
 80014c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c6:	f7ff f803 	bl	80004d0 <__aeabi_dmul>
 80014ca:	4603      	mov	r3, r0
 80014cc:	460c      	mov	r4, r1
 80014ce:	4625      	mov	r5, r4
 80014d0:	461c      	mov	r4, r3
 80014d2:	4b52      	ldr	r3, [pc, #328]	; (800161c <main+0x5f4>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7fe ffa6 	bl	8000428 <__aeabi_f2d>
 80014dc:	a34c      	add	r3, pc, #304	; (adr r3, 8001610 <main+0x5e8>)
 80014de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e2:	f7fe fff5 	bl	80004d0 <__aeabi_dmul>
 80014e6:	4602      	mov	r2, r0
 80014e8:	460b      	mov	r3, r1
 80014ea:	4620      	mov	r0, r4
 80014ec:	4629      	mov	r1, r5
 80014ee:	f7fe fe3d 	bl	800016c <__adddf3>
 80014f2:	4603      	mov	r3, r0
 80014f4:	460c      	mov	r4, r1
 80014f6:	4618      	mov	r0, r3
 80014f8:	4621      	mov	r1, r4
 80014fa:	f7ff fac1 	bl	8000a80 <__aeabi_d2f>
 80014fe:	4602      	mov	r2, r0
 8001500:	4b47      	ldr	r3, [pc, #284]	; (8001620 <main+0x5f8>)
 8001502:	601a      	str	r2, [r3, #0]
		  pitch = (accPitch * 0.9998 + gyrPitch * 0.0002) / (0.9998+0.0002);
 8001504:	4b47      	ldr	r3, [pc, #284]	; (8001624 <main+0x5fc>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7fe ff8d 	bl	8000428 <__aeabi_f2d>
 800150e:	a33e      	add	r3, pc, #248	; (adr r3, 8001608 <main+0x5e0>)
 8001510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001514:	f7fe ffdc 	bl	80004d0 <__aeabi_dmul>
 8001518:	4603      	mov	r3, r0
 800151a:	460c      	mov	r4, r1
 800151c:	4625      	mov	r5, r4
 800151e:	461c      	mov	r4, r3
 8001520:	4b41      	ldr	r3, [pc, #260]	; (8001628 <main+0x600>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4618      	mov	r0, r3
 8001526:	f7fe ff7f 	bl	8000428 <__aeabi_f2d>
 800152a:	a339      	add	r3, pc, #228	; (adr r3, 8001610 <main+0x5e8>)
 800152c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001530:	f7fe ffce 	bl	80004d0 <__aeabi_dmul>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4620      	mov	r0, r4
 800153a:	4629      	mov	r1, r5
 800153c:	f7fe fe16 	bl	800016c <__adddf3>
 8001540:	4603      	mov	r3, r0
 8001542:	460c      	mov	r4, r1
 8001544:	4618      	mov	r0, r3
 8001546:	4621      	mov	r1, r4
 8001548:	f7ff fa9a 	bl	8000a80 <__aeabi_d2f>
 800154c:	4602      	mov	r2, r0
 800154e:	4b37      	ldr	r3, [pc, #220]	; (800162c <main+0x604>)
 8001550:	601a      	str	r2, [r3, #0]

		  sprintf((char*) uart_send_buffer, "roll : %f\r\n",roll);
 8001552:	4b33      	ldr	r3, [pc, #204]	; (8001620 <main+0x5f8>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4618      	mov	r0, r3
 8001558:	f7fe ff66 	bl	8000428 <__aeabi_f2d>
 800155c:	4603      	mov	r3, r0
 800155e:	460c      	mov	r4, r1
 8001560:	4638      	mov	r0, r7
 8001562:	461a      	mov	r2, r3
 8001564:	4623      	mov	r3, r4
 8001566:	4932      	ldr	r1, [pc, #200]	; (8001630 <main+0x608>)
 8001568:	f003 ff94 	bl	8005494 <siprintf>
		  HAL_UART_Transmit(&huart3, uart_send_buffer, (uint16_t) strlen((char*) uart_send_buffer), 50);
 800156c:	463b      	mov	r3, r7
 800156e:	4618      	mov	r0, r3
 8001570:	f7fe fdee 	bl	8000150 <strlen>
 8001574:	4603      	mov	r3, r0
 8001576:	b29a      	uxth	r2, r3
 8001578:	4639      	mov	r1, r7
 800157a:	2332      	movs	r3, #50	; 0x32
 800157c:	482d      	ldr	r0, [pc, #180]	; (8001634 <main+0x60c>)
 800157e:	f003 f965 	bl	800484c <HAL_UART_Transmit>

		  val = roll;
 8001582:	4b27      	ldr	r3, [pc, #156]	; (8001620 <main+0x5f8>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4618      	mov	r0, r3
 8001588:	f7ff fd28 	bl	8000fdc <__aeabi_f2iz>
 800158c:	4602      	mov	r2, r0
 800158e:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <main+0x610>)
 8001590:	601a      	str	r2, [r3, #0]

		  servo = (val* x1) + x2;
 8001592:	4b29      	ldr	r3, [pc, #164]	; (8001638 <main+0x610>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f06f 0215 	mvn.w	r2, #21
 800159a:	fb02 f303 	mul.w	r3, r2, r3
 800159e:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a2:	4413      	add	r3, r2
 80015a4:	4a25      	ldr	r2, [pc, #148]	; (800163c <main+0x614>)
 80015a6:	6013      	str	r3, [r2, #0]
		  htim1.Instance->CCR1 = servo;
 80015a8:	4b25      	ldr	r3, [pc, #148]	; (8001640 <main+0x618>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a23      	ldr	r2, [pc, #140]	; (800163c <main+0x614>)
 80015ae:	6812      	ldr	r2, [r2, #0]
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34

		  sprintf((char*) uart_send_buffer, "val : %d\r\n",val);
 80015b2:	4b21      	ldr	r3, [pc, #132]	; (8001638 <main+0x610>)
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	463b      	mov	r3, r7
 80015b8:	4922      	ldr	r1, [pc, #136]	; (8001644 <main+0x61c>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 ff6a 	bl	8005494 <siprintf>
		  HAL_UART_Transmit(&huart3, uart_send_buffer, (uint16_t) strlen((char*) uart_send_buffer), 50);
 80015c0:	463b      	mov	r3, r7
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7fe fdc4 	bl	8000150 <strlen>
 80015c8:	4603      	mov	r3, r0
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	4639      	mov	r1, r7
 80015ce:	2332      	movs	r3, #50	; 0x32
 80015d0:	4818      	ldr	r0, [pc, #96]	; (8001634 <main+0x60c>)
 80015d2:	f003 f93b 	bl	800484c <HAL_UART_Transmit>
		  sprintf((char*) uart_send_buffer, "servo.val : %d\r\n",servo);
 80015d6:	4b19      	ldr	r3, [pc, #100]	; (800163c <main+0x614>)
 80015d8:	681a      	ldr	r2, [r3, #0]
 80015da:	463b      	mov	r3, r7
 80015dc:	491a      	ldr	r1, [pc, #104]	; (8001648 <main+0x620>)
 80015de:	4618      	mov	r0, r3
 80015e0:	f003 ff58 	bl	8005494 <siprintf>
		  HAL_UART_Transmit(&huart3, uart_send_buffer, (uint16_t) strlen((char*) uart_send_buffer), 50);
 80015e4:	463b      	mov	r3, r7
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7fe fdb2 	bl	8000150 <strlen>
 80015ec:	4603      	mov	r3, r0
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	4639      	mov	r1, r7
 80015f2:	2332      	movs	r3, #50	; 0x32
 80015f4:	480f      	ldr	r0, [pc, #60]	; (8001634 <main+0x60c>)
 80015f6:	f003 f929 	bl	800484c <HAL_UART_Transmit>

		  HAL_Delay(100);
 80015fa:	2064      	movs	r0, #100	; 0x64
 80015fc:	f000 fb62 	bl	8001cc4 <HAL_Delay>
	  {
 8001600:	e577      	b.n	80010f2 <main+0xca>
 8001602:	bf00      	nop
 8001604:	f3af 8000 	nop.w
 8001608:	91d14e3c 	.word	0x91d14e3c
 800160c:	3feffe5c 	.word	0x3feffe5c
 8001610:	eb1c432d 	.word	0xeb1c432d
 8001614:	3f2a36e2 	.word	0x3f2a36e2
 8001618:	20000358 	.word	0x20000358
 800161c:	2000025c 	.word	0x2000025c
 8001620:	20000348 	.word	0x20000348
 8001624:	20000360 	.word	0x20000360
 8001628:	200002b8 	.word	0x200002b8
 800162c:	20000334 	.word	0x20000334
 8001630:	080071c8 	.word	0x080071c8
 8001634:	20000218 	.word	0x20000218
 8001638:	200002d0 	.word	0x200002d0
 800163c:	200002dc 	.word	0x200002dc
 8001640:	200002e0 	.word	0x200002e0
 8001644:	080071d4 	.word	0x080071d4
 8001648:	080071e0 	.word	0x080071e0

0800164c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b090      	sub	sp, #64	; 0x40
 8001650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001652:	f107 0318 	add.w	r3, r7, #24
 8001656:	2228      	movs	r2, #40	; 0x28
 8001658:	2100      	movs	r1, #0
 800165a:	4618      	mov	r0, r3
 800165c:	f003 fab0 	bl	8004bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001660:	1d3b      	adds	r3, r7, #4
 8001662:	2200      	movs	r2, #0
 8001664:	601a      	str	r2, [r3, #0]
 8001666:	605a      	str	r2, [r3, #4]
 8001668:	609a      	str	r2, [r3, #8]
 800166a:	60da      	str	r2, [r3, #12]
 800166c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800166e:	2301      	movs	r3, #1
 8001670:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001672:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001676:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001678:	2300      	movs	r3, #0
 800167a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800167c:	2301      	movs	r3, #1
 800167e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001680:	2302      	movs	r3, #2
 8001682:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001684:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001688:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800168a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800168e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001690:	f107 0318 	add.w	r3, r7, #24
 8001694:	4618      	mov	r0, r3
 8001696:	f001 fe5d 	bl	8003354 <HAL_RCC_OscConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80016a0:	f000 f942 	bl	8001928 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a4:	230f      	movs	r3, #15
 80016a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a8:	2302      	movs	r3, #2
 80016aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016ba:	1d3b      	adds	r3, r7, #4
 80016bc:	2102      	movs	r1, #2
 80016be:	4618      	mov	r0, r3
 80016c0:	f002 f8c8 	bl	8003854 <HAL_RCC_ClockConfig>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <SystemClock_Config+0x82>
  {
    Error_Handler();
 80016ca:	f000 f92d 	bl	8001928 <Error_Handler>
  }
}
 80016ce:	bf00      	nop
 80016d0:	3740      	adds	r7, #64	; 0x40
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <MX_I2C1_Init+0x50>)
 80016de:	4a13      	ldr	r2, [pc, #76]	; (800172c <MX_I2C1_Init+0x54>)
 80016e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016e2:	4b11      	ldr	r3, [pc, #68]	; (8001728 <MX_I2C1_Init+0x50>)
 80016e4:	4a12      	ldr	r2, [pc, #72]	; (8001730 <MX_I2C1_Init+0x58>)
 80016e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016e8:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <MX_I2C1_Init+0x50>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016ee:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <MX_I2C1_Init+0x50>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <MX_I2C1_Init+0x50>)
 80016f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80016fc:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <MX_I2C1_Init+0x50>)
 80016fe:	2200      	movs	r2, #0
 8001700:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <MX_I2C1_Init+0x50>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001708:	4b07      	ldr	r3, [pc, #28]	; (8001728 <MX_I2C1_Init+0x50>)
 800170a:	2200      	movs	r2, #0
 800170c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800170e:	4b06      	ldr	r3, [pc, #24]	; (8001728 <MX_I2C1_Init+0x50>)
 8001710:	2200      	movs	r2, #0
 8001712:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001714:	4804      	ldr	r0, [pc, #16]	; (8001728 <MX_I2C1_Init+0x50>)
 8001716:	f000 fd33 	bl	8002180 <HAL_I2C_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001720:	f000 f902 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001724:	bf00      	nop
 8001726:	bd80      	pop	{r7, pc}
 8001728:	20000260 	.word	0x20000260
 800172c:	40005400 	.word	0x40005400
 8001730:	00061a80 	.word	0x00061a80

08001734 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b096      	sub	sp, #88	; 0x58
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800173a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800173e:	2200      	movs	r2, #0
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	605a      	str	r2, [r3, #4]
 8001744:	609a      	str	r2, [r3, #8]
 8001746:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001748:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001752:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]
 8001762:	615a      	str	r2, [r3, #20]
 8001764:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2220      	movs	r2, #32
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f003 fa27 	bl	8004bc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001772:	4b3f      	ldr	r3, [pc, #252]	; (8001870 <MX_TIM1_Init+0x13c>)
 8001774:	4a3f      	ldr	r2, [pc, #252]	; (8001874 <MX_TIM1_Init+0x140>)
 8001776:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35;
 8001778:	4b3d      	ldr	r3, [pc, #244]	; (8001870 <MX_TIM1_Init+0x13c>)
 800177a:	2223      	movs	r2, #35	; 0x23
 800177c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800177e:	4b3c      	ldr	r3, [pc, #240]	; (8001870 <MX_TIM1_Init+0x13c>)
 8001780:	2200      	movs	r2, #0
 8001782:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001784:	4b3a      	ldr	r3, [pc, #232]	; (8001870 <MX_TIM1_Init+0x13c>)
 8001786:	f242 720f 	movw	r2, #9999	; 0x270f
 800178a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800178c:	4b38      	ldr	r3, [pc, #224]	; (8001870 <MX_TIM1_Init+0x13c>)
 800178e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001792:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001794:	4b36      	ldr	r3, [pc, #216]	; (8001870 <MX_TIM1_Init+0x13c>)
 8001796:	2200      	movs	r2, #0
 8001798:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800179a:	4b35      	ldr	r3, [pc, #212]	; (8001870 <MX_TIM1_Init+0x13c>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80017a0:	4833      	ldr	r0, [pc, #204]	; (8001870 <MX_TIM1_Init+0x13c>)
 80017a2:	f002 f9f3 	bl	8003b8c <HAL_TIM_Base_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80017ac:	f000 f8bc 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80017b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80017ba:	4619      	mov	r1, r3
 80017bc:	482c      	ldr	r0, [pc, #176]	; (8001870 <MX_TIM1_Init+0x13c>)
 80017be:	f002 fbed 	bl	8003f9c <HAL_TIM_ConfigClockSource>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80017c8:	f000 f8ae 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80017cc:	4828      	ldr	r0, [pc, #160]	; (8001870 <MX_TIM1_Init+0x13c>)
 80017ce:	f002 fa2c 	bl	8003c2a <HAL_TIM_PWM_Init>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80017d8:	f000 f8a6 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017dc:	2300      	movs	r3, #0
 80017de:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017e0:	2300      	movs	r3, #0
 80017e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80017e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80017e8:	4619      	mov	r1, r3
 80017ea:	4821      	ldr	r0, [pc, #132]	; (8001870 <MX_TIM1_Init+0x13c>)
 80017ec:	f002 ff32 	bl	8004654 <HAL_TIMEx_MasterConfigSynchronization>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 80017f6:	f000 f897 	bl	8001928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017fa:	2360      	movs	r3, #96	; 0x60
 80017fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80017fe:	2300      	movs	r3, #0
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001802:	2300      	movs	r3, #0
 8001804:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001806:	2300      	movs	r3, #0
 8001808:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800180a:	2300      	movs	r3, #0
 800180c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800180e:	2300      	movs	r3, #0
 8001810:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001812:	2300      	movs	r3, #0
 8001814:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001816:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800181a:	2200      	movs	r2, #0
 800181c:	4619      	mov	r1, r3
 800181e:	4814      	ldr	r0, [pc, #80]	; (8001870 <MX_TIM1_Init+0x13c>)
 8001820:	f002 fafe 	bl	8003e20 <HAL_TIM_PWM_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 800182a:	f000 f87d 	bl	8001928 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800182e:	2300      	movs	r3, #0
 8001830:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001832:	2300      	movs	r3, #0
 8001834:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800183a:	2300      	movs	r3, #0
 800183c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800183e:	2300      	movs	r3, #0
 8001840:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001842:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001846:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800184c:	1d3b      	adds	r3, r7, #4
 800184e:	4619      	mov	r1, r3
 8001850:	4807      	ldr	r0, [pc, #28]	; (8001870 <MX_TIM1_Init+0x13c>)
 8001852:	f002 ff5d 	bl	8004710 <HAL_TIMEx_ConfigBreakDeadTime>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 800185c:	f000 f864 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001860:	4803      	ldr	r0, [pc, #12]	; (8001870 <MX_TIM1_Init+0x13c>)
 8001862:	f000 f8f3 	bl	8001a4c <HAL_TIM_MspPostInit>

}
 8001866:	bf00      	nop
 8001868:	3758      	adds	r7, #88	; 0x58
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200002e0 	.word	0x200002e0
 8001874:	40012c00 	.word	0x40012c00

08001878 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800187c:	4b11      	ldr	r3, [pc, #68]	; (80018c4 <MX_USART3_UART_Init+0x4c>)
 800187e:	4a12      	ldr	r2, [pc, #72]	; (80018c8 <MX_USART3_UART_Init+0x50>)
 8001880:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8001882:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <MX_USART3_UART_Init+0x4c>)
 8001884:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8001888:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800188a:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <MX_USART3_UART_Init+0x4c>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <MX_USART3_UART_Init+0x4c>)
 8001892:	2200      	movs	r2, #0
 8001894:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <MX_USART3_UART_Init+0x4c>)
 8001898:	2200      	movs	r2, #0
 800189a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <MX_USART3_UART_Init+0x4c>)
 800189e:	220c      	movs	r2, #12
 80018a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018a2:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <MX_USART3_UART_Init+0x4c>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a8:	4b06      	ldr	r3, [pc, #24]	; (80018c4 <MX_USART3_UART_Init+0x4c>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018ae:	4805      	ldr	r0, [pc, #20]	; (80018c4 <MX_USART3_UART_Init+0x4c>)
 80018b0:	f002 ff7f 	bl	80047b2 <HAL_UART_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018ba:	f000 f835 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000218 	.word	0x20000218
 80018c8:	40004800 	.word	0x40004800

080018cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018d2:	4a14      	ldr	r2, [pc, #80]	; (8001924 <MX_GPIO_Init+0x58>)
 80018d4:	4b13      	ldr	r3, [pc, #76]	; (8001924 <MX_GPIO_Init+0x58>)
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f043 0320 	orr.w	r3, r3, #32
 80018dc:	6193      	str	r3, [r2, #24]
 80018de:	4b11      	ldr	r3, [pc, #68]	; (8001924 <MX_GPIO_Init+0x58>)
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f003 0320 	and.w	r3, r3, #32
 80018e6:	60fb      	str	r3, [r7, #12]
 80018e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ea:	4a0e      	ldr	r2, [pc, #56]	; (8001924 <MX_GPIO_Init+0x58>)
 80018ec:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <MX_GPIO_Init+0x58>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	f043 0308 	orr.w	r3, r3, #8
 80018f4:	6193      	str	r3, [r2, #24]
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <MX_GPIO_Init+0x58>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	4a08      	ldr	r2, [pc, #32]	; (8001924 <MX_GPIO_Init+0x58>)
 8001904:	4b07      	ldr	r3, [pc, #28]	; (8001924 <MX_GPIO_Init+0x58>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	f043 0304 	orr.w	r3, r3, #4
 800190c:	6193      	str	r3, [r2, #24]
 800190e:	4b05      	ldr	r3, [pc, #20]	; (8001924 <MX_GPIO_Init+0x58>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	f003 0304 	and.w	r3, r3, #4
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]

}
 800191a:	bf00      	nop
 800191c:	3714      	adds	r7, #20
 800191e:	46bd      	mov	sp, r7
 8001920:	bc80      	pop	{r7}
 8001922:	4770      	bx	lr
 8001924:	40021000 	.word	0x40021000

08001928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800192e:	e7fe      	b.n	800192e <Error_Handler+0x6>

08001930 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001930:	b480      	push	{r7}
 8001932:	b085      	sub	sp, #20
 8001934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001936:	4a15      	ldr	r2, [pc, #84]	; (800198c <HAL_MspInit+0x5c>)
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <HAL_MspInit+0x5c>)
 800193a:	699b      	ldr	r3, [r3, #24]
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6193      	str	r3, [r2, #24]
 8001942:	4b12      	ldr	r3, [pc, #72]	; (800198c <HAL_MspInit+0x5c>)
 8001944:	699b      	ldr	r3, [r3, #24]
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	60bb      	str	r3, [r7, #8]
 800194c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800194e:	4a0f      	ldr	r2, [pc, #60]	; (800198c <HAL_MspInit+0x5c>)
 8001950:	4b0e      	ldr	r3, [pc, #56]	; (800198c <HAL_MspInit+0x5c>)
 8001952:	69db      	ldr	r3, [r3, #28]
 8001954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001958:	61d3      	str	r3, [r2, #28]
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <HAL_MspInit+0x5c>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001962:	607b      	str	r3, [r7, #4]
 8001964:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001966:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_MspInit+0x60>)
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001972:	60fb      	str	r3, [r7, #12]
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800197a:	60fb      	str	r3, [r7, #12]
 800197c:	4a04      	ldr	r2, [pc, #16]	; (8001990 <HAL_MspInit+0x60>)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001982:	bf00      	nop
 8001984:	3714      	adds	r7, #20
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr
 800198c:	40021000 	.word	0x40021000
 8001990:	40010000 	.word	0x40010000

08001994 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b088      	sub	sp, #32
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199c:	f107 0310 	add.w	r3, r7, #16
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	605a      	str	r2, [r3, #4]
 80019a6:	609a      	str	r2, [r3, #8]
 80019a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a15      	ldr	r2, [pc, #84]	; (8001a04 <HAL_I2C_MspInit+0x70>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d123      	bne.n	80019fc <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b4:	4a14      	ldr	r2, [pc, #80]	; (8001a08 <HAL_I2C_MspInit+0x74>)
 80019b6:	4b14      	ldr	r3, [pc, #80]	; (8001a08 <HAL_I2C_MspInit+0x74>)
 80019b8:	699b      	ldr	r3, [r3, #24]
 80019ba:	f043 0308 	orr.w	r3, r3, #8
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b11      	ldr	r3, [pc, #68]	; (8001a08 <HAL_I2C_MspInit+0x74>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019cc:	23c0      	movs	r3, #192	; 0xc0
 80019ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019d0:	2312      	movs	r3, #18
 80019d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019d4:	2303      	movs	r3, #3
 80019d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d8:	f107 0310 	add.w	r3, r7, #16
 80019dc:	4619      	mov	r1, r3
 80019de:	480b      	ldr	r0, [pc, #44]	; (8001a0c <HAL_I2C_MspInit+0x78>)
 80019e0:	f000 fa74 	bl	8001ecc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019e4:	4a08      	ldr	r2, [pc, #32]	; (8001a08 <HAL_I2C_MspInit+0x74>)
 80019e6:	4b08      	ldr	r3, [pc, #32]	; (8001a08 <HAL_I2C_MspInit+0x74>)
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019ee:	61d3      	str	r3, [r2, #28]
 80019f0:	4b05      	ldr	r3, [pc, #20]	; (8001a08 <HAL_I2C_MspInit+0x74>)
 80019f2:	69db      	ldr	r3, [r3, #28]
 80019f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f8:	60bb      	str	r3, [r7, #8]
 80019fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80019fc:	bf00      	nop
 80019fe:	3720      	adds	r7, #32
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40005400 	.word	0x40005400
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010c00 	.word	0x40010c00

08001a10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a09      	ldr	r2, [pc, #36]	; (8001a44 <HAL_TIM_Base_MspInit+0x34>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d10b      	bne.n	8001a3a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a22:	4a09      	ldr	r2, [pc, #36]	; (8001a48 <HAL_TIM_Base_MspInit+0x38>)
 8001a24:	4b08      	ldr	r3, [pc, #32]	; (8001a48 <HAL_TIM_Base_MspInit+0x38>)
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a2c:	6193      	str	r3, [r2, #24]
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_TIM_Base_MspInit+0x38>)
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	40012c00 	.word	0x40012c00
 8001a48:	40021000 	.word	0x40021000

08001a4c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a54:	f107 0310 	add.w	r3, r7, #16
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	605a      	str	r2, [r3, #4]
 8001a5e:	609a      	str	r2, [r3, #8]
 8001a60:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a10      	ldr	r2, [pc, #64]	; (8001aa8 <HAL_TIM_MspPostInit+0x5c>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d118      	bne.n	8001a9e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a6c:	4a0f      	ldr	r2, [pc, #60]	; (8001aac <HAL_TIM_MspPostInit+0x60>)
 8001a6e:	4b0f      	ldr	r3, [pc, #60]	; (8001aac <HAL_TIM_MspPostInit+0x60>)
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	f043 0304 	orr.w	r3, r3, #4
 8001a76:	6193      	str	r3, [r2, #24]
 8001a78:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <HAL_TIM_MspPostInit+0x60>)
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	60fb      	str	r3, [r7, #12]
 8001a82:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a88:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 0310 	add.w	r3, r7, #16
 8001a96:	4619      	mov	r1, r3
 8001a98:	4805      	ldr	r0, [pc, #20]	; (8001ab0 <HAL_TIM_MspPostInit+0x64>)
 8001a9a:	f000 fa17 	bl	8001ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a9e:	bf00      	nop
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40012c00 	.word	0x40012c00
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40010800 	.word	0x40010800

08001ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b088      	sub	sp, #32
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]
 8001ac4:	605a      	str	r2, [r3, #4]
 8001ac6:	609a      	str	r2, [r3, #8]
 8001ac8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a1c      	ldr	r2, [pc, #112]	; (8001b40 <HAL_UART_MspInit+0x8c>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d131      	bne.n	8001b38 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	; (8001b44 <HAL_UART_MspInit+0x90>)
 8001ad6:	4b1b      	ldr	r3, [pc, #108]	; (8001b44 <HAL_UART_MspInit+0x90>)
 8001ad8:	69db      	ldr	r3, [r3, #28]
 8001ada:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ade:	61d3      	str	r3, [r2, #28]
 8001ae0:	4b18      	ldr	r3, [pc, #96]	; (8001b44 <HAL_UART_MspInit+0x90>)
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aec:	4a15      	ldr	r2, [pc, #84]	; (8001b44 <HAL_UART_MspInit+0x90>)
 8001aee:	4b15      	ldr	r3, [pc, #84]	; (8001b44 <HAL_UART_MspInit+0x90>)
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f043 0308 	orr.w	r3, r3, #8
 8001af6:	6193      	str	r3, [r2, #24]
 8001af8:	4b12      	ldr	r3, [pc, #72]	; (8001b44 <HAL_UART_MspInit+0x90>)
 8001afa:	699b      	ldr	r3, [r3, #24]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001b04:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001b08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b12:	f107 0310 	add.w	r3, r7, #16
 8001b16:	4619      	mov	r1, r3
 8001b18:	480b      	ldr	r0, [pc, #44]	; (8001b48 <HAL_UART_MspInit+0x94>)
 8001b1a:	f000 f9d7 	bl	8001ecc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001b1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b24:	2300      	movs	r3, #0
 8001b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2c:	f107 0310 	add.w	r3, r7, #16
 8001b30:	4619      	mov	r1, r3
 8001b32:	4805      	ldr	r0, [pc, #20]	; (8001b48 <HAL_UART_MspInit+0x94>)
 8001b34:	f000 f9ca 	bl	8001ecc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001b38:	bf00      	nop
 8001b3a:	3720      	adds	r7, #32
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	40004800 	.word	0x40004800
 8001b44:	40021000 	.word	0x40021000
 8001b48:	40010c00 	.word	0x40010c00

08001b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b50:	e7fe      	b.n	8001b50 <NMI_Handler+0x4>

08001b52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b52:	b480      	push	{r7}
 8001b54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b56:	e7fe      	b.n	8001b56 <HardFault_Handler+0x4>

08001b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <MemManage_Handler+0x4>

08001b5e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b5e:	b480      	push	{r7}
 8001b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b62:	e7fe      	b.n	8001b62 <BusFault_Handler+0x4>

08001b64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b68:	e7fe      	b.n	8001b68 <UsageFault_Handler+0x4>

08001b6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b6e:	bf00      	nop
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr

08001b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b76:	b480      	push	{r7}
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr

08001b82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b86:	bf00      	nop
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bc80      	pop	{r7}
 8001b8c:	4770      	bx	lr

08001b8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b92:	f000 f87b 	bl	8001c8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b96:	bf00      	nop
 8001b98:	bd80      	pop	{r7, pc}
	...

08001b9c <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b084      	sub	sp, #16
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <_sbrk+0x50>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d102      	bne.n	8001bb2 <_sbrk+0x16>
		heap_end = &end;
 8001bac:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <_sbrk+0x50>)
 8001bae:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <_sbrk+0x54>)
 8001bb0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001bb2:	4b0e      	ldr	r3, [pc, #56]	; (8001bec <_sbrk+0x50>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <_sbrk+0x50>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4413      	add	r3, r2
 8001bc0:	466a      	mov	r2, sp
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d907      	bls.n	8001bd6 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8001bc6:	f002 ffd1 	bl	8004b6c <__errno>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	230c      	movs	r3, #12
 8001bce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001bd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001bd4:	e006      	b.n	8001be4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001bd6:	4b05      	ldr	r3, [pc, #20]	; (8001bec <_sbrk+0x50>)
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	4a03      	ldr	r2, [pc, #12]	; (8001bec <_sbrk+0x50>)
 8001be0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001be2:	68fb      	ldr	r3, [r7, #12]
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	2000020c 	.word	0x2000020c
 8001bf0:	2000036c 	.word	0x2000036c

08001bf4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c04:	4a08      	ldr	r2, [pc, #32]	; (8001c28 <HAL_Init+0x28>)
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <HAL_Init+0x28>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f043 0310 	orr.w	r3, r3, #16
 8001c0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c10:	2003      	movs	r0, #3
 8001c12:	f000 f927 	bl	8001e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f000 f808 	bl	8001c2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c1c:	f7ff fe88 	bl	8001930 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40022000 	.word	0x40022000

08001c2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c34:	4b12      	ldr	r3, [pc, #72]	; (8001c80 <HAL_InitTick+0x54>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4b12      	ldr	r3, [pc, #72]	; (8001c84 <HAL_InitTick+0x58>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	f000 f931 	bl	8001eb2 <HAL_SYSTICK_Config>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e00e      	b.n	8001c78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b0f      	cmp	r3, #15
 8001c5e:	d80a      	bhi.n	8001c76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c60:	2200      	movs	r2, #0
 8001c62:	6879      	ldr	r1, [r7, #4]
 8001c64:	f04f 30ff 	mov.w	r0, #4294967295
 8001c68:	f000 f907 	bl	8001e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c6c:	4a06      	ldr	r2, [pc, #24]	; (8001c88 <HAL_InitTick+0x5c>)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c72:	2300      	movs	r3, #0
 8001c74:	e000      	b.n	8001c78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	20000014 	.word	0x20000014
 8001c84:	2000001c 	.word	0x2000001c
 8001c88:	20000018 	.word	0x20000018

08001c8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c90:	4b05      	ldr	r3, [pc, #20]	; (8001ca8 <HAL_IncTick+0x1c>)
 8001c92:	781b      	ldrb	r3, [r3, #0]
 8001c94:	461a      	mov	r2, r3
 8001c96:	4b05      	ldr	r3, [pc, #20]	; (8001cac <HAL_IncTick+0x20>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	4a03      	ldr	r2, [pc, #12]	; (8001cac <HAL_IncTick+0x20>)
 8001c9e:	6013      	str	r3, [r2, #0]
}
 8001ca0:	bf00      	nop
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bc80      	pop	{r7}
 8001ca6:	4770      	bx	lr
 8001ca8:	2000001c 	.word	0x2000001c
 8001cac:	20000364 	.word	0x20000364

08001cb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return uwTick;
 8001cb4:	4b02      	ldr	r3, [pc, #8]	; (8001cc0 <HAL_GetTick+0x10>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr
 8001cc0:	20000364 	.word	0x20000364

08001cc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ccc:	f7ff fff0 	bl	8001cb0 <HAL_GetTick>
 8001cd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cdc:	d005      	beq.n	8001cea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cde:	4b09      	ldr	r3, [pc, #36]	; (8001d04 <HAL_Delay+0x40>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001cea:	bf00      	nop
 8001cec:	f7ff ffe0 	bl	8001cb0 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	1ad2      	subs	r2, r2, r3
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d3f7      	bcc.n	8001cec <HAL_Delay+0x28>
  {
  }
}
 8001cfc:	bf00      	nop
 8001cfe:	3710      	adds	r7, #16
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	2000001c 	.word	0x2000001c

08001d08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d18:	4b0c      	ldr	r3, [pc, #48]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1e:	68ba      	ldr	r2, [r7, #8]
 8001d20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d24:	4013      	ands	r3, r2
 8001d26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d3a:	4a04      	ldr	r2, [pc, #16]	; (8001d4c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	60d3      	str	r3, [r2, #12]
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bc80      	pop	{r7}
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d50:	b480      	push	{r7}
 8001d52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d54:	4b04      	ldr	r3, [pc, #16]	; (8001d68 <__NVIC_GetPriorityGrouping+0x18>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	0a1b      	lsrs	r3, r3, #8
 8001d5a:	f003 0307 	and.w	r3, r3, #7
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000ed00 	.word	0xe000ed00

08001d6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	db0a      	blt.n	8001d96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d80:	490d      	ldr	r1, [pc, #52]	; (8001db8 <__NVIC_SetPriority+0x4c>)
 8001d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	b2d2      	uxtb	r2, r2
 8001d8a:	0112      	lsls	r2, r2, #4
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	440b      	add	r3, r1
 8001d90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d94:	e00a      	b.n	8001dac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d96:	4909      	ldr	r1, [pc, #36]	; (8001dbc <__NVIC_SetPriority+0x50>)
 8001d98:	79fb      	ldrb	r3, [r7, #7]
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	3b04      	subs	r3, #4
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	b2d2      	uxtb	r2, r2
 8001da4:	0112      	lsls	r2, r2, #4
 8001da6:	b2d2      	uxtb	r2, r2
 8001da8:	440b      	add	r3, r1
 8001daa:	761a      	strb	r2, [r3, #24]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bc80      	pop	{r7}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000e100 	.word	0xe000e100
 8001dbc:	e000ed00 	.word	0xe000ed00

08001dc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b089      	sub	sp, #36	; 0x24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f1c3 0307 	rsb	r3, r3, #7
 8001dda:	2b04      	cmp	r3, #4
 8001ddc:	bf28      	it	cs
 8001dde:	2304      	movcs	r3, #4
 8001de0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	3304      	adds	r3, #4
 8001de6:	2b06      	cmp	r3, #6
 8001de8:	d902      	bls.n	8001df0 <NVIC_EncodePriority+0x30>
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3b03      	subs	r3, #3
 8001dee:	e000      	b.n	8001df2 <NVIC_EncodePriority+0x32>
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df4:	2201      	movs	r2, #1
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfc:	1e5a      	subs	r2, r3, #1
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	401a      	ands	r2, r3
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e06:	2101      	movs	r1, #1
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e0e:	1e59      	subs	r1, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	4313      	orrs	r3, r2
         );
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3724      	adds	r7, #36	; 0x24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr

08001e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e30:	d301      	bcc.n	8001e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e32:	2301      	movs	r3, #1
 8001e34:	e00f      	b.n	8001e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <SysTick_Config+0x40>)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	3b01      	subs	r3, #1
 8001e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e3e:	210f      	movs	r1, #15
 8001e40:	f04f 30ff 	mov.w	r0, #4294967295
 8001e44:	f7ff ff92 	bl	8001d6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e48:	4b05      	ldr	r3, [pc, #20]	; (8001e60 <SysTick_Config+0x40>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e4e:	4b04      	ldr	r3, [pc, #16]	; (8001e60 <SysTick_Config+0x40>)
 8001e50:	2207      	movs	r2, #7
 8001e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	e000e010 	.word	0xe000e010

08001e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e6c:	6878      	ldr	r0, [r7, #4]
 8001e6e:	f7ff ff4b 	bl	8001d08 <__NVIC_SetPriorityGrouping>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	4603      	mov	r3, r0
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
 8001e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e8c:	f7ff ff60 	bl	8001d50 <__NVIC_GetPriorityGrouping>
 8001e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	68b9      	ldr	r1, [r7, #8]
 8001e96:	6978      	ldr	r0, [r7, #20]
 8001e98:	f7ff ff92 	bl	8001dc0 <NVIC_EncodePriority>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff61 	bl	8001d6c <__NVIC_SetPriority>
}
 8001eaa:	bf00      	nop
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffb0 	bl	8001e20 <SysTick_Config>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b08b      	sub	sp, #44	; 0x2c
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eda:	2300      	movs	r3, #0
 8001edc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ede:	e127      	b.n	8002130 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	f040 8116 	bne.w	800212a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b12      	cmp	r3, #18
 8001f04:	d034      	beq.n	8001f70 <HAL_GPIO_Init+0xa4>
 8001f06:	2b12      	cmp	r3, #18
 8001f08:	d80d      	bhi.n	8001f26 <HAL_GPIO_Init+0x5a>
 8001f0a:	2b02      	cmp	r3, #2
 8001f0c:	d02b      	beq.n	8001f66 <HAL_GPIO_Init+0x9a>
 8001f0e:	2b02      	cmp	r3, #2
 8001f10:	d804      	bhi.n	8001f1c <HAL_GPIO_Init+0x50>
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d031      	beq.n	8001f7a <HAL_GPIO_Init+0xae>
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	d01c      	beq.n	8001f54 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f1a:	e048      	b.n	8001fae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d043      	beq.n	8001fa8 <HAL_GPIO_Init+0xdc>
 8001f20:	2b11      	cmp	r3, #17
 8001f22:	d01b      	beq.n	8001f5c <HAL_GPIO_Init+0x90>
          break;
 8001f24:	e043      	b.n	8001fae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f26:	4a89      	ldr	r2, [pc, #548]	; (800214c <HAL_GPIO_Init+0x280>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d026      	beq.n	8001f7a <HAL_GPIO_Init+0xae>
 8001f2c:	4a87      	ldr	r2, [pc, #540]	; (800214c <HAL_GPIO_Init+0x280>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d806      	bhi.n	8001f40 <HAL_GPIO_Init+0x74>
 8001f32:	4a87      	ldr	r2, [pc, #540]	; (8002150 <HAL_GPIO_Init+0x284>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d020      	beq.n	8001f7a <HAL_GPIO_Init+0xae>
 8001f38:	4a86      	ldr	r2, [pc, #536]	; (8002154 <HAL_GPIO_Init+0x288>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d01d      	beq.n	8001f7a <HAL_GPIO_Init+0xae>
          break;
 8001f3e:	e036      	b.n	8001fae <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001f40:	4a85      	ldr	r2, [pc, #532]	; (8002158 <HAL_GPIO_Init+0x28c>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d019      	beq.n	8001f7a <HAL_GPIO_Init+0xae>
 8001f46:	4a85      	ldr	r2, [pc, #532]	; (800215c <HAL_GPIO_Init+0x290>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d016      	beq.n	8001f7a <HAL_GPIO_Init+0xae>
 8001f4c:	4a84      	ldr	r2, [pc, #528]	; (8002160 <HAL_GPIO_Init+0x294>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d013      	beq.n	8001f7a <HAL_GPIO_Init+0xae>
          break;
 8001f52:	e02c      	b.n	8001fae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	623b      	str	r3, [r7, #32]
          break;
 8001f5a:	e028      	b.n	8001fae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	3304      	adds	r3, #4
 8001f62:	623b      	str	r3, [r7, #32]
          break;
 8001f64:	e023      	b.n	8001fae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	3308      	adds	r3, #8
 8001f6c:	623b      	str	r3, [r7, #32]
          break;
 8001f6e:	e01e      	b.n	8001fae <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	330c      	adds	r3, #12
 8001f76:	623b      	str	r3, [r7, #32]
          break;
 8001f78:	e019      	b.n	8001fae <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d102      	bne.n	8001f88 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f82:	2304      	movs	r3, #4
 8001f84:	623b      	str	r3, [r7, #32]
          break;
 8001f86:	e012      	b.n	8001fae <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d105      	bne.n	8001f9c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f90:	2308      	movs	r3, #8
 8001f92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	611a      	str	r2, [r3, #16]
          break;
 8001f9a:	e008      	b.n	8001fae <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	69fa      	ldr	r2, [r7, #28]
 8001fa4:	615a      	str	r2, [r3, #20]
          break;
 8001fa6:	e002      	b.n	8001fae <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	623b      	str	r3, [r7, #32]
          break;
 8001fac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001fae:	69bb      	ldr	r3, [r7, #24]
 8001fb0:	2bff      	cmp	r3, #255	; 0xff
 8001fb2:	d801      	bhi.n	8001fb8 <HAL_GPIO_Init+0xec>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	e001      	b.n	8001fbc <HAL_GPIO_Init+0xf0>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	3304      	adds	r3, #4
 8001fbc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	2bff      	cmp	r3, #255	; 0xff
 8001fc2:	d802      	bhi.n	8001fca <HAL_GPIO_Init+0xfe>
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc6:	009b      	lsls	r3, r3, #2
 8001fc8:	e002      	b.n	8001fd0 <HAL_GPIO_Init+0x104>
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	3b08      	subs	r3, #8
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	681a      	ldr	r2, [r3, #0]
 8001fd6:	210f      	movs	r1, #15
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	fa01 f303 	lsl.w	r3, r1, r3
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	401a      	ands	r2, r3
 8001fe2:	6a39      	ldr	r1, [r7, #32]
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fea:	431a      	orrs	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 8096 	beq.w	800212a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001ffe:	4a59      	ldr	r2, [pc, #356]	; (8002164 <HAL_GPIO_Init+0x298>)
 8002000:	4b58      	ldr	r3, [pc, #352]	; (8002164 <HAL_GPIO_Init+0x298>)
 8002002:	699b      	ldr	r3, [r3, #24]
 8002004:	f043 0301 	orr.w	r3, r3, #1
 8002008:	6193      	str	r3, [r2, #24]
 800200a:	4b56      	ldr	r3, [pc, #344]	; (8002164 <HAL_GPIO_Init+0x298>)
 800200c:	699b      	ldr	r3, [r3, #24]
 800200e:	f003 0301 	and.w	r3, r3, #1
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002016:	4a54      	ldr	r2, [pc, #336]	; (8002168 <HAL_GPIO_Init+0x29c>)
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	089b      	lsrs	r3, r3, #2
 800201c:	3302      	adds	r3, #2
 800201e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002022:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	220f      	movs	r2, #15
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43db      	mvns	r3, r3
 8002034:	68fa      	ldr	r2, [r7, #12]
 8002036:	4013      	ands	r3, r2
 8002038:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4b      	ldr	r2, [pc, #300]	; (800216c <HAL_GPIO_Init+0x2a0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <HAL_GPIO_Init+0x19e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4a      	ldr	r2, [pc, #296]	; (8002170 <HAL_GPIO_Init+0x2a4>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d00d      	beq.n	8002066 <HAL_GPIO_Init+0x19a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a49      	ldr	r2, [pc, #292]	; (8002174 <HAL_GPIO_Init+0x2a8>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d007      	beq.n	8002062 <HAL_GPIO_Init+0x196>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a48      	ldr	r2, [pc, #288]	; (8002178 <HAL_GPIO_Init+0x2ac>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d101      	bne.n	800205e <HAL_GPIO_Init+0x192>
 800205a:	2303      	movs	r3, #3
 800205c:	e006      	b.n	800206c <HAL_GPIO_Init+0x1a0>
 800205e:	2304      	movs	r3, #4
 8002060:	e004      	b.n	800206c <HAL_GPIO_Init+0x1a0>
 8002062:	2302      	movs	r3, #2
 8002064:	e002      	b.n	800206c <HAL_GPIO_Init+0x1a0>
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_GPIO_Init+0x1a0>
 800206a:	2300      	movs	r3, #0
 800206c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800206e:	f002 0203 	and.w	r2, r2, #3
 8002072:	0092      	lsls	r2, r2, #2
 8002074:	4093      	lsls	r3, r2
 8002076:	68fa      	ldr	r2, [r7, #12]
 8002078:	4313      	orrs	r3, r2
 800207a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800207c:	493a      	ldr	r1, [pc, #232]	; (8002168 <HAL_GPIO_Init+0x29c>)
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	089b      	lsrs	r3, r3, #2
 8002082:	3302      	adds	r3, #2
 8002084:	68fa      	ldr	r2, [r7, #12]
 8002086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d006      	beq.n	80020a4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002096:	4939      	ldr	r1, [pc, #228]	; (800217c <HAL_GPIO_Init+0x2b0>)
 8002098:	4b38      	ldr	r3, [pc, #224]	; (800217c <HAL_GPIO_Init+0x2b0>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]
 80020a2:	e006      	b.n	80020b2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020a4:	4935      	ldr	r1, [pc, #212]	; (800217c <HAL_GPIO_Init+0x2b0>)
 80020a6:	4b35      	ldr	r3, [pc, #212]	; (800217c <HAL_GPIO_Init+0x2b0>)
 80020a8:	681a      	ldr	r2, [r3, #0]
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	43db      	mvns	r3, r3
 80020ae:	4013      	ands	r3, r2
 80020b0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d006      	beq.n	80020cc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80020be:	492f      	ldr	r1, [pc, #188]	; (800217c <HAL_GPIO_Init+0x2b0>)
 80020c0:	4b2e      	ldr	r3, [pc, #184]	; (800217c <HAL_GPIO_Init+0x2b0>)
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	4313      	orrs	r3, r2
 80020c8:	604b      	str	r3, [r1, #4]
 80020ca:	e006      	b.n	80020da <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80020cc:	492b      	ldr	r1, [pc, #172]	; (800217c <HAL_GPIO_Init+0x2b0>)
 80020ce:	4b2b      	ldr	r3, [pc, #172]	; (800217c <HAL_GPIO_Init+0x2b0>)
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	4013      	ands	r3, r2
 80020d8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d006      	beq.n	80020f4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80020e6:	4925      	ldr	r1, [pc, #148]	; (800217c <HAL_GPIO_Init+0x2b0>)
 80020e8:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_GPIO_Init+0x2b0>)
 80020ea:	689a      	ldr	r2, [r3, #8]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	608b      	str	r3, [r1, #8]
 80020f2:	e006      	b.n	8002102 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80020f4:	4921      	ldr	r1, [pc, #132]	; (800217c <HAL_GPIO_Init+0x2b0>)
 80020f6:	4b21      	ldr	r3, [pc, #132]	; (800217c <HAL_GPIO_Init+0x2b0>)
 80020f8:	689a      	ldr	r2, [r3, #8]
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	43db      	mvns	r3, r3
 80020fe:	4013      	ands	r3, r2
 8002100:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d006      	beq.n	800211c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800210e:	491b      	ldr	r1, [pc, #108]	; (800217c <HAL_GPIO_Init+0x2b0>)
 8002110:	4b1a      	ldr	r3, [pc, #104]	; (800217c <HAL_GPIO_Init+0x2b0>)
 8002112:	68da      	ldr	r2, [r3, #12]
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	4313      	orrs	r3, r2
 8002118:	60cb      	str	r3, [r1, #12]
 800211a:	e006      	b.n	800212a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800211c:	4917      	ldr	r1, [pc, #92]	; (800217c <HAL_GPIO_Init+0x2b0>)
 800211e:	4b17      	ldr	r3, [pc, #92]	; (800217c <HAL_GPIO_Init+0x2b0>)
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	43db      	mvns	r3, r3
 8002126:	4013      	ands	r3, r2
 8002128:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	3301      	adds	r3, #1
 800212e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	fa22 f303 	lsr.w	r3, r2, r3
 800213a:	2b00      	cmp	r3, #0
 800213c:	f47f aed0 	bne.w	8001ee0 <HAL_GPIO_Init+0x14>
  }
}
 8002140:	bf00      	nop
 8002142:	372c      	adds	r7, #44	; 0x2c
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	10210000 	.word	0x10210000
 8002150:	10110000 	.word	0x10110000
 8002154:	10120000 	.word	0x10120000
 8002158:	10310000 	.word	0x10310000
 800215c:	10320000 	.word	0x10320000
 8002160:	10220000 	.word	0x10220000
 8002164:	40021000 	.word	0x40021000
 8002168:	40010000 	.word	0x40010000
 800216c:	40010800 	.word	0x40010800
 8002170:	40010c00 	.word	0x40010c00
 8002174:	40011000 	.word	0x40011000
 8002178:	40011400 	.word	0x40011400
 800217c:	40010400 	.word	0x40010400

08002180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b085      	sub	sp, #20
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d101      	bne.n	8002192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e11f      	b.n	80023d2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b00      	cmp	r3, #0
 800219c:	d106      	bne.n	80021ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff fbf4 	bl	8001994 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2224      	movs	r2, #36	; 0x24
 80021b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6812      	ldr	r2, [r2, #0]
 80021bc:	6812      	ldr	r2, [r2, #0]
 80021be:	f022 0201 	bic.w	r2, r2, #1
 80021c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	687a      	ldr	r2, [r7, #4]
 80021ca:	6812      	ldr	r2, [r2, #0]
 80021cc:	6812      	ldr	r2, [r2, #0]
 80021ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80021d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	6812      	ldr	r2, [r2, #0]
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80021e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80021e4:	f001 fc8c 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 80021e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	4a7b      	ldr	r2, [pc, #492]	; (80023dc <HAL_I2C_Init+0x25c>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d807      	bhi.n	8002204 <HAL_I2C_Init+0x84>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	4a7a      	ldr	r2, [pc, #488]	; (80023e0 <HAL_I2C_Init+0x260>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	bf94      	ite	ls
 80021fc:	2301      	movls	r3, #1
 80021fe:	2300      	movhi	r3, #0
 8002200:	b2db      	uxtb	r3, r3
 8002202:	e006      	b.n	8002212 <HAL_I2C_Init+0x92>
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4a77      	ldr	r2, [pc, #476]	; (80023e4 <HAL_I2C_Init+0x264>)
 8002208:	4293      	cmp	r3, r2
 800220a:	bf94      	ite	ls
 800220c:	2301      	movls	r3, #1
 800220e:	2300      	movhi	r3, #0
 8002210:	b2db      	uxtb	r3, r3
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e0db      	b.n	80023d2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	4a72      	ldr	r2, [pc, #456]	; (80023e8 <HAL_I2C_Init+0x268>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	0c9b      	lsrs	r3, r3, #18
 8002224:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	6812      	ldr	r2, [r2, #0]
 800222e:	6852      	ldr	r2, [r2, #4]
 8002230:	f022 013f 	bic.w	r1, r2, #63	; 0x3f
 8002234:	68ba      	ldr	r2, [r7, #8]
 8002236:	430a      	orrs	r2, r1
 8002238:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4863      	ldr	r0, [pc, #396]	; (80023dc <HAL_I2C_Init+0x25c>)
 800224e:	4283      	cmp	r3, r0
 8002250:	d802      	bhi.n	8002258 <HAL_I2C_Init+0xd8>
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	3301      	adds	r3, #1
 8002256:	e009      	b.n	800226c <HAL_I2C_Init+0xec>
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800225e:	fb00 f303 	mul.w	r3, r0, r3
 8002262:	4862      	ldr	r0, [pc, #392]	; (80023ec <HAL_I2C_Init+0x26c>)
 8002264:	fba0 0303 	umull	r0, r3, r0, r3
 8002268:	099b      	lsrs	r3, r3, #6
 800226a:	3301      	adds	r3, #1
 800226c:	430b      	orrs	r3, r1
 800226e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	69db      	ldr	r3, [r3, #28]
 800227a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800227e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	4955      	ldr	r1, [pc, #340]	; (80023dc <HAL_I2C_Init+0x25c>)
 8002288:	428b      	cmp	r3, r1
 800228a:	d80d      	bhi.n	80022a8 <HAL_I2C_Init+0x128>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	1e59      	subs	r1, r3, #1
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	fbb1 f3f3 	udiv	r3, r1, r3
 800229a:	3301      	adds	r3, #1
 800229c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a0:	2b04      	cmp	r3, #4
 80022a2:	bf38      	it	cc
 80022a4:	2304      	movcc	r3, #4
 80022a6:	e04f      	b.n	8002348 <HAL_I2C_Init+0x1c8>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d111      	bne.n	80022d4 <HAL_I2C_Init+0x154>
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	1e5c      	subs	r4, r3, #1
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	460b      	mov	r3, r1
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	440b      	add	r3, r1
 80022be:	fbb4 f3f3 	udiv	r3, r4, r3
 80022c2:	3301      	adds	r3, #1
 80022c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	bf0c      	ite	eq
 80022cc:	2301      	moveq	r3, #1
 80022ce:	2300      	movne	r3, #0
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	e012      	b.n	80022fa <HAL_I2C_Init+0x17a>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1e5c      	subs	r4, r3, #1
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	460b      	mov	r3, r1
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	0099      	lsls	r1, r3, #2
 80022e4:	440b      	add	r3, r1
 80022e6:	fbb4 f3f3 	udiv	r3, r4, r3
 80022ea:	3301      	adds	r3, #1
 80022ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	bf0c      	ite	eq
 80022f4:	2301      	moveq	r3, #1
 80022f6:	2300      	movne	r3, #0
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d001      	beq.n	8002302 <HAL_I2C_Init+0x182>
 80022fe:	2301      	movs	r3, #1
 8002300:	e022      	b.n	8002348 <HAL_I2C_Init+0x1c8>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10e      	bne.n	8002328 <HAL_I2C_Init+0x1a8>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	1e5c      	subs	r4, r3, #1
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6859      	ldr	r1, [r3, #4]
 8002312:	460b      	mov	r3, r1
 8002314:	005b      	lsls	r3, r3, #1
 8002316:	440b      	add	r3, r1
 8002318:	fbb4 f3f3 	udiv	r3, r4, r3
 800231c:	3301      	adds	r3, #1
 800231e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002322:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002326:	e00f      	b.n	8002348 <HAL_I2C_Init+0x1c8>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	1e5c      	subs	r4, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6859      	ldr	r1, [r3, #4]
 8002330:	460b      	mov	r3, r1
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	0099      	lsls	r1, r3, #2
 8002338:	440b      	add	r3, r1
 800233a:	fbb4 f3f3 	udiv	r3, r4, r3
 800233e:	3301      	adds	r3, #1
 8002340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002344:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002348:	4313      	orrs	r3, r2
 800234a:	61c3      	str	r3, [r0, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	6812      	ldr	r2, [r2, #0]
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	f022 01c0 	bic.w	r1, r2, #192	; 0xc0
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	69d0      	ldr	r0, [r2, #28]
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	6a12      	ldr	r2, [r2, #32]
 8002362:	4302      	orrs	r2, r0
 8002364:	430a      	orrs	r2, r1
 8002366:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002376:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	6908      	ldr	r0, [r1, #16]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	68c9      	ldr	r1, [r1, #12]
 8002382:	4301      	orrs	r1, r0
 8002384:	430b      	orrs	r3, r1
 8002386:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	6812      	ldr	r2, [r2, #0]
 8002390:	68d2      	ldr	r2, [r2, #12]
 8002392:	f022 01ff 	bic.w	r1, r2, #255	; 0xff
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	6950      	ldr	r0, [r2, #20]
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6992      	ldr	r2, [r2, #24]
 800239e:	4302      	orrs	r2, r0
 80023a0:	430a      	orrs	r2, r1
 80023a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	6812      	ldr	r2, [r2, #0]
 80023ac:	6812      	ldr	r2, [r2, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2220      	movs	r2, #32
 80023be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd90      	pop	{r4, r7, pc}
 80023da:	bf00      	nop
 80023dc:	000186a0 	.word	0x000186a0
 80023e0:	001e847f 	.word	0x001e847f
 80023e4:	003d08ff 	.word	0x003d08ff
 80023e8:	431bde83 	.word	0x431bde83
 80023ec:	10624dd3 	.word	0x10624dd3

080023f0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b088      	sub	sp, #32
 80023f4:	af02      	add	r7, sp, #8
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	607a      	str	r2, [r7, #4]
 80023fa:	461a      	mov	r2, r3
 80023fc:	460b      	mov	r3, r1
 80023fe:	817b      	strh	r3, [r7, #10]
 8002400:	4613      	mov	r3, r2
 8002402:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002404:	f7ff fc54 	bl	8001cb0 <HAL_GetTick>
 8002408:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002410:	b2db      	uxtb	r3, r3
 8002412:	2b20      	cmp	r3, #32
 8002414:	f040 80e0 	bne.w	80025d8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	2319      	movs	r3, #25
 800241e:	2201      	movs	r2, #1
 8002420:	4970      	ldr	r1, [pc, #448]	; (80025e4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f000 fdba 	bl	8002f9c <I2C_WaitOnFlagUntilTimeout>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800242e:	2302      	movs	r3, #2
 8002430:	e0d3      	b.n	80025da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_I2C_Master_Transmit+0x50>
 800243c:	2302      	movs	r3, #2
 800243e:	e0cc      	b.n	80025da <HAL_I2C_Master_Transmit+0x1ea>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0301 	and.w	r3, r3, #1
 8002452:	2b01      	cmp	r3, #1
 8002454:	d007      	beq.n	8002466 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	6812      	ldr	r2, [r2, #0]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	f042 0201 	orr.w	r2, r2, #1
 8002464:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	6812      	ldr	r2, [r2, #0]
 800246e:	6812      	ldr	r2, [r2, #0]
 8002470:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002474:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	2221      	movs	r2, #33	; 0x21
 800247a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2210      	movs	r2, #16
 8002482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	893a      	ldrh	r2, [r7, #8]
 8002496:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4a50      	ldr	r2, [pc, #320]	; (80025e8 <HAL_I2C_Master_Transmit+0x1f8>)
 80024a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80024a8:	8979      	ldrh	r1, [r7, #10]
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	6a3a      	ldr	r2, [r7, #32]
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f000 fc24 	bl	8002cfc <I2C_MasterRequestWrite>
 80024b4:	4603      	mov	r3, r0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d001      	beq.n	80024be <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e08d      	b.n	80025da <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	613b      	str	r3, [r7, #16]
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	613b      	str	r3, [r7, #16]
 80024d2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80024d4:	e066      	b.n	80025a4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	6a39      	ldr	r1, [r7, #32]
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 fe34 	bl	8003148 <I2C_WaitOnTXEFlagUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d00d      	beq.n	8002502 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d107      	bne.n	80024fe <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68fa      	ldr	r2, [r7, #12]
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	6812      	ldr	r2, [r2, #0]
 80024f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e06b      	b.n	80025da <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68fa      	ldr	r2, [r7, #12]
 8002508:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800250a:	7812      	ldrb	r2, [r2, #0]
 800250c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002512:	1c5a      	adds	r2, r3, #1
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	3b01      	subs	r3, #1
 8002520:	b29a      	uxth	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252a:	3b01      	subs	r3, #1
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b04      	cmp	r3, #4
 800253e:	d11b      	bne.n	8002578 <HAL_I2C_Master_Transmit+0x188>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002544:	2b00      	cmp	r3, #0
 8002546:	d017      	beq.n	8002578 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002550:	7812      	ldrb	r2, [r2, #0]
 8002552:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002562:	b29b      	uxth	r3, r3
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002570:	3b01      	subs	r3, #1
 8002572:	b29a      	uxth	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	6a39      	ldr	r1, [r7, #32]
 800257c:	68f8      	ldr	r0, [r7, #12]
 800257e:	f000 fe24 	bl	80031ca <I2C_WaitOnBTFFlagUntilTimeout>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d00d      	beq.n	80025a4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258c:	2b04      	cmp	r3, #4
 800258e:	d107      	bne.n	80025a0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68fa      	ldr	r2, [r7, #12]
 8002596:	6812      	ldr	r2, [r2, #0]
 8002598:	6812      	ldr	r2, [r2, #0]
 800259a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800259e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e01a      	b.n	80025da <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d194      	bne.n	80024d6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	6812      	ldr	r2, [r2, #0]
 80025b4:	6812      	ldr	r2, [r2, #0]
 80025b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	2220      	movs	r2, #32
 80025c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2200      	movs	r2, #0
 80025d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	e000      	b.n	80025da <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80025d8:	2302      	movs	r3, #2
  }
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3718      	adds	r7, #24
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	00100002 	.word	0x00100002
 80025e8:	ffff0000 	.word	0xffff0000

080025ec <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b08c      	sub	sp, #48	; 0x30
 80025f0:	af02      	add	r7, sp, #8
 80025f2:	60f8      	str	r0, [r7, #12]
 80025f4:	607a      	str	r2, [r7, #4]
 80025f6:	461a      	mov	r2, r3
 80025f8:	460b      	mov	r3, r1
 80025fa:	817b      	strh	r3, [r7, #10]
 80025fc:	4613      	mov	r3, r2
 80025fe:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002600:	2300      	movs	r3, #0
 8002602:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002604:	f7ff fb54 	bl	8001cb0 <HAL_GetTick>
 8002608:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002610:	b2db      	uxtb	r3, r3
 8002612:	2b20      	cmp	r3, #32
 8002614:	f040 8238 	bne.w	8002a88 <HAL_I2C_Master_Receive+0x49c>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	2319      	movs	r3, #25
 800261e:	2201      	movs	r2, #1
 8002620:	497e      	ldr	r1, [pc, #504]	; (800281c <HAL_I2C_Master_Receive+0x230>)
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fcba 	bl	8002f9c <I2C_WaitOnFlagUntilTimeout>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d001      	beq.n	8002632 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 800262e:	2302      	movs	r3, #2
 8002630:	e22b      	b.n	8002a8a <HAL_I2C_Master_Receive+0x49e>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002638:	2b01      	cmp	r3, #1
 800263a:	d101      	bne.n	8002640 <HAL_I2C_Master_Receive+0x54>
 800263c:	2302      	movs	r3, #2
 800263e:	e224      	b.n	8002a8a <HAL_I2C_Master_Receive+0x49e>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2201      	movs	r2, #1
 8002644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b01      	cmp	r3, #1
 8002654:	d007      	beq.n	8002666 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	6812      	ldr	r2, [r2, #0]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	f042 0201 	orr.w	r2, r2, #1
 8002664:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	6812      	ldr	r2, [r2, #0]
 8002670:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002674:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2222      	movs	r2, #34	; 0x22
 800267a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2210      	movs	r2, #16
 8002682:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	2200      	movs	r2, #0
 800268a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	687a      	ldr	r2, [r7, #4]
 8002690:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	893a      	ldrh	r2, [r7, #8]
 8002696:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	4a5e      	ldr	r2, [pc, #376]	; (8002820 <HAL_I2C_Master_Receive+0x234>)
 80026a6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80026a8:	8979      	ldrh	r1, [r7, #10]
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f000 fba6 	bl	8002e00 <I2C_MasterRequestRead>
 80026b4:	4603      	mov	r3, r0
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d001      	beq.n	80026be <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e1e5      	b.n	8002a8a <HAL_I2C_Master_Receive+0x49e>
    }

    if (hi2c->XferSize == 0U)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d113      	bne.n	80026ee <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026c6:	2300      	movs	r3, #0
 80026c8:	61fb      	str	r3, [r7, #28]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	695b      	ldr	r3, [r3, #20]
 80026d0:	61fb      	str	r3, [r7, #28]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	699b      	ldr	r3, [r3, #24]
 80026d8:	61fb      	str	r3, [r7, #28]
 80026da:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	6812      	ldr	r2, [r2, #0]
 80026e4:	6812      	ldr	r2, [r2, #0]
 80026e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	e1b9      	b.n	8002a62 <HAL_I2C_Master_Receive+0x476>
    }
    else if (hi2c->XferSize == 1U)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026f2:	2b01      	cmp	r3, #1
 80026f4:	d11d      	bne.n	8002732 <HAL_I2C_Master_Receive+0x146>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68fa      	ldr	r2, [r7, #12]
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	6812      	ldr	r2, [r2, #0]
 8002700:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002704:	601a      	str	r2, [r3, #0]
 8002706:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002708:	2300      	movs	r3, #0
 800270a:	61bb      	str	r3, [r7, #24]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	695b      	ldr	r3, [r3, #20]
 8002712:	61bb      	str	r3, [r7, #24]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699b      	ldr	r3, [r3, #24]
 800271a:	61bb      	str	r3, [r7, #24]
 800271c:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	68fa      	ldr	r2, [r7, #12]
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	6812      	ldr	r2, [r2, #0]
 8002728:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800272c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800272e:	b662      	cpsie	i
 8002730:	e197      	b.n	8002a62 <HAL_I2C_Master_Receive+0x476>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002736:	2b02      	cmp	r3, #2
 8002738:	d11d      	bne.n	8002776 <HAL_I2C_Master_Receive+0x18a>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	6812      	ldr	r2, [r2, #0]
 8002742:	6812      	ldr	r2, [r2, #0]
 8002744:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002748:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800274a:	b672      	cpsid	i
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	695b      	ldr	r3, [r3, #20]
 8002756:	617b      	str	r3, [r7, #20]
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68fa      	ldr	r2, [r7, #12]
 8002768:	6812      	ldr	r2, [r2, #0]
 800276a:	6812      	ldr	r2, [r2, #0]
 800276c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002770:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002772:	b662      	cpsie	i
 8002774:	e175      	b.n	8002a62 <HAL_I2C_Master_Receive+0x476>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	6812      	ldr	r2, [r2, #0]
 8002780:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002784:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002786:	2300      	movs	r3, #0
 8002788:	613b      	str	r3, [r7, #16]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695b      	ldr	r3, [r3, #20]
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	613b      	str	r3, [r7, #16]
 800279a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800279c:	e161      	b.n	8002a62 <HAL_I2C_Master_Receive+0x476>
    {
      if (hi2c->XferSize <= 3U)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027a2:	2b03      	cmp	r3, #3
 80027a4:	f200 811a 	bhi.w	80029dc <HAL_I2C_Master_Receive+0x3f0>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d123      	bne.n	80027f8 <HAL_I2C_Master_Receive+0x20c>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80027b4:	68f8      	ldr	r0, [r7, #12]
 80027b6:	f000 fd49 	bl	800324c <I2C_WaitOnRXNEFlagUntilTimeout>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d001      	beq.n	80027c4 <HAL_I2C_Master_Receive+0x1d8>
          {
            return HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	e162      	b.n	8002a8a <HAL_I2C_Master_Receive+0x49e>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c8:	68fa      	ldr	r2, [r7, #12]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	6912      	ldr	r2, [r2, #16]
 80027ce:	b2d2      	uxtb	r2, r2
 80027d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e0:	3b01      	subs	r3, #1
 80027e2:	b29a      	uxth	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	3b01      	subs	r3, #1
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80027f6:	e134      	b.n	8002a62 <HAL_I2C_Master_Receive+0x476>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d150      	bne.n	80028a2 <HAL_I2C_Master_Receive+0x2b6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002802:	9300      	str	r3, [sp, #0]
 8002804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002806:	2200      	movs	r2, #0
 8002808:	4906      	ldr	r1, [pc, #24]	; (8002824 <HAL_I2C_Master_Receive+0x238>)
 800280a:	68f8      	ldr	r0, [r7, #12]
 800280c:	f000 fbc6 	bl	8002f9c <I2C_WaitOnFlagUntilTimeout>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d008      	beq.n	8002828 <HAL_I2C_Master_Receive+0x23c>
          {
            return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e137      	b.n	8002a8a <HAL_I2C_Master_Receive+0x49e>
 800281a:	bf00      	nop
 800281c:	00100002 	.word	0x00100002
 8002820:	ffff0000 	.word	0xffff0000
 8002824:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002828:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68fa      	ldr	r2, [r7, #12]
 8002830:	6812      	ldr	r2, [r2, #0]
 8002832:	6812      	ldr	r2, [r2, #0]
 8002834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002838:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	68fa      	ldr	r2, [r7, #12]
 8002840:	6812      	ldr	r2, [r2, #0]
 8002842:	6912      	ldr	r2, [r2, #16]
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002856:	3b01      	subs	r3, #1
 8002858:	b29a      	uxth	r2, r3
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002862:	b29b      	uxth	r3, r3
 8002864:	3b01      	subs	r3, #1
 8002866:	b29a      	uxth	r2, r3
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800286c:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	6912      	ldr	r2, [r2, #16]
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002880:	1c5a      	adds	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800288a:	3b01      	subs	r3, #1
 800288c:	b29a      	uxth	r2, r3
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002896:	b29b      	uxth	r3, r3
 8002898:	3b01      	subs	r3, #1
 800289a:	b29a      	uxth	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028a0:	e0df      	b.n	8002a62 <HAL_I2C_Master_Receive+0x476>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a8:	2200      	movs	r2, #0
 80028aa:	497a      	ldr	r1, [pc, #488]	; (8002a94 <HAL_I2C_Master_Receive+0x4a8>)
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 fb75 	bl	8002f9c <I2C_WaitOnFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_I2C_Master_Receive+0x2d0>
          {
            return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e0e6      	b.n	8002a8a <HAL_I2C_Master_Receive+0x49e>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	68fa      	ldr	r2, [r7, #12]
 80028c2:	6812      	ldr	r2, [r2, #0]
 80028c4:	6812      	ldr	r2, [r2, #0]
 80028c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028ca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80028cc:	b672      	cpsid	i
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	6812      	ldr	r2, [r2, #0]
 80028d6:	6912      	ldr	r2, [r2, #16]
 80028d8:	b2d2      	uxtb	r2, r2
 80028da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	1c5a      	adds	r2, r3, #1
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ea:	3b01      	subs	r3, #1
 80028ec:	b29a      	uxth	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002900:	4b65      	ldr	r3, [pc, #404]	; (8002a98 <HAL_I2C_Master_Receive+0x4ac>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	08db      	lsrs	r3, r3, #3
 8002906:	4a65      	ldr	r2, [pc, #404]	; (8002a9c <HAL_I2C_Master_Receive+0x4b0>)
 8002908:	fba2 2303 	umull	r2, r3, r2, r3
 800290c:	0a1a      	lsrs	r2, r3, #8
 800290e:	4613      	mov	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	4413      	add	r3, r2
 8002914:	00da      	lsls	r2, r3, #3
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	3b01      	subs	r3, #1
 800291e:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d117      	bne.n	8002956 <HAL_I2C_Master_Receive+0x36a>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2200      	movs	r2, #0
 800292a:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	2220      	movs	r2, #32
 8002930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002940:	f043 0220 	orr.w	r2, r3, #32
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002948:	b662      	cpsie	i

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e099      	b.n	8002a8a <HAL_I2C_Master_Receive+0x49e>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	695b      	ldr	r3, [r3, #20]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b04      	cmp	r3, #4
 8002962:	d1da      	bne.n	800291a <HAL_I2C_Master_Receive+0x32e>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	6812      	ldr	r2, [r2, #0]
 800296e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002972:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002978:	68fa      	ldr	r2, [r7, #12]
 800297a:	6812      	ldr	r2, [r2, #0]
 800297c:	6912      	ldr	r2, [r2, #16]
 800297e:	b2d2      	uxtb	r2, r2
 8002980:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002986:	1c5a      	adds	r2, r3, #1
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002990:	3b01      	subs	r3, #1
 8002992:	b29a      	uxth	r2, r3
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800299c:	b29b      	uxth	r3, r3
 800299e:	3b01      	subs	r3, #1
 80029a0:	b29a      	uxth	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029a6:	b662      	cpsie	i

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ac:	68fa      	ldr	r2, [r7, #12]
 80029ae:	6812      	ldr	r2, [r2, #0]
 80029b0:	6912      	ldr	r2, [r2, #16]
 80029b2:	b2d2      	uxtb	r2, r2
 80029b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ba:	1c5a      	adds	r2, r3, #1
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d0:	b29b      	uxth	r3, r3
 80029d2:	3b01      	subs	r3, #1
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029da:	e042      	b.n	8002a62 <HAL_I2C_Master_Receive+0x476>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 fc33 	bl	800324c <I2C_WaitOnRXNEFlagUntilTimeout>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_I2C_Master_Receive+0x404>
        {
          return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e04c      	b.n	8002a8a <HAL_I2C_Master_Receive+0x49e>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	6812      	ldr	r2, [r2, #0]
 80029f8:	6912      	ldr	r2, [r2, #16]
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	1c5a      	adds	r2, r3, #1
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	b29a      	uxth	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a18:	b29b      	uxth	r3, r3
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b04      	cmp	r3, #4
 8002a2e:	d118      	bne.n	8002a62 <HAL_I2C_Master_Receive+0x476>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	6812      	ldr	r2, [r2, #0]
 8002a38:	6912      	ldr	r2, [r2, #16]
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a42:	1c5a      	adds	r2, r3, #1
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	f47f ae99 	bne.w	800279e <HAL_I2C_Master_Receive+0x1b2>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	2220      	movs	r2, #32
 8002a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a84:	2300      	movs	r3, #0
 8002a86:	e000      	b.n	8002a8a <HAL_I2C_Master_Receive+0x49e>
  }
  else
  {
    return HAL_BUSY;
 8002a88:	2302      	movs	r3, #2
  }
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3728      	adds	r7, #40	; 0x28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	00010004 	.word	0x00010004
 8002a98:	20000014 	.word	0x20000014
 8002a9c:	14f8b589 	.word	0x14f8b589

08002aa0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b08a      	sub	sp, #40	; 0x28
 8002aa4:	af02      	add	r7, sp, #8
 8002aa6:	60f8      	str	r0, [r7, #12]
 8002aa8:	607a      	str	r2, [r7, #4]
 8002aaa:	603b      	str	r3, [r7, #0]
 8002aac:	460b      	mov	r3, r1
 8002aae:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002ab0:	f7ff f8fe 	bl	8001cb0 <HAL_GetTick>
 8002ab4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	2b20      	cmp	r3, #32
 8002ac4:	f040 8110 	bne.w	8002ce8 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	9300      	str	r3, [sp, #0]
 8002acc:	2319      	movs	r3, #25
 8002ace:	2201      	movs	r2, #1
 8002ad0:	4988      	ldr	r1, [pc, #544]	; (8002cf4 <HAL_I2C_IsDeviceReady+0x254>)
 8002ad2:	68f8      	ldr	r0, [r7, #12]
 8002ad4:	f000 fa62 	bl	8002f9c <I2C_WaitOnFlagUntilTimeout>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d001      	beq.n	8002ae2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002ade:	2302      	movs	r3, #2
 8002ae0:	e103      	b.n	8002cea <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d101      	bne.n	8002af0 <HAL_I2C_IsDeviceReady+0x50>
 8002aec:	2302      	movs	r3, #2
 8002aee:	e0fc      	b.n	8002cea <HAL_I2C_IsDeviceReady+0x24a>
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2201      	movs	r2, #1
 8002af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d007      	beq.n	8002b16 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	6812      	ldr	r2, [r2, #0]
 8002b0e:	6812      	ldr	r2, [r2, #0]
 8002b10:	f042 0201 	orr.w	r2, r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	6812      	ldr	r2, [r2, #0]
 8002b1e:	6812      	ldr	r2, [r2, #0]
 8002b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b24:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2224      	movs	r2, #36	; 0x24
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2200      	movs	r2, #0
 8002b32:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4a70      	ldr	r2, [pc, #448]	; (8002cf8 <HAL_I2C_IsDeviceReady+0x258>)
 8002b38:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	6812      	ldr	r2, [r2, #0]
 8002b42:	6812      	ldr	r2, [r2, #0]
 8002b44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b48:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002b56:	68f8      	ldr	r0, [r7, #12]
 8002b58:	f000 fa20 	bl	8002f9c <I2C_WaitOnFlagUntilTimeout>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00d      	beq.n	8002b7e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b70:	d103      	bne.n	8002b7a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e0b5      	b.n	8002cea <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	897a      	ldrh	r2, [r7, #10]
 8002b84:	b2d2      	uxtb	r2, r2
 8002b86:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002b8a:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002b8c:	f7ff f890 	bl	8001cb0 <HAL_GetTick>
 8002b90:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	695b      	ldr	r3, [r3, #20]
 8002b98:	f003 0302 	and.w	r3, r3, #2
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	bf0c      	ite	eq
 8002ba0:	2301      	moveq	r3, #1
 8002ba2:	2300      	movne	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	695b      	ldr	r3, [r3, #20]
 8002bae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bb6:	bf0c      	ite	eq
 8002bb8:	2301      	moveq	r3, #1
 8002bba:	2300      	movne	r3, #0
 8002bbc:	b2db      	uxtb	r3, r3
 8002bbe:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002bc0:	e025      	b.n	8002c0e <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002bc2:	f7ff f875 	bl	8001cb0 <HAL_GetTick>
 8002bc6:	4602      	mov	r2, r0
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	1ad2      	subs	r2, r2, r3
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d802      	bhi.n	8002bd8 <HAL_I2C_IsDeviceReady+0x138>
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d103      	bne.n	8002be0 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	22a0      	movs	r2, #160	; 0xa0
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	f003 0302 	and.w	r3, r3, #2
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	bf0c      	ite	eq
 8002bee:	2301      	moveq	r3, #1
 8002bf0:	2300      	movne	r3, #0
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c04:	bf0c      	ite	eq
 8002c06:	2301      	moveq	r3, #1
 8002c08:	2300      	movne	r3, #0
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2ba0      	cmp	r3, #160	; 0xa0
 8002c18:	d005      	beq.n	8002c26 <HAL_I2C_IsDeviceReady+0x186>
 8002c1a:	7dfb      	ldrb	r3, [r7, #23]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d102      	bne.n	8002c26 <HAL_I2C_IsDeviceReady+0x186>
 8002c20:	7dbb      	ldrb	r3, [r7, #22]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d0cd      	beq.n	8002bc2 <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d129      	bne.n	8002c90 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	68fa      	ldr	r2, [r7, #12]
 8002c42:	6812      	ldr	r2, [r2, #0]
 8002c44:	6812      	ldr	r2, [r2, #0]
 8002c46:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c4a:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	695b      	ldr	r3, [r3, #20]
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	613b      	str	r3, [r7, #16]
 8002c60:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	2319      	movs	r3, #25
 8002c68:	2201      	movs	r2, #1
 8002c6a:	4922      	ldr	r1, [pc, #136]	; (8002cf4 <HAL_I2C_IsDeviceReady+0x254>)
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f995 	bl	8002f9c <I2C_WaitOnFlagUntilTimeout>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e036      	b.n	8002cea <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2220      	movs	r2, #32
 8002c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	e02c      	b.n	8002cea <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68fa      	ldr	r2, [r7, #12]
 8002c96:	6812      	ldr	r2, [r2, #0]
 8002c98:	6812      	ldr	r2, [r2, #0]
 8002c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9e:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ca8:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	2319      	movs	r3, #25
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	4910      	ldr	r1, [pc, #64]	; (8002cf4 <HAL_I2C_IsDeviceReady+0x254>)
 8002cb4:	68f8      	ldr	r0, [r7, #12]
 8002cb6:	f000 f971 	bl	8002f9c <I2C_WaitOnFlagUntilTimeout>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e012      	b.n	8002cea <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002cc4:	69bb      	ldr	r3, [r7, #24]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002cca:	69ba      	ldr	r2, [r7, #24]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	f4ff af33 	bcc.w	8002b3a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8002ce8:	2302      	movs	r3, #2
  }
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	00100002 	.word	0x00100002
 8002cf8:	ffff0000 	.word	0xffff0000

08002cfc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b088      	sub	sp, #32
 8002d00:	af02      	add	r7, sp, #8
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	603b      	str	r3, [r7, #0]
 8002d08:	460b      	mov	r3, r1
 8002d0a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d006      	beq.n	8002d26 <I2C_MasterRequestWrite+0x2a>
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d003      	beq.n	8002d26 <I2C_MasterRequestWrite+0x2a>
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d24:	d108      	bne.n	8002d38 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	6812      	ldr	r2, [r2, #0]
 8002d2e:	6812      	ldr	r2, [r2, #0]
 8002d30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d34:	601a      	str	r2, [r3, #0]
 8002d36:	e00b      	b.n	8002d50 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3c:	2b12      	cmp	r3, #18
 8002d3e:	d107      	bne.n	8002d50 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	68fa      	ldr	r2, [r7, #12]
 8002d46:	6812      	ldr	r2, [r2, #0]
 8002d48:	6812      	ldr	r2, [r2, #0]
 8002d4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d4e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	9300      	str	r3, [sp, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d5c:	68f8      	ldr	r0, [r7, #12]
 8002d5e:	f000 f91d 	bl	8002f9c <I2C_WaitOnFlagUntilTimeout>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d00d      	beq.n	8002d84 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d76:	d103      	bne.n	8002d80 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d7e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e034      	b.n	8002dee <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002d8c:	d107      	bne.n	8002d9e <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	897a      	ldrh	r2, [r7, #10]
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002d9a:	611a      	str	r2, [r3, #16]
 8002d9c:	e01b      	b.n	8002dd6 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	897a      	ldrh	r2, [r7, #10]
 8002da4:	11d2      	asrs	r2, r2, #7
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	f002 0206 	and.w	r2, r2, #6
 8002dac:	b2d2      	uxtb	r2, r2
 8002dae:	f062 020f 	orn	r2, r2, #15
 8002db2:	b2d2      	uxtb	r2, r2
 8002db4:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	490f      	ldr	r1, [pc, #60]	; (8002df8 <I2C_MasterRequestWrite+0xfc>)
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f944 	bl	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 8002dc8:	2301      	movs	r3, #1
 8002dca:	e010      	b.n	8002dee <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	897a      	ldrh	r2, [r7, #10]
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	4908      	ldr	r1, [pc, #32]	; (8002dfc <I2C_MasterRequestWrite+0x100>)
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f000 f934 	bl	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	e000      	b.n	8002dee <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	00010008 	.word	0x00010008
 8002dfc:	00010002 	.word	0x00010002

08002e00 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	607a      	str	r2, [r7, #4]
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e14:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	6812      	ldr	r2, [r2, #0]
 8002e1e:	6812      	ldr	r2, [r2, #0]
 8002e20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002e24:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d006      	beq.n	8002e3a <I2C_MasterRequestRead+0x3a>
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	2b01      	cmp	r3, #1
 8002e30:	d003      	beq.n	8002e3a <I2C_MasterRequestRead+0x3a>
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e38:	d108      	bne.n	8002e4c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	68fa      	ldr	r2, [r7, #12]
 8002e40:	6812      	ldr	r2, [r2, #0]
 8002e42:	6812      	ldr	r2, [r2, #0]
 8002e44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	e00b      	b.n	8002e64 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e50:	2b11      	cmp	r3, #17
 8002e52:	d107      	bne.n	8002e64 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	6812      	ldr	r2, [r2, #0]
 8002e5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e62:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e70:	68f8      	ldr	r0, [r7, #12]
 8002e72:	f000 f893 	bl	8002f9c <I2C_WaitOnFlagUntilTimeout>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00d      	beq.n	8002e98 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e8a:	d103      	bne.n	8002e94 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e92:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e079      	b.n	8002f8c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ea0:	d108      	bne.n	8002eb4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	897a      	ldrh	r2, [r7, #10]
 8002ea8:	b2d2      	uxtb	r2, r2
 8002eaa:	f042 0201 	orr.w	r2, r2, #1
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	611a      	str	r2, [r3, #16]
 8002eb2:	e05f      	b.n	8002f74 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	897a      	ldrh	r2, [r7, #10]
 8002eba:	11d2      	asrs	r2, r2, #7
 8002ebc:	b2d2      	uxtb	r2, r2
 8002ebe:	f002 0206 	and.w	r2, r2, #6
 8002ec2:	b2d2      	uxtb	r2, r2
 8002ec4:	f062 020f 	orn	r2, r2, #15
 8002ec8:	b2d2      	uxtb	r2, r2
 8002eca:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	4930      	ldr	r1, [pc, #192]	; (8002f94 <I2C_MasterRequestRead+0x194>)
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f8b9 	bl	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e054      	b.n	8002f8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	897a      	ldrh	r2, [r7, #10]
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	687a      	ldr	r2, [r7, #4]
 8002ef0:	4929      	ldr	r1, [pc, #164]	; (8002f98 <I2C_MasterRequestRead+0x198>)
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f8a9 	bl	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d001      	beq.n	8002f02 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e044      	b.n	8002f8c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f02:	2300      	movs	r3, #0
 8002f04:	613b      	str	r3, [r7, #16]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	613b      	str	r3, [r7, #16]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	6812      	ldr	r2, [r2, #0]
 8002f20:	6812      	ldr	r2, [r2, #0]
 8002f22:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f26:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	9300      	str	r3, [sp, #0]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f34:	68f8      	ldr	r0, [r7, #12]
 8002f36:	f000 f831 	bl	8002f9c <I2C_WaitOnFlagUntilTimeout>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00d      	beq.n	8002f5c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f4e:	d103      	bne.n	8002f58 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f56:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e017      	b.n	8002f8c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	897a      	ldrh	r2, [r7, #10]
 8002f62:	11d2      	asrs	r2, r2, #7
 8002f64:	b2d2      	uxtb	r2, r2
 8002f66:	f002 0206 	and.w	r2, r2, #6
 8002f6a:	b2d2      	uxtb	r2, r2
 8002f6c:	f062 020e 	orn	r2, r2, #14
 8002f70:	b2d2      	uxtb	r2, r2
 8002f72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	4907      	ldr	r1, [pc, #28]	; (8002f98 <I2C_MasterRequestRead+0x198>)
 8002f7a:	68f8      	ldr	r0, [r7, #12]
 8002f7c:	f000 f865 	bl	800304a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f80:	4603      	mov	r3, r0
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e000      	b.n	8002f8c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8002f8a:	2300      	movs	r3, #0
}
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	3718      	adds	r7, #24
 8002f90:	46bd      	mov	sp, r7
 8002f92:	bd80      	pop	{r7, pc}
 8002f94:	00010008 	.word	0x00010008
 8002f98:	00010002 	.word	0x00010002

08002f9c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b084      	sub	sp, #16
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	603b      	str	r3, [r7, #0]
 8002fa8:	4613      	mov	r3, r2
 8002faa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fac:	e025      	b.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb4:	d021      	beq.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb6:	f7fe fe7b 	bl	8001cb0 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	1ad2      	subs	r2, r2, r3
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d802      	bhi.n	8002fcc <I2C_WaitOnFlagUntilTimeout+0x30>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d116      	bne.n	8002ffa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2220      	movs	r2, #32
 8002fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f043 0220 	orr.w	r2, r3, #32
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e023      	b.n	8003042 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	0c1b      	lsrs	r3, r3, #16
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b01      	cmp	r3, #1
 8003002:	d10d      	bne.n	8003020 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	43da      	mvns	r2, r3
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	4013      	ands	r3, r2
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	bf0c      	ite	eq
 8003016:	2301      	moveq	r3, #1
 8003018:	2300      	movne	r3, #0
 800301a:	b2db      	uxtb	r3, r3
 800301c:	461a      	mov	r2, r3
 800301e:	e00c      	b.n	800303a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	43da      	mvns	r2, r3
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4013      	ands	r3, r2
 800302c:	b29b      	uxth	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	bf0c      	ite	eq
 8003032:	2301      	moveq	r3, #1
 8003034:	2300      	movne	r3, #0
 8003036:	b2db      	uxtb	r3, r3
 8003038:	461a      	mov	r2, r3
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	429a      	cmp	r2, r3
 800303e:	d0b6      	beq.n	8002fae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b084      	sub	sp, #16
 800304e:	af00      	add	r7, sp, #0
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
 8003056:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003058:	e051      	b.n	80030fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	695b      	ldr	r3, [r3, #20]
 8003060:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003064:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003068:	d123      	bne.n	80030b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	6812      	ldr	r2, [r2, #0]
 8003072:	6812      	ldr	r2, [r2, #0]
 8003074:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003078:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003082:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2220      	movs	r2, #32
 800308e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f043 0204 	orr.w	r2, r3, #4
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2200      	movs	r2, #0
 80030aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e046      	b.n	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d021      	beq.n	80030fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ba:	f7fe fdf9 	bl	8001cb0 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	1ad2      	subs	r2, r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d802      	bhi.n	80030d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d116      	bne.n	80030fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2200      	movs	r2, #0
 80030d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2220      	movs	r2, #32
 80030da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ea:	f043 0220 	orr.w	r2, r3, #32
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2200      	movs	r2, #0
 80030f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e020      	b.n	8003140 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	0c1b      	lsrs	r3, r3, #16
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2b01      	cmp	r3, #1
 8003106:	d10c      	bne.n	8003122 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	43da      	mvns	r2, r3
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4013      	ands	r3, r2
 8003114:	b29b      	uxth	r3, r3
 8003116:	2b00      	cmp	r3, #0
 8003118:	bf14      	ite	ne
 800311a:	2301      	movne	r3, #1
 800311c:	2300      	moveq	r3, #0
 800311e:	b2db      	uxtb	r3, r3
 8003120:	e00b      	b.n	800313a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	699b      	ldr	r3, [r3, #24]
 8003128:	43da      	mvns	r2, r3
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	4013      	ands	r3, r2
 800312e:	b29b      	uxth	r3, r3
 8003130:	2b00      	cmp	r3, #0
 8003132:	bf14      	ite	ne
 8003134:	2301      	movne	r3, #1
 8003136:	2300      	moveq	r3, #0
 8003138:	b2db      	uxtb	r3, r3
 800313a:	2b00      	cmp	r3, #0
 800313c:	d18d      	bne.n	800305a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800313e:	2300      	movs	r3, #0
}
 8003140:	4618      	mov	r0, r3
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	60f8      	str	r0, [r7, #12]
 8003150:	60b9      	str	r1, [r7, #8]
 8003152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003154:	e02d      	b.n	80031b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003156:	68f8      	ldr	r0, [r7, #12]
 8003158:	f000 f8ce 	bl	80032f8 <I2C_IsAcknowledgeFailed>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e02d      	b.n	80031c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316c:	d021      	beq.n	80031b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800316e:	f7fe fd9f 	bl	8001cb0 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	1ad2      	subs	r2, r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	429a      	cmp	r2, r3
 800317c:	d802      	bhi.n	8003184 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d116      	bne.n	80031b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2200      	movs	r2, #0
 8003188:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2220      	movs	r2, #32
 800318e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	f043 0220 	orr.w	r2, r3, #32
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e007      	b.n	80031c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031bc:	2b80      	cmp	r3, #128	; 0x80
 80031be:	d1ca      	bne.n	8003156 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}

080031ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031ca:	b580      	push	{r7, lr}
 80031cc:	b084      	sub	sp, #16
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	60f8      	str	r0, [r7, #12]
 80031d2:	60b9      	str	r1, [r7, #8]
 80031d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031d6:	e02d      	b.n	8003234 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f88d 	bl	80032f8 <I2C_IsAcknowledgeFailed>
 80031de:	4603      	mov	r3, r0
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	e02d      	b.n	8003244 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ee:	d021      	beq.n	8003234 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80031f0:	f7fe fd5e 	bl	8001cb0 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	1ad2      	subs	r2, r2, r3
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d802      	bhi.n	8003206 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d116      	bne.n	8003234 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	2200      	movs	r2, #0
 800320a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f043 0220 	orr.w	r2, r3, #32
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e007      	b.n	8003244 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	f003 0304 	and.w	r3, r3, #4
 800323e:	2b04      	cmp	r3, #4
 8003240:	d1ca      	bne.n	80031d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003242:	2300      	movs	r3, #0
}
 8003244:	4618      	mov	r0, r3
 8003246:	3710      	adds	r7, #16
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003258:	e042      	b.n	80032e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b10      	cmp	r3, #16
 8003266:	d119      	bne.n	800329c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f06f 0210 	mvn.w	r2, #16
 8003270:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e029      	b.n	80032f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800329c:	f7fe fd08 	bl	8001cb0 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	1ad2      	subs	r2, r2, r3
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d802      	bhi.n	80032b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d116      	bne.n	80032e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2220      	movs	r2, #32
 80032bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032cc:	f043 0220 	orr.w	r2, r3, #32
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2200      	movs	r2, #0
 80032d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e007      	b.n	80032f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	695b      	ldr	r3, [r3, #20]
 80032e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ea:	2b40      	cmp	r3, #64	; 0x40
 80032ec:	d1b5      	bne.n	800325a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	695b      	ldr	r3, [r3, #20]
 8003306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800330a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330e:	d11b      	bne.n	8003348 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003318:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2220      	movs	r2, #32
 8003324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2200      	movs	r2, #0
 800332c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003334:	f043 0204 	orr.w	r2, r3, #4
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2200      	movs	r2, #0
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e000      	b.n	800334a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003348:	2300      	movs	r3, #0
}
 800334a:	4618      	mov	r0, r3
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	bc80      	pop	{r7}
 8003352:	4770      	bx	lr

08003354 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003354:	b580      	push	{r7, lr}
 8003356:	b086      	sub	sp, #24
 8003358:	af00      	add	r7, sp, #0
 800335a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e26c      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0301 	and.w	r3, r3, #1
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 8087 	beq.w	8003482 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003374:	4b92      	ldr	r3, [pc, #584]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b04      	cmp	r3, #4
 800337e:	d00c      	beq.n	800339a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003380:	4b8f      	ldr	r3, [pc, #572]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f003 030c 	and.w	r3, r3, #12
 8003388:	2b08      	cmp	r3, #8
 800338a:	d112      	bne.n	80033b2 <HAL_RCC_OscConfig+0x5e>
 800338c:	4b8c      	ldr	r3, [pc, #560]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003398:	d10b      	bne.n	80033b2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800339a:	4b89      	ldr	r3, [pc, #548]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d06c      	beq.n	8003480 <HAL_RCC_OscConfig+0x12c>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d168      	bne.n	8003480 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e246      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ba:	d106      	bne.n	80033ca <HAL_RCC_OscConfig+0x76>
 80033bc:	4a80      	ldr	r2, [pc, #512]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033be:	4b80      	ldr	r3, [pc, #512]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	e02e      	b.n	8003428 <HAL_RCC_OscConfig+0xd4>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0x98>
 80033d2:	4a7b      	ldr	r2, [pc, #492]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	4b7a      	ldr	r3, [pc, #488]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4a78      	ldr	r2, [pc, #480]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033e0:	4b77      	ldr	r3, [pc, #476]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e01d      	b.n	8003428 <HAL_RCC_OscConfig+0xd4>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f4:	d10c      	bne.n	8003410 <HAL_RCC_OscConfig+0xbc>
 80033f6:	4a72      	ldr	r2, [pc, #456]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	4b71      	ldr	r3, [pc, #452]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	4a6f      	ldr	r2, [pc, #444]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003404:	4b6e      	ldr	r3, [pc, #440]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800340c:	6013      	str	r3, [r2, #0]
 800340e:	e00b      	b.n	8003428 <HAL_RCC_OscConfig+0xd4>
 8003410:	4a6b      	ldr	r2, [pc, #428]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003412:	4b6b      	ldr	r3, [pc, #428]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800341a:	6013      	str	r3, [r2, #0]
 800341c:	4a68      	ldr	r2, [pc, #416]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800341e:	4b68      	ldr	r3, [pc, #416]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003426:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d013      	beq.n	8003458 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003430:	f7fe fc3e 	bl	8001cb0 <HAL_GetTick>
 8003434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	e008      	b.n	800344a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003438:	f7fe fc3a 	bl	8001cb0 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	2b64      	cmp	r3, #100	; 0x64
 8003444:	d901      	bls.n	800344a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003446:	2303      	movs	r3, #3
 8003448:	e1fa      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344a:	4b5d      	ldr	r3, [pc, #372]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0f0      	beq.n	8003438 <HAL_RCC_OscConfig+0xe4>
 8003456:	e014      	b.n	8003482 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003458:	f7fe fc2a 	bl	8001cb0 <HAL_GetTick>
 800345c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003460:	f7fe fc26 	bl	8001cb0 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	; 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e1e6      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003472:	4b53      	ldr	r3, [pc, #332]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1f0      	bne.n	8003460 <HAL_RCC_OscConfig+0x10c>
 800347e:	e000      	b.n	8003482 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d063      	beq.n	8003556 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800348e:	4b4c      	ldr	r3, [pc, #304]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00b      	beq.n	80034b2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800349a:	4b49      	ldr	r3, [pc, #292]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b08      	cmp	r3, #8
 80034a4:	d11c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x18c>
 80034a6:	4b46      	ldr	r3, [pc, #280]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d116      	bne.n	80034e0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034b2:	4b43      	ldr	r3, [pc, #268]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <HAL_RCC_OscConfig+0x176>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	691b      	ldr	r3, [r3, #16]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d001      	beq.n	80034ca <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e1ba      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034ca:	493d      	ldr	r1, [pc, #244]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034cc:	4b3c      	ldr	r3, [pc, #240]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	695b      	ldr	r3, [r3, #20]
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4313      	orrs	r3, r2
 80034dc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034de:	e03a      	b.n	8003556 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d020      	beq.n	800352a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034e8:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 80034ea:	2201      	movs	r2, #1
 80034ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ee:	f7fe fbdf 	bl	8001cb0 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034f6:	f7fe fbdb 	bl	8001cb0 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e19b      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003508:	4b2d      	ldr	r3, [pc, #180]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0f0      	beq.n	80034f6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003514:	492a      	ldr	r1, [pc, #168]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003516:	4b2a      	ldr	r3, [pc, #168]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	00db      	lsls	r3, r3, #3
 8003524:	4313      	orrs	r3, r2
 8003526:	600b      	str	r3, [r1, #0]
 8003528:	e015      	b.n	8003556 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800352a:	4b26      	ldr	r3, [pc, #152]	; (80035c4 <HAL_RCC_OscConfig+0x270>)
 800352c:	2200      	movs	r2, #0
 800352e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003530:	f7fe fbbe 	bl	8001cb0 <HAL_GetTick>
 8003534:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	e008      	b.n	800354a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003538:	f7fe fbba 	bl	8001cb0 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	1ad3      	subs	r3, r2, r3
 8003542:	2b02      	cmp	r3, #2
 8003544:	d901      	bls.n	800354a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003546:	2303      	movs	r3, #3
 8003548:	e17a      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800354a:	4b1d      	ldr	r3, [pc, #116]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d1f0      	bne.n	8003538 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f003 0308 	and.w	r3, r3, #8
 800355e:	2b00      	cmp	r3, #0
 8003560:	d03a      	beq.n	80035d8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	699b      	ldr	r3, [r3, #24]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d019      	beq.n	800359e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800356a:	4b17      	ldr	r3, [pc, #92]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003570:	f7fe fb9e 	bl	8001cb0 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003576:	e008      	b.n	800358a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003578:	f7fe fb9a 	bl	8001cb0 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e15a      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800358a:	4b0d      	ldr	r3, [pc, #52]	; (80035c0 <HAL_RCC_OscConfig+0x26c>)
 800358c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358e:	f003 0302 	and.w	r3, r3, #2
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003596:	2001      	movs	r0, #1
 8003598:	f000 fada 	bl	8003b50 <RCC_Delay>
 800359c:	e01c      	b.n	80035d8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800359e:	4b0a      	ldr	r3, [pc, #40]	; (80035c8 <HAL_RCC_OscConfig+0x274>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035a4:	f7fe fb84 	bl	8001cb0 <HAL_GetTick>
 80035a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035aa:	e00f      	b.n	80035cc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ac:	f7fe fb80 	bl	8001cb0 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d908      	bls.n	80035cc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e140      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
 80035be:	bf00      	nop
 80035c0:	40021000 	.word	0x40021000
 80035c4:	42420000 	.word	0x42420000
 80035c8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035cc:	4b9e      	ldr	r3, [pc, #632]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1e9      	bne.n	80035ac <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f000 80a6 	beq.w	8003732 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035e6:	2300      	movs	r3, #0
 80035e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ea:	4b97      	ldr	r3, [pc, #604]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d10d      	bne.n	8003612 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035f6:	4a94      	ldr	r2, [pc, #592]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80035f8:	4b93      	ldr	r3, [pc, #588]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80035fa:	69db      	ldr	r3, [r3, #28]
 80035fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003600:	61d3      	str	r3, [r2, #28]
 8003602:	4b91      	ldr	r3, [pc, #580]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003604:	69db      	ldr	r3, [r3, #28]
 8003606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800360a:	60bb      	str	r3, [r7, #8]
 800360c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800360e:	2301      	movs	r3, #1
 8003610:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003612:	4b8e      	ldr	r3, [pc, #568]	; (800384c <HAL_RCC_OscConfig+0x4f8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800361a:	2b00      	cmp	r3, #0
 800361c:	d118      	bne.n	8003650 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800361e:	4a8b      	ldr	r2, [pc, #556]	; (800384c <HAL_RCC_OscConfig+0x4f8>)
 8003620:	4b8a      	ldr	r3, [pc, #552]	; (800384c <HAL_RCC_OscConfig+0x4f8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003628:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800362a:	f7fe fb41 	bl	8001cb0 <HAL_GetTick>
 800362e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003632:	f7fe fb3d 	bl	8001cb0 <HAL_GetTick>
 8003636:	4602      	mov	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b64      	cmp	r3, #100	; 0x64
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e0fd      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003644:	4b81      	ldr	r3, [pc, #516]	; (800384c <HAL_RCC_OscConfig+0x4f8>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800364c:	2b00      	cmp	r3, #0
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d106      	bne.n	8003666 <HAL_RCC_OscConfig+0x312>
 8003658:	4a7b      	ldr	r2, [pc, #492]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800365a:	4b7b      	ldr	r3, [pc, #492]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	f043 0301 	orr.w	r3, r3, #1
 8003662:	6213      	str	r3, [r2, #32]
 8003664:	e02d      	b.n	80036c2 <HAL_RCC_OscConfig+0x36e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10c      	bne.n	8003688 <HAL_RCC_OscConfig+0x334>
 800366e:	4a76      	ldr	r2, [pc, #472]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003670:	4b75      	ldr	r3, [pc, #468]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	6213      	str	r3, [r2, #32]
 800367a:	4a73      	ldr	r2, [pc, #460]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800367c:	4b72      	ldr	r3, [pc, #456]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	f023 0304 	bic.w	r3, r3, #4
 8003684:	6213      	str	r3, [r2, #32]
 8003686:	e01c      	b.n	80036c2 <HAL_RCC_OscConfig+0x36e>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	2b05      	cmp	r3, #5
 800368e:	d10c      	bne.n	80036aa <HAL_RCC_OscConfig+0x356>
 8003690:	4a6d      	ldr	r2, [pc, #436]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003692:	4b6d      	ldr	r3, [pc, #436]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	f043 0304 	orr.w	r3, r3, #4
 800369a:	6213      	str	r3, [r2, #32]
 800369c:	4a6a      	ldr	r2, [pc, #424]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800369e:	4b6a      	ldr	r3, [pc, #424]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	f043 0301 	orr.w	r3, r3, #1
 80036a6:	6213      	str	r3, [r2, #32]
 80036a8:	e00b      	b.n	80036c2 <HAL_RCC_OscConfig+0x36e>
 80036aa:	4a67      	ldr	r2, [pc, #412]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80036ac:	4b66      	ldr	r3, [pc, #408]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f023 0301 	bic.w	r3, r3, #1
 80036b4:	6213      	str	r3, [r2, #32]
 80036b6:	4a64      	ldr	r2, [pc, #400]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80036b8:	4b63      	ldr	r3, [pc, #396]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	f023 0304 	bic.w	r3, r3, #4
 80036c0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d015      	beq.n	80036f6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ca:	f7fe faf1 	bl	8001cb0 <HAL_GetTick>
 80036ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d0:	e00a      	b.n	80036e8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036d2:	f7fe faed 	bl	8001cb0 <HAL_GetTick>
 80036d6:	4602      	mov	r2, r0
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	1ad3      	subs	r3, r2, r3
 80036dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d901      	bls.n	80036e8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036e4:	2303      	movs	r3, #3
 80036e6:	e0ab      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e8:	4b57      	ldr	r3, [pc, #348]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d0ee      	beq.n	80036d2 <HAL_RCC_OscConfig+0x37e>
 80036f4:	e014      	b.n	8003720 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036f6:	f7fe fadb 	bl	8001cb0 <HAL_GetTick>
 80036fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036fc:	e00a      	b.n	8003714 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fe:	f7fe fad7 	bl	8001cb0 <HAL_GetTick>
 8003702:	4602      	mov	r2, r0
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	1ad3      	subs	r3, r2, r3
 8003708:	f241 3288 	movw	r2, #5000	; 0x1388
 800370c:	4293      	cmp	r3, r2
 800370e:	d901      	bls.n	8003714 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003710:	2303      	movs	r3, #3
 8003712:	e095      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003714:	4b4c      	ldr	r3, [pc, #304]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1ee      	bne.n	80036fe <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003720:	7dfb      	ldrb	r3, [r7, #23]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d105      	bne.n	8003732 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003726:	4a48      	ldr	r2, [pc, #288]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003728:	4b47      	ldr	r3, [pc, #284]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800372a:	69db      	ldr	r3, [r3, #28]
 800372c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003730:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8081 	beq.w	800383e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800373c:	4b42      	ldr	r3, [pc, #264]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	f003 030c 	and.w	r3, r3, #12
 8003744:	2b08      	cmp	r3, #8
 8003746:	d061      	beq.n	800380c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	2b02      	cmp	r3, #2
 800374e:	d146      	bne.n	80037de <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003750:	4b3f      	ldr	r3, [pc, #252]	; (8003850 <HAL_RCC_OscConfig+0x4fc>)
 8003752:	2200      	movs	r2, #0
 8003754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003756:	f7fe faab 	bl	8001cb0 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800375e:	f7fe faa7 	bl	8001cb0 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e067      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003770:	4b35      	ldr	r3, [pc, #212]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003778:	2b00      	cmp	r3, #0
 800377a:	d1f0      	bne.n	800375e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003784:	d108      	bne.n	8003798 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003786:	4930      	ldr	r1, [pc, #192]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003788:	4b2f      	ldr	r3, [pc, #188]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4313      	orrs	r3, r2
 8003796:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003798:	482b      	ldr	r0, [pc, #172]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800379a:	4b2b      	ldr	r3, [pc, #172]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a19      	ldr	r1, [r3, #32]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037aa:	430b      	orrs	r3, r1
 80037ac:	4313      	orrs	r3, r2
 80037ae:	6043      	str	r3, [r0, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037b0:	4b27      	ldr	r3, [pc, #156]	; (8003850 <HAL_RCC_OscConfig+0x4fc>)
 80037b2:	2201      	movs	r2, #1
 80037b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b6:	f7fe fa7b 	bl	8001cb0 <HAL_GetTick>
 80037ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037bc:	e008      	b.n	80037d0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037be:	f7fe fa77 	bl	8001cb0 <HAL_GetTick>
 80037c2:	4602      	mov	r2, r0
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	1ad3      	subs	r3, r2, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d901      	bls.n	80037d0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037cc:	2303      	movs	r3, #3
 80037ce:	e037      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037d0:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d0f0      	beq.n	80037be <HAL_RCC_OscConfig+0x46a>
 80037dc:	e02f      	b.n	800383e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037de:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <HAL_RCC_OscConfig+0x4fc>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e4:	f7fe fa64 	bl	8001cb0 <HAL_GetTick>
 80037e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ea:	e008      	b.n	80037fe <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037ec:	f7fe fa60 	bl	8001cb0 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	2b02      	cmp	r3, #2
 80037f8:	d901      	bls.n	80037fe <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037fa:	2303      	movs	r3, #3
 80037fc:	e020      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037fe:	4b12      	ldr	r3, [pc, #72]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1f0      	bne.n	80037ec <HAL_RCC_OscConfig+0x498>
 800380a:	e018      	b.n	800383e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	69db      	ldr	r3, [r3, #28]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e013      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCC_OscConfig+0x4f4>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	429a      	cmp	r2, r3
 800382a:	d106      	bne.n	800383a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003836:	429a      	cmp	r2, r3
 8003838:	d001      	beq.n	800383e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000
 800384c:	40007000 	.word	0x40007000
 8003850:	42420060 	.word	0x42420060

08003854 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e0d0      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003868:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0207 	and.w	r2, r3, #7
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d210      	bcs.n	8003898 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4967      	ldr	r1, [pc, #412]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003878:	4b66      	ldr	r3, [pc, #408]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f023 0207 	bic.w	r2, r3, #7
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	4313      	orrs	r3, r2
 8003884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003886:	4b63      	ldr	r3, [pc, #396]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0207 	and.w	r2, r3, #7
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d001      	beq.n	8003898 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e0b8      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d020      	beq.n	80038e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d005      	beq.n	80038bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038b0:	4a59      	ldr	r2, [pc, #356]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038b2:	4b59      	ldr	r3, [pc, #356]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0308 	and.w	r3, r3, #8
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c8:	4a53      	ldr	r2, [pc, #332]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038ca:	4b53      	ldr	r3, [pc, #332]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038cc:	685b      	ldr	r3, [r3, #4]
 80038ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038d4:	4950      	ldr	r1, [pc, #320]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038d6:	4b50      	ldr	r3, [pc, #320]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d040      	beq.n	8003974 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b01      	cmp	r3, #1
 80038f8:	d107      	bne.n	800390a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038fa:	4b47      	ldr	r3, [pc, #284]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d115      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e07f      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b02      	cmp	r3, #2
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003912:	4b41      	ldr	r3, [pc, #260]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d109      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e073      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003922:	4b3d      	ldr	r3, [pc, #244]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 0302 	and.w	r3, r3, #2
 800392a:	2b00      	cmp	r3, #0
 800392c:	d101      	bne.n	8003932 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e06b      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003932:	4939      	ldr	r1, [pc, #228]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003934:	4b38      	ldr	r3, [pc, #224]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	f023 0203 	bic.w	r2, r3, #3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	4313      	orrs	r3, r2
 8003942:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003944:	f7fe f9b4 	bl	8001cb0 <HAL_GetTick>
 8003948:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800394a:	e00a      	b.n	8003962 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800394c:	f7fe f9b0 	bl	8001cb0 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	f241 3288 	movw	r2, #5000	; 0x1388
 800395a:	4293      	cmp	r3, r2
 800395c:	d901      	bls.n	8003962 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e053      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	4b2d      	ldr	r3, [pc, #180]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 020c 	and.w	r2, r3, #12
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	429a      	cmp	r2, r3
 8003972:	d1eb      	bne.n	800394c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003974:	4b27      	ldr	r3, [pc, #156]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0207 	and.w	r2, r3, #7
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	429a      	cmp	r2, r3
 8003980:	d910      	bls.n	80039a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003982:	4924      	ldr	r1, [pc, #144]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003984:	4b23      	ldr	r3, [pc, #140]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f023 0207 	bic.w	r2, r3, #7
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	4313      	orrs	r3, r2
 8003990:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003992:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <HAL_RCC_ClockConfig+0x1c0>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0207 	and.w	r2, r3, #7
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	429a      	cmp	r2, r3
 800399e:	d001      	beq.n	80039a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80039a0:	2301      	movs	r3, #1
 80039a2:	e032      	b.n	8003a0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039b0:	4919      	ldr	r1, [pc, #100]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	4b19      	ldr	r3, [pc, #100]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ce:	4912      	ldr	r1, [pc, #72]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039d0:	4b11      	ldr	r3, [pc, #68]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	691b      	ldr	r3, [r3, #16]
 80039dc:	00db      	lsls	r3, r3, #3
 80039de:	4313      	orrs	r3, r2
 80039e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039e2:	f000 f821 	bl	8003a28 <HAL_RCC_GetSysClockFreq>
 80039e6:	4601      	mov	r1, r0
 80039e8:	4b0b      	ldr	r3, [pc, #44]	; (8003a18 <HAL_RCC_ClockConfig+0x1c4>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	091b      	lsrs	r3, r3, #4
 80039ee:	f003 030f 	and.w	r3, r3, #15
 80039f2:	4a0a      	ldr	r2, [pc, #40]	; (8003a1c <HAL_RCC_ClockConfig+0x1c8>)
 80039f4:	5cd3      	ldrb	r3, [r2, r3]
 80039f6:	fa21 f303 	lsr.w	r3, r1, r3
 80039fa:	4a09      	ldr	r2, [pc, #36]	; (8003a20 <HAL_RCC_ClockConfig+0x1cc>)
 80039fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039fe:	4b09      	ldr	r3, [pc, #36]	; (8003a24 <HAL_RCC_ClockConfig+0x1d0>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4618      	mov	r0, r3
 8003a04:	f7fe f912 	bl	8001c2c <HAL_InitTick>

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3710      	adds	r7, #16
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40022000 	.word	0x40022000
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	08007208 	.word	0x08007208
 8003a20:	20000014 	.word	0x20000014
 8003a24:	20000018 	.word	0x20000018

08003a28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a28:	b490      	push	{r4, r7}
 8003a2a:	b08a      	sub	sp, #40	; 0x28
 8003a2c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a2e:	4b2a      	ldr	r3, [pc, #168]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a30:	1d3c      	adds	r4, r7, #4
 8003a32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a38:	4b28      	ldr	r3, [pc, #160]	; (8003adc <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a3a:	881b      	ldrh	r3, [r3, #0]
 8003a3c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	61fb      	str	r3, [r7, #28]
 8003a42:	2300      	movs	r3, #0
 8003a44:	61bb      	str	r3, [r7, #24]
 8003a46:	2300      	movs	r3, #0
 8003a48:	627b      	str	r3, [r7, #36]	; 0x24
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a52:	4b23      	ldr	r3, [pc, #140]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	f003 030c 	and.w	r3, r3, #12
 8003a5e:	2b04      	cmp	r3, #4
 8003a60:	d002      	beq.n	8003a68 <HAL_RCC_GetSysClockFreq+0x40>
 8003a62:	2b08      	cmp	r3, #8
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_GetSysClockFreq+0x46>
 8003a66:	e02d      	b.n	8003ac4 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a68:	4b1e      	ldr	r3, [pc, #120]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003a6a:	623b      	str	r3, [r7, #32]
      break;
 8003a6c:	e02d      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	0c9b      	lsrs	r3, r3, #18
 8003a72:	f003 030f 	and.w	r3, r3, #15
 8003a76:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a80:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d013      	beq.n	8003ab4 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a8c:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	0c5b      	lsrs	r3, r3, #17
 8003a92:	f003 0301 	and.w	r3, r3, #1
 8003a96:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003aa0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	4a0f      	ldr	r2, [pc, #60]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003aa6:	fb02 f203 	mul.w	r2, r2, r3
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ab2:	e004      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	4a0c      	ldr	r2, [pc, #48]	; (8003ae8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003ab8:	fb02 f303 	mul.w	r3, r2, r3
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	623b      	str	r3, [r7, #32]
      break;
 8003ac2:	e002      	b.n	8003aca <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ac4:	4b07      	ldr	r3, [pc, #28]	; (8003ae4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003ac6:	623b      	str	r3, [r7, #32]
      break;
 8003ac8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003aca:	6a3b      	ldr	r3, [r7, #32]
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3728      	adds	r7, #40	; 0x28
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bc90      	pop	{r4, r7}
 8003ad4:	4770      	bx	lr
 8003ad6:	bf00      	nop
 8003ad8:	080071f4 	.word	0x080071f4
 8003adc:	08007204 	.word	0x08007204
 8003ae0:	40021000 	.word	0x40021000
 8003ae4:	007a1200 	.word	0x007a1200
 8003ae8:	003d0900 	.word	0x003d0900

08003aec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003aec:	b480      	push	{r7}
 8003aee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003af0:	4b02      	ldr	r3, [pc, #8]	; (8003afc <HAL_RCC_GetHCLKFreq+0x10>)
 8003af2:	681b      	ldr	r3, [r3, #0]
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr
 8003afc:	20000014 	.word	0x20000014

08003b00 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003b04:	f7ff fff2 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b08:	4601      	mov	r1, r0
 8003b0a:	4b05      	ldr	r3, [pc, #20]	; (8003b20 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	0a1b      	lsrs	r3, r3, #8
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	4a03      	ldr	r2, [pc, #12]	; (8003b24 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b16:	5cd3      	ldrb	r3, [r2, r3]
 8003b18:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	bd80      	pop	{r7, pc}
 8003b20:	40021000 	.word	0x40021000
 8003b24:	08007218 	.word	0x08007218

08003b28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b2c:	f7ff ffde 	bl	8003aec <HAL_RCC_GetHCLKFreq>
 8003b30:	4601      	mov	r1, r0
 8003b32:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	0adb      	lsrs	r3, r3, #11
 8003b38:	f003 0307 	and.w	r3, r3, #7
 8003b3c:	4a03      	ldr	r2, [pc, #12]	; (8003b4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b3e:	5cd3      	ldrb	r3, [r2, r3]
 8003b40:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	08007218 	.word	0x08007218

08003b50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b58:	4b0a      	ldr	r3, [pc, #40]	; (8003b84 <RCC_Delay+0x34>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a0a      	ldr	r2, [pc, #40]	; (8003b88 <RCC_Delay+0x38>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	0a5b      	lsrs	r3, r3, #9
 8003b64:	687a      	ldr	r2, [r7, #4]
 8003b66:	fb02 f303 	mul.w	r3, r2, r3
 8003b6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b6c:	bf00      	nop
  }
  while (Delay --);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	1e5a      	subs	r2, r3, #1
 8003b72:	60fa      	str	r2, [r7, #12]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f9      	bne.n	8003b6c <RCC_Delay+0x1c>
}
 8003b78:	bf00      	nop
 8003b7a:	3714      	adds	r7, #20
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	20000014 	.word	0x20000014
 8003b88:	10624dd3 	.word	0x10624dd3

08003b8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e041      	b.n	8003c22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d106      	bne.n	8003bb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7fd ff2c 	bl	8001a10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2202      	movs	r2, #2
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	4619      	mov	r1, r3
 8003bca:	4610      	mov	r0, r2
 8003bcc:	f000 fa9e 	bl	800410c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b082      	sub	sp, #8
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d101      	bne.n	8003c3c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	e041      	b.n	8003cc0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d106      	bne.n	8003c56 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 f839 	bl	8003cc8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2202      	movs	r2, #2
 8003c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	3304      	adds	r3, #4
 8003c66:	4619      	mov	r1, r3
 8003c68:	4610      	mov	r0, r2
 8003c6a:	f000 fa4f 	bl	800410c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2201      	movs	r2, #1
 8003c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bc80      	pop	{r7}
 8003cd8:	4770      	bx	lr
	...

08003cdc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d109      	bne.n	8003d00 <HAL_TIM_PWM_Start+0x24>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	bf14      	ite	ne
 8003cf8:	2301      	movne	r3, #1
 8003cfa:	2300      	moveq	r3, #0
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	e022      	b.n	8003d46 <HAL_TIM_PWM_Start+0x6a>
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	2b04      	cmp	r3, #4
 8003d04:	d109      	bne.n	8003d1a <HAL_TIM_PWM_Start+0x3e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	bf14      	ite	ne
 8003d12:	2301      	movne	r3, #1
 8003d14:	2300      	moveq	r3, #0
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	e015      	b.n	8003d46 <HAL_TIM_PWM_Start+0x6a>
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d109      	bne.n	8003d34 <HAL_TIM_PWM_Start+0x58>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d26:	b2db      	uxtb	r3, r3
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	bf14      	ite	ne
 8003d2c:	2301      	movne	r3, #1
 8003d2e:	2300      	moveq	r3, #0
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	e008      	b.n	8003d46 <HAL_TIM_PWM_Start+0x6a>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	bf14      	ite	ne
 8003d40:	2301      	movne	r3, #1
 8003d42:	2300      	moveq	r3, #0
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d001      	beq.n	8003d4e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	e05e      	b.n	8003e0c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d104      	bne.n	8003d5e <HAL_TIM_PWM_Start+0x82>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d5c:	e013      	b.n	8003d86 <HAL_TIM_PWM_Start+0xaa>
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d104      	bne.n	8003d6e <HAL_TIM_PWM_Start+0x92>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d6c:	e00b      	b.n	8003d86 <HAL_TIM_PWM_Start+0xaa>
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	2b08      	cmp	r3, #8
 8003d72:	d104      	bne.n	8003d7e <HAL_TIM_PWM_Start+0xa2>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2202      	movs	r2, #2
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d7c:	e003      	b.n	8003d86 <HAL_TIM_PWM_Start+0xaa>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2202      	movs	r2, #2
 8003d82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	6839      	ldr	r1, [r7, #0]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fc3c 	bl	800460c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a1e      	ldr	r2, [pc, #120]	; (8003e14 <HAL_TIM_PWM_Start+0x138>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d107      	bne.n	8003dae <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	6812      	ldr	r2, [r2, #0]
 8003da6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003da8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003dac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a18      	ldr	r2, [pc, #96]	; (8003e14 <HAL_TIM_PWM_Start+0x138>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d00e      	beq.n	8003dd6 <HAL_TIM_PWM_Start+0xfa>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc0:	d009      	beq.n	8003dd6 <HAL_TIM_PWM_Start+0xfa>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a14      	ldr	r2, [pc, #80]	; (8003e18 <HAL_TIM_PWM_Start+0x13c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d004      	beq.n	8003dd6 <HAL_TIM_PWM_Start+0xfa>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a12      	ldr	r2, [pc, #72]	; (8003e1c <HAL_TIM_PWM_Start+0x140>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d111      	bne.n	8003dfa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2b06      	cmp	r3, #6
 8003de6:	d010      	beq.n	8003e0a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	687a      	ldr	r2, [r7, #4]
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	6812      	ldr	r2, [r2, #0]
 8003df2:	f042 0201 	orr.w	r2, r2, #1
 8003df6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003df8:	e007      	b.n	8003e0a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	6812      	ldr	r2, [r2, #0]
 8003e02:	6812      	ldr	r2, [r2, #0]
 8003e04:	f042 0201 	orr.w	r2, r2, #1
 8003e08:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e0a:	2300      	movs	r3, #0
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40012c00 	.word	0x40012c00
 8003e18:	40000400 	.word	0x40000400
 8003e1c:	40000800 	.word	0x40000800

08003e20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e36:	2302      	movs	r3, #2
 8003e38:	e0ac      	b.n	8003f94 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2201      	movs	r2, #1
 8003e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b0c      	cmp	r3, #12
 8003e46:	f200 809f 	bhi.w	8003f88 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003e4a:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e50:	08003e85 	.word	0x08003e85
 8003e54:	08003f89 	.word	0x08003f89
 8003e58:	08003f89 	.word	0x08003f89
 8003e5c:	08003f89 	.word	0x08003f89
 8003e60:	08003ec5 	.word	0x08003ec5
 8003e64:	08003f89 	.word	0x08003f89
 8003e68:	08003f89 	.word	0x08003f89
 8003e6c:	08003f89 	.word	0x08003f89
 8003e70:	08003f07 	.word	0x08003f07
 8003e74:	08003f89 	.word	0x08003f89
 8003e78:	08003f89 	.word	0x08003f89
 8003e7c:	08003f89 	.word	0x08003f89
 8003e80:	08003f47 	.word	0x08003f47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68b9      	ldr	r1, [r7, #8]
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 f9a0 	bl	80041d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	6812      	ldr	r2, [r2, #0]
 8003e98:	6992      	ldr	r2, [r2, #24]
 8003e9a:	f042 0208 	orr.w	r2, r2, #8
 8003e9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	68fa      	ldr	r2, [r7, #12]
 8003ea6:	6812      	ldr	r2, [r2, #0]
 8003ea8:	6992      	ldr	r2, [r2, #24]
 8003eaa:	f022 0204 	bic.w	r2, r2, #4
 8003eae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	6812      	ldr	r2, [r2, #0]
 8003eb8:	6991      	ldr	r1, [r2, #24]
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	6912      	ldr	r2, [r2, #16]
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	619a      	str	r2, [r3, #24]
      break;
 8003ec2:	e062      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68b9      	ldr	r1, [r7, #8]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f000 f9e6 	bl	800429c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	68fa      	ldr	r2, [r7, #12]
 8003ed6:	6812      	ldr	r2, [r2, #0]
 8003ed8:	6992      	ldr	r2, [r2, #24]
 8003eda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	6812      	ldr	r2, [r2, #0]
 8003ee8:	6992      	ldr	r2, [r2, #24]
 8003eea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	6812      	ldr	r2, [r2, #0]
 8003ef8:	6991      	ldr	r1, [r2, #24]
 8003efa:	68ba      	ldr	r2, [r7, #8]
 8003efc:	6912      	ldr	r2, [r2, #16]
 8003efe:	0212      	lsls	r2, r2, #8
 8003f00:	430a      	orrs	r2, r1
 8003f02:	619a      	str	r2, [r3, #24]
      break;
 8003f04:	e041      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68b9      	ldr	r1, [r7, #8]
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	f000 fa2f 	bl	8004370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	68fa      	ldr	r2, [r7, #12]
 8003f18:	6812      	ldr	r2, [r2, #0]
 8003f1a:	69d2      	ldr	r2, [r2, #28]
 8003f1c:	f042 0208 	orr.w	r2, r2, #8
 8003f20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	69d2      	ldr	r2, [r2, #28]
 8003f2c:	f022 0204 	bic.w	r2, r2, #4
 8003f30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	6812      	ldr	r2, [r2, #0]
 8003f3a:	69d1      	ldr	r1, [r2, #28]
 8003f3c:	68ba      	ldr	r2, [r7, #8]
 8003f3e:	6912      	ldr	r2, [r2, #16]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	61da      	str	r2, [r3, #28]
      break;
 8003f44:	e021      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f000 fa79 	bl	8004444 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	6812      	ldr	r2, [r2, #0]
 8003f5a:	69d2      	ldr	r2, [r2, #28]
 8003f5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	6812      	ldr	r2, [r2, #0]
 8003f6a:	69d2      	ldr	r2, [r2, #28]
 8003f6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	6812      	ldr	r2, [r2, #0]
 8003f7a:	69d1      	ldr	r1, [r2, #28]
 8003f7c:	68ba      	ldr	r2, [r7, #8]
 8003f7e:	6912      	ldr	r2, [r2, #16]
 8003f80:	0212      	lsls	r2, r2, #8
 8003f82:	430a      	orrs	r2, r1
 8003f84:	61da      	str	r2, [r3, #28]
      break;
 8003f86:	e000      	b.n	8003f8a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003f88:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f92:	2300      	movs	r3, #0
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3710      	adds	r7, #16
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d101      	bne.n	8003fb4 <HAL_TIM_ConfigClockSource+0x18>
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	e0a6      	b.n	8004102 <HAL_TIM_ConfigClockSource+0x166>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2202      	movs	r2, #2
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003fd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003fda:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2b40      	cmp	r3, #64	; 0x40
 8003fea:	d067      	beq.n	80040bc <HAL_TIM_ConfigClockSource+0x120>
 8003fec:	2b40      	cmp	r3, #64	; 0x40
 8003fee:	d80b      	bhi.n	8004008 <HAL_TIM_ConfigClockSource+0x6c>
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	d073      	beq.n	80040dc <HAL_TIM_ConfigClockSource+0x140>
 8003ff4:	2b10      	cmp	r3, #16
 8003ff6:	d802      	bhi.n	8003ffe <HAL_TIM_ConfigClockSource+0x62>
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d06f      	beq.n	80040dc <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003ffc:	e078      	b.n	80040f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ffe:	2b20      	cmp	r3, #32
 8004000:	d06c      	beq.n	80040dc <HAL_TIM_ConfigClockSource+0x140>
 8004002:	2b30      	cmp	r3, #48	; 0x30
 8004004:	d06a      	beq.n	80040dc <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004006:	e073      	b.n	80040f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004008:	2b70      	cmp	r3, #112	; 0x70
 800400a:	d00d      	beq.n	8004028 <HAL_TIM_ConfigClockSource+0x8c>
 800400c:	2b70      	cmp	r3, #112	; 0x70
 800400e:	d804      	bhi.n	800401a <HAL_TIM_ConfigClockSource+0x7e>
 8004010:	2b50      	cmp	r3, #80	; 0x50
 8004012:	d033      	beq.n	800407c <HAL_TIM_ConfigClockSource+0xe0>
 8004014:	2b60      	cmp	r3, #96	; 0x60
 8004016:	d041      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004018:	e06a      	b.n	80040f0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800401a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800401e:	d066      	beq.n	80040ee <HAL_TIM_ConfigClockSource+0x152>
 8004020:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004024:	d017      	beq.n	8004056 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004026:	e063      	b.n	80040f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6818      	ldr	r0, [r3, #0]
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	6899      	ldr	r1, [r3, #8]
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f000 fac9 	bl	80045ce <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800404a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	609a      	str	r2, [r3, #8]
      break;
 8004054:	e04c      	b.n	80040f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6818      	ldr	r0, [r3, #0]
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	6899      	ldr	r1, [r3, #8]
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	685a      	ldr	r2, [r3, #4]
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	f000 fab2 	bl	80045ce <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6812      	ldr	r2, [r2, #0]
 8004072:	6892      	ldr	r2, [r2, #8]
 8004074:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004078:	609a      	str	r2, [r3, #8]
      break;
 800407a:	e039      	b.n	80040f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	6859      	ldr	r1, [r3, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	461a      	mov	r2, r3
 800408a:	f000 fa29 	bl	80044e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2150      	movs	r1, #80	; 0x50
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fa80 	bl	800459a <TIM_ITRx_SetConfig>
      break;
 800409a:	e029      	b.n	80040f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6818      	ldr	r0, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	6859      	ldr	r1, [r3, #4]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	461a      	mov	r2, r3
 80040aa:	f000 fa47 	bl	800453c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2160      	movs	r1, #96	; 0x60
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 fa70 	bl	800459a <TIM_ITRx_SetConfig>
      break;
 80040ba:	e019      	b.n	80040f0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6818      	ldr	r0, [r3, #0]
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	6859      	ldr	r1, [r3, #4]
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	461a      	mov	r2, r3
 80040ca:	f000 fa09 	bl	80044e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2140      	movs	r1, #64	; 0x40
 80040d4:	4618      	mov	r0, r3
 80040d6:	f000 fa60 	bl	800459a <TIM_ITRx_SetConfig>
      break;
 80040da:	e009      	b.n	80040f0 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f000 fa57 	bl	800459a <TIM_ITRx_SetConfig>
        break;
 80040ec:	e000      	b.n	80040f0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80040ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3710      	adds	r7, #16
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800410c:	b480      	push	{r7}
 800410e:	b085      	sub	sp, #20
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	4a29      	ldr	r2, [pc, #164]	; (80041c4 <TIM_Base_SetConfig+0xb8>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00b      	beq.n	800413c <TIM_Base_SetConfig+0x30>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800412a:	d007      	beq.n	800413c <TIM_Base_SetConfig+0x30>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a26      	ldr	r2, [pc, #152]	; (80041c8 <TIM_Base_SetConfig+0xbc>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d003      	beq.n	800413c <TIM_Base_SetConfig+0x30>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a25      	ldr	r2, [pc, #148]	; (80041cc <TIM_Base_SetConfig+0xc0>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d108      	bne.n	800414e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004142:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	68fa      	ldr	r2, [r7, #12]
 800414a:	4313      	orrs	r3, r2
 800414c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a1c      	ldr	r2, [pc, #112]	; (80041c4 <TIM_Base_SetConfig+0xb8>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00b      	beq.n	800416e <TIM_Base_SetConfig+0x62>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800415c:	d007      	beq.n	800416e <TIM_Base_SetConfig+0x62>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a19      	ldr	r2, [pc, #100]	; (80041c8 <TIM_Base_SetConfig+0xbc>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d003      	beq.n	800416e <TIM_Base_SetConfig+0x62>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a18      	ldr	r2, [pc, #96]	; (80041cc <TIM_Base_SetConfig+0xc0>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d108      	bne.n	8004180 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	4313      	orrs	r3, r2
 800417e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681a      	ldr	r2, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a07      	ldr	r2, [pc, #28]	; (80041c4 <TIM_Base_SetConfig+0xb8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d103      	bne.n	80041b4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	691a      	ldr	r2, [r3, #16]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	615a      	str	r2, [r3, #20]
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr
 80041c4:	40012c00 	.word	0x40012c00
 80041c8:	40000400 	.word	0x40000400
 80041cc:	40000800 	.word	0x40000800

080041d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b087      	sub	sp, #28
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
 80041d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	f023 0201 	bic.w	r2, r3, #1
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f023 0303 	bic.w	r3, r3, #3
 8004206:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68fa      	ldr	r2, [r7, #12]
 800420e:	4313      	orrs	r3, r2
 8004210:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	f023 0302 	bic.w	r3, r3, #2
 8004218:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a1c      	ldr	r2, [pc, #112]	; (8004298 <TIM_OC1_SetConfig+0xc8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d10c      	bne.n	8004246 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0308 	bic.w	r3, r3, #8
 8004232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f023 0304 	bic.w	r3, r3, #4
 8004244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a13      	ldr	r2, [pc, #76]	; (8004298 <TIM_OC1_SetConfig+0xc8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d111      	bne.n	8004272 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004254:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800425c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	693a      	ldr	r2, [r7, #16]
 8004264:	4313      	orrs	r3, r2
 8004266:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	699b      	ldr	r3, [r3, #24]
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	685a      	ldr	r2, [r3, #4]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	697a      	ldr	r2, [r7, #20]
 800428a:	621a      	str	r2, [r3, #32]
}
 800428c:	bf00      	nop
 800428e:	371c      	adds	r7, #28
 8004290:	46bd      	mov	sp, r7
 8004292:	bc80      	pop	{r7}
 8004294:	4770      	bx	lr
 8004296:	bf00      	nop
 8004298:	40012c00 	.word	0x40012c00

0800429c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800429c:	b480      	push	{r7}
 800429e:	b087      	sub	sp, #28
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a1b      	ldr	r3, [r3, #32]
 80042aa:	f023 0210 	bic.w	r2, r3, #16
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	699b      	ldr	r3, [r3, #24]
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	021b      	lsls	r3, r3, #8
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f023 0320 	bic.w	r3, r3, #32
 80042e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	011b      	lsls	r3, r3, #4
 80042ee:	697a      	ldr	r2, [r7, #20]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	4a1d      	ldr	r2, [pc, #116]	; (800436c <TIM_OC2_SetConfig+0xd0>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d10d      	bne.n	8004318 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004302:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004316:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a14      	ldr	r2, [pc, #80]	; (800436c <TIM_OC2_SetConfig+0xd0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d113      	bne.n	8004348 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800432e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	695b      	ldr	r3, [r3, #20]
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	009b      	lsls	r3, r3, #2
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4313      	orrs	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	693a      	ldr	r2, [r7, #16]
 800434c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68fa      	ldr	r2, [r7, #12]
 8004352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	621a      	str	r2, [r3, #32]
}
 8004362:	bf00      	nop
 8004364:	371c      	adds	r7, #28
 8004366:	46bd      	mov	sp, r7
 8004368:	bc80      	pop	{r7}
 800436a:	4770      	bx	lr
 800436c:	40012c00 	.word	0x40012c00

08004370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6a1b      	ldr	r3, [r3, #32]
 800438a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0303 	bic.w	r3, r3, #3
 80043a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80043b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	021b      	lsls	r3, r3, #8
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a1d      	ldr	r2, [pc, #116]	; (8004440 <TIM_OC3_SetConfig+0xd0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d10d      	bne.n	80043ea <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80043d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	4313      	orrs	r3, r2
 80043e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4a14      	ldr	r2, [pc, #80]	; (8004440 <TIM_OC3_SetConfig+0xd0>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d113      	bne.n	800441a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004400:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	695b      	ldr	r3, [r3, #20]
 8004406:	011b      	lsls	r3, r3, #4
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	011b      	lsls	r3, r3, #4
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	4313      	orrs	r3, r2
 8004418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	68fa      	ldr	r2, [r7, #12]
 8004424:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	685a      	ldr	r2, [r3, #4]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	697a      	ldr	r2, [r7, #20]
 8004432:	621a      	str	r2, [r3, #32]
}
 8004434:	bf00      	nop
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	bc80      	pop	{r7}
 800443c:	4770      	bx	lr
 800443e:	bf00      	nop
 8004440:	40012c00 	.word	0x40012c00

08004444 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004444:	b480      	push	{r7}
 8004446:	b087      	sub	sp, #28
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6a1b      	ldr	r3, [r3, #32]
 8004452:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800447a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	021b      	lsls	r3, r3, #8
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4313      	orrs	r3, r2
 8004486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800448e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	031b      	lsls	r3, r3, #12
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	4313      	orrs	r3, r2
 800449a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a0f      	ldr	r2, [pc, #60]	; (80044dc <TIM_OC4_SetConfig+0x98>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d109      	bne.n	80044b8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	019b      	lsls	r3, r3, #6
 80044b2:	697a      	ldr	r2, [r7, #20]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	621a      	str	r2, [r3, #32]
}
 80044d2:	bf00      	nop
 80044d4:	371c      	adds	r7, #28
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bc80      	pop	{r7}
 80044da:	4770      	bx	lr
 80044dc:	40012c00 	.word	0x40012c00

080044e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6a1b      	ldr	r3, [r3, #32]
 80044f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6a1b      	ldr	r3, [r3, #32]
 80044f6:	f023 0201 	bic.w	r2, r3, #1
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800450a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	011b      	lsls	r3, r3, #4
 8004510:	693a      	ldr	r2, [r7, #16]
 8004512:	4313      	orrs	r3, r2
 8004514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f023 030a 	bic.w	r3, r3, #10
 800451c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	4313      	orrs	r3, r2
 8004524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	621a      	str	r2, [r3, #32]
}
 8004532:	bf00      	nop
 8004534:	371c      	adds	r7, #28
 8004536:	46bd      	mov	sp, r7
 8004538:	bc80      	pop	{r7}
 800453a:	4770      	bx	lr

0800453c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800453c:	b480      	push	{r7}
 800453e:	b087      	sub	sp, #28
 8004540:	af00      	add	r7, sp, #0
 8004542:	60f8      	str	r0, [r7, #12]
 8004544:	60b9      	str	r1, [r7, #8]
 8004546:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	f023 0210 	bic.w	r2, r3, #16
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	6a1b      	ldr	r3, [r3, #32]
 800455e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004566:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	031b      	lsls	r3, r3, #12
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	4313      	orrs	r3, r2
 8004570:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004578:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	693a      	ldr	r2, [r7, #16]
 8004580:	4313      	orrs	r3, r2
 8004582:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	697a      	ldr	r2, [r7, #20]
 8004588:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	621a      	str	r2, [r3, #32]
}
 8004590:	bf00      	nop
 8004592:	371c      	adds	r7, #28
 8004594:	46bd      	mov	sp, r7
 8004596:	bc80      	pop	{r7}
 8004598:	4770      	bx	lr

0800459a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800459a:	b480      	push	{r7}
 800459c:	b085      	sub	sp, #20
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
 80045a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	f043 0307 	orr.w	r3, r3, #7
 80045bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	68fa      	ldr	r2, [r7, #12]
 80045c2:	609a      	str	r2, [r3, #8]
}
 80045c4:	bf00      	nop
 80045c6:	3714      	adds	r7, #20
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bc80      	pop	{r7}
 80045cc:	4770      	bx	lr

080045ce <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045ce:	b480      	push	{r7}
 80045d0:	b087      	sub	sp, #28
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	60f8      	str	r0, [r7, #12]
 80045d6:	60b9      	str	r1, [r7, #8]
 80045d8:	607a      	str	r2, [r7, #4]
 80045da:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045e8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	021a      	lsls	r2, r3, #8
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	431a      	orrs	r2, r3
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	4313      	orrs	r3, r2
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	697a      	ldr	r2, [r7, #20]
 8004600:	609a      	str	r2, [r3, #8]
}
 8004602:	bf00      	nop
 8004604:	371c      	adds	r7, #28
 8004606:	46bd      	mov	sp, r7
 8004608:	bc80      	pop	{r7}
 800460a:	4770      	bx	lr

0800460c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800460c:	b480      	push	{r7}
 800460e:	b087      	sub	sp, #28
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f003 031f 	and.w	r3, r3, #31
 800461e:	2201      	movs	r2, #1
 8004620:	fa02 f303 	lsl.w	r3, r2, r3
 8004624:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a1a      	ldr	r2, [r3, #32]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	43db      	mvns	r3, r3
 800462e:	401a      	ands	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	6a1a      	ldr	r2, [r3, #32]
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f003 031f 	and.w	r3, r3, #31
 800463e:	6879      	ldr	r1, [r7, #4]
 8004640:	fa01 f303 	lsl.w	r3, r1, r3
 8004644:	431a      	orrs	r2, r3
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	621a      	str	r2, [r3, #32]
}
 800464a:	bf00      	nop
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	bc80      	pop	{r7}
 8004652:	4770      	bx	lr

08004654 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004664:	2b01      	cmp	r3, #1
 8004666:	d101      	bne.n	800466c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004668:	2302      	movs	r3, #2
 800466a:	e046      	b.n	80046fa <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2202      	movs	r2, #2
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004692:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	4313      	orrs	r3, r2
 800469c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4a16      	ldr	r2, [pc, #88]	; (8004704 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d00e      	beq.n	80046ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046b8:	d009      	beq.n	80046ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a12      	ldr	r2, [pc, #72]	; (8004708 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d004      	beq.n	80046ce <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a10      	ldr	r2, [pc, #64]	; (800470c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d10c      	bne.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046d4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	68ba      	ldr	r2, [r7, #8]
 80046dc:	4313      	orrs	r3, r2
 80046de:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	68ba      	ldr	r2, [r7, #8]
 80046e6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046f8:	2300      	movs	r3, #0
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr
 8004704:	40012c00 	.word	0x40012c00
 8004708:	40000400 	.word	0x40000400
 800470c:	40000800 	.word	0x40000800

08004710 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004710:	b480      	push	{r7}
 8004712:	b085      	sub	sp, #20
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
 8004718:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004728:	2302      	movs	r3, #2
 800472a:	e03d      	b.n	80047a8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	4313      	orrs	r3, r2
 8004740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	4313      	orrs	r3, r2
 800474e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4313      	orrs	r3, r2
 800475c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	4313      	orrs	r3, r2
 800476a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	69db      	ldr	r3, [r3, #28]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68fa      	ldr	r2, [r7, #12]
 800479c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2200      	movs	r2, #0
 80047a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80047a6:	2300      	movs	r3, #0
}
 80047a8:	4618      	mov	r0, r3
 80047aa:	3714      	adds	r7, #20
 80047ac:	46bd      	mov	sp, r7
 80047ae:	bc80      	pop	{r7}
 80047b0:	4770      	bx	lr

080047b2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047b2:	b580      	push	{r7, lr}
 80047b4:	b082      	sub	sp, #8
 80047b6:	af00      	add	r7, sp, #0
 80047b8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d101      	bne.n	80047c4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047c0:	2301      	movs	r3, #1
 80047c2:	e03f      	b.n	8004844 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d106      	bne.n	80047de <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047d8:	6878      	ldr	r0, [r7, #4]
 80047da:	f7fd f96b 	bl	8001ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2224      	movs	r2, #36	; 0x24
 80047e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	6812      	ldr	r2, [r2, #0]
 80047ee:	68d2      	ldr	r2, [r2, #12]
 80047f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f000 f904 	bl	8004a04 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	687a      	ldr	r2, [r7, #4]
 8004802:	6812      	ldr	r2, [r2, #0]
 8004804:	6912      	ldr	r2, [r2, #16]
 8004806:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800480a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6812      	ldr	r2, [r2, #0]
 8004814:	6952      	ldr	r2, [r2, #20]
 8004816:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800481a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	687a      	ldr	r2, [r7, #4]
 8004822:	6812      	ldr	r2, [r2, #0]
 8004824:	68d2      	ldr	r2, [r2, #12]
 8004826:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800482a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2220      	movs	r2, #32
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2220      	movs	r2, #32
 800483e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3708      	adds	r7, #8
 8004848:	46bd      	mov	sp, r7
 800484a:	bd80      	pop	{r7, pc}

0800484c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	; 0x28
 8004850:	af02      	add	r7, sp, #8
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	4613      	mov	r3, r2
 800485a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b20      	cmp	r3, #32
 800486a:	d17b      	bne.n	8004964 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d002      	beq.n	8004878 <HAL_UART_Transmit+0x2c>
 8004872:	88fb      	ldrh	r3, [r7, #6]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d101      	bne.n	800487c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e074      	b.n	8004966 <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004882:	2b01      	cmp	r3, #1
 8004884:	d101      	bne.n	800488a <HAL_UART_Transmit+0x3e>
 8004886:	2302      	movs	r3, #2
 8004888:	e06d      	b.n	8004966 <HAL_UART_Transmit+0x11a>
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	2221      	movs	r2, #33	; 0x21
 800489c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048a0:	f7fd fa06 	bl	8001cb0 <HAL_GetTick>
 80048a4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	88fa      	ldrh	r2, [r7, #6]
 80048aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	88fa      	ldrh	r2, [r7, #6]
 80048b0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ba:	d108      	bne.n	80048ce <HAL_UART_Transmit+0x82>
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d104      	bne.n	80048ce <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80048c4:	2300      	movs	r3, #0
 80048c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	61bb      	str	r3, [r7, #24]
 80048cc:	e003      	b.n	80048d6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80048de:	e029      	b.n	8004934 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	9300      	str	r3, [sp, #0]
 80048e4:	697b      	ldr	r3, [r7, #20]
 80048e6:	2200      	movs	r2, #0
 80048e8:	2180      	movs	r1, #128	; 0x80
 80048ea:	68f8      	ldr	r0, [r7, #12]
 80048ec:	f000 f83f 	bl	800496e <UART_WaitOnFlagUntilTimeout>
 80048f0:	4603      	mov	r3, r0
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e035      	b.n	8004966 <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 80048fa:	69fb      	ldr	r3, [r7, #28]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d10a      	bne.n	8004916 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	69ba      	ldr	r2, [r7, #24]
 8004906:	8812      	ldrh	r2, [r2, #0]
 8004908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800490c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	3302      	adds	r3, #2
 8004912:	61bb      	str	r3, [r7, #24]
 8004914:	e007      	b.n	8004926 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	69fa      	ldr	r2, [r7, #28]
 800491c:	7812      	ldrb	r2, [r2, #0]
 800491e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004920:	69fb      	ldr	r3, [r7, #28]
 8004922:	3301      	adds	r3, #1
 8004924:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800492a:	b29b      	uxth	r3, r3
 800492c:	3b01      	subs	r3, #1
 800492e:	b29a      	uxth	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004938:	b29b      	uxth	r3, r3
 800493a:	2b00      	cmp	r3, #0
 800493c:	d1d0      	bne.n	80048e0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	9300      	str	r3, [sp, #0]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	2200      	movs	r2, #0
 8004946:	2140      	movs	r1, #64	; 0x40
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f000 f810 	bl	800496e <UART_WaitOnFlagUntilTimeout>
 800494e:	4603      	mov	r3, r0
 8004950:	2b00      	cmp	r3, #0
 8004952:	d001      	beq.n	8004958 <HAL_UART_Transmit+0x10c>
    {
      return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e006      	b.n	8004966 <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2220      	movs	r2, #32
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004960:	2300      	movs	r3, #0
 8004962:	e000      	b.n	8004966 <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004964:	2302      	movs	r3, #2
  }
}
 8004966:	4618      	mov	r0, r3
 8004968:	3720      	adds	r7, #32
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800496e:	b580      	push	{r7, lr}
 8004970:	b084      	sub	sp, #16
 8004972:	af00      	add	r7, sp, #0
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	603b      	str	r3, [r7, #0]
 800497a:	4613      	mov	r3, r2
 800497c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800497e:	e02c      	b.n	80049da <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004986:	d028      	beq.n	80049da <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d007      	beq.n	800499e <UART_WaitOnFlagUntilTimeout+0x30>
 800498e:	f7fd f98f 	bl	8001cb0 <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	1ad2      	subs	r2, r2, r3
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	429a      	cmp	r2, r3
 800499c:	d91d      	bls.n	80049da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	6812      	ldr	r2, [r2, #0]
 80049a6:	68d2      	ldr	r2, [r2, #12]
 80049a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80049ac:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	6812      	ldr	r2, [r2, #0]
 80049b6:	6952      	ldr	r2, [r2, #20]
 80049b8:	f022 0201 	bic.w	r2, r2, #1
 80049bc:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2220      	movs	r2, #32
 80049c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e00f      	b.n	80049fa <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681a      	ldr	r2, [r3, #0]
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	401a      	ands	r2, r3
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	429a      	cmp	r2, r3
 80049e8:	bf0c      	ite	eq
 80049ea:	2301      	moveq	r3, #1
 80049ec:	2300      	movne	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	461a      	mov	r2, r3
 80049f2:	79fb      	ldrb	r3, [r7, #7]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d0c3      	beq.n	8004980 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a04:	b590      	push	{r4, r7, lr}
 8004a06:	b085      	sub	sp, #20
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6812      	ldr	r2, [r2, #0]
 8004a14:	6912      	ldr	r2, [r2, #16]
 8004a16:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	68d2      	ldr	r2, [r2, #12]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	689a      	ldr	r2, [r3, #8]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	4313      	orrs	r3, r2
 8004a32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681a      	ldr	r2, [r3, #0]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004a42:	f023 030c 	bic.w	r3, r3, #12
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	430b      	orrs	r3, r1
 8004a4a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6812      	ldr	r2, [r2, #0]
 8004a54:	6952      	ldr	r2, [r2, #20]
 8004a56:	f422 7140 	bic.w	r1, r2, #768	; 0x300
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6992      	ldr	r2, [r2, #24]
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a2c      	ldr	r2, [pc, #176]	; (8004b18 <UART_SetConfig+0x114>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d103      	bne.n	8004a74 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004a6c:	f7ff f85c 	bl	8003b28 <HAL_RCC_GetPCLK2Freq>
 8004a70:	60f8      	str	r0, [r7, #12]
 8004a72:	e002      	b.n	8004a7a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004a74:	f7ff f844 	bl	8003b00 <HAL_RCC_GetPCLK1Freq>
 8004a78:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6819      	ldr	r1, [r3, #0]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	4613      	mov	r3, r2
 8004a82:	009b      	lsls	r3, r3, #2
 8004a84:	4413      	add	r3, r2
 8004a86:	009a      	lsls	r2, r3, #2
 8004a88:	441a      	add	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a94:	4a21      	ldr	r2, [pc, #132]	; (8004b1c <UART_SetConfig+0x118>)
 8004a96:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9a:	095b      	lsrs	r3, r3, #5
 8004a9c:	0118      	lsls	r0, r3, #4
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009a      	lsls	r2, r3, #2
 8004aa8:	441a      	add	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ab4:	4b19      	ldr	r3, [pc, #100]	; (8004b1c <UART_SetConfig+0x118>)
 8004ab6:	fba3 4302 	umull	r4, r3, r3, r2
 8004aba:	095b      	lsrs	r3, r3, #5
 8004abc:	2464      	movs	r4, #100	; 0x64
 8004abe:	fb04 f303 	mul.w	r3, r4, r3
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	011b      	lsls	r3, r3, #4
 8004ac6:	3332      	adds	r3, #50	; 0x32
 8004ac8:	4a14      	ldr	r2, [pc, #80]	; (8004b1c <UART_SetConfig+0x118>)
 8004aca:	fba2 2303 	umull	r2, r3, r2, r3
 8004ace:	095b      	lsrs	r3, r3, #5
 8004ad0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ad4:	4418      	add	r0, r3
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	009b      	lsls	r3, r3, #2
 8004adc:	4413      	add	r3, r2
 8004ade:	009a      	lsls	r2, r3, #2
 8004ae0:	441a      	add	r2, r3
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004aec:	4b0b      	ldr	r3, [pc, #44]	; (8004b1c <UART_SetConfig+0x118>)
 8004aee:	fba3 4302 	umull	r4, r3, r3, r2
 8004af2:	095b      	lsrs	r3, r3, #5
 8004af4:	2464      	movs	r4, #100	; 0x64
 8004af6:	fb04 f303 	mul.w	r3, r4, r3
 8004afa:	1ad3      	subs	r3, r2, r3
 8004afc:	011b      	lsls	r3, r3, #4
 8004afe:	3332      	adds	r3, #50	; 0x32
 8004b00:	4a06      	ldr	r2, [pc, #24]	; (8004b1c <UART_SetConfig+0x118>)
 8004b02:	fba2 2303 	umull	r2, r3, r2, r3
 8004b06:	095b      	lsrs	r3, r3, #5
 8004b08:	f003 030f 	and.w	r3, r3, #15
 8004b0c:	4403      	add	r3, r0
 8004b0e:	608b      	str	r3, [r1, #8]
#endif /* USART_CR1_OVER8 */
}
 8004b10:	bf00      	nop
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd90      	pop	{r4, r7, pc}
 8004b18:	40013800 	.word	0x40013800
 8004b1c:	51eb851f 	.word	0x51eb851f

08004b20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b20:	480c      	ldr	r0, [pc, #48]	; (8004b54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004b22:	490d      	ldr	r1, [pc, #52]	; (8004b58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004b24:	4a0d      	ldr	r2, [pc, #52]	; (8004b5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b28:	e002      	b.n	8004b30 <LoopCopyDataInit>

08004b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b2e:	3304      	adds	r3, #4

08004b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b34:	d3f9      	bcc.n	8004b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b36:	4a0a      	ldr	r2, [pc, #40]	; (8004b60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004b38:	4c0a      	ldr	r4, [pc, #40]	; (8004b64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8004b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b3c:	e001      	b.n	8004b42 <LoopFillZerobss>

08004b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b40:	3204      	adds	r2, #4

08004b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b44:	d3fb      	bcc.n	8004b3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004b46:	f7fd f855 	bl	8001bf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b4a:	f000 f815 	bl	8004b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004b4e:	f7fc fa6b 	bl	8001028 <main>
  bx lr
 8004b52:	4770      	bx	lr
  ldr r0, =_sdata
 8004b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b58:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8004b5c:	080074c8 	.word	0x080074c8
  ldr r2, =_sbss
 8004b60:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8004b64:	2000036c 	.word	0x2000036c

08004b68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004b68:	e7fe      	b.n	8004b68 <ADC1_2_IRQHandler>
	...

08004b6c <__errno>:
 8004b6c:	4b01      	ldr	r3, [pc, #4]	; (8004b74 <__errno+0x8>)
 8004b6e:	6818      	ldr	r0, [r3, #0]
 8004b70:	4770      	bx	lr
 8004b72:	bf00      	nop
 8004b74:	20000020 	.word	0x20000020

08004b78 <__libc_init_array>:
 8004b78:	b570      	push	{r4, r5, r6, lr}
 8004b7a:	2500      	movs	r5, #0
 8004b7c:	4e0c      	ldr	r6, [pc, #48]	; (8004bb0 <__libc_init_array+0x38>)
 8004b7e:	4c0d      	ldr	r4, [pc, #52]	; (8004bb4 <__libc_init_array+0x3c>)
 8004b80:	1ba4      	subs	r4, r4, r6
 8004b82:	10a4      	asrs	r4, r4, #2
 8004b84:	42a5      	cmp	r5, r4
 8004b86:	d109      	bne.n	8004b9c <__libc_init_array+0x24>
 8004b88:	f002 fb00 	bl	800718c <_init>
 8004b8c:	2500      	movs	r5, #0
 8004b8e:	4e0a      	ldr	r6, [pc, #40]	; (8004bb8 <__libc_init_array+0x40>)
 8004b90:	4c0a      	ldr	r4, [pc, #40]	; (8004bbc <__libc_init_array+0x44>)
 8004b92:	1ba4      	subs	r4, r4, r6
 8004b94:	10a4      	asrs	r4, r4, #2
 8004b96:	42a5      	cmp	r5, r4
 8004b98:	d105      	bne.n	8004ba6 <__libc_init_array+0x2e>
 8004b9a:	bd70      	pop	{r4, r5, r6, pc}
 8004b9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004ba0:	4798      	blx	r3
 8004ba2:	3501      	adds	r5, #1
 8004ba4:	e7ee      	b.n	8004b84 <__libc_init_array+0xc>
 8004ba6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004baa:	4798      	blx	r3
 8004bac:	3501      	adds	r5, #1
 8004bae:	e7f2      	b.n	8004b96 <__libc_init_array+0x1e>
 8004bb0:	080074c0 	.word	0x080074c0
 8004bb4:	080074c0 	.word	0x080074c0
 8004bb8:	080074c0 	.word	0x080074c0
 8004bbc:	080074c4 	.word	0x080074c4

08004bc0 <memset>:
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	4402      	add	r2, r0
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d100      	bne.n	8004bca <memset+0xa>
 8004bc8:	4770      	bx	lr
 8004bca:	f803 1b01 	strb.w	r1, [r3], #1
 8004bce:	e7f9      	b.n	8004bc4 <memset+0x4>

08004bd0 <__cvt>:
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bd6:	461e      	mov	r6, r3
 8004bd8:	bfbb      	ittet	lt
 8004bda:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004bde:	461e      	movlt	r6, r3
 8004be0:	2300      	movge	r3, #0
 8004be2:	232d      	movlt	r3, #45	; 0x2d
 8004be4:	b088      	sub	sp, #32
 8004be6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8004be8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8004bea:	f027 0720 	bic.w	r7, r7, #32
 8004bee:	2f46      	cmp	r7, #70	; 0x46
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004bf4:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004bf8:	700b      	strb	r3, [r1, #0]
 8004bfa:	d004      	beq.n	8004c06 <__cvt+0x36>
 8004bfc:	2f45      	cmp	r7, #69	; 0x45
 8004bfe:	d100      	bne.n	8004c02 <__cvt+0x32>
 8004c00:	3501      	adds	r5, #1
 8004c02:	2302      	movs	r3, #2
 8004c04:	e000      	b.n	8004c08 <__cvt+0x38>
 8004c06:	2303      	movs	r3, #3
 8004c08:	aa07      	add	r2, sp, #28
 8004c0a:	9204      	str	r2, [sp, #16]
 8004c0c:	aa06      	add	r2, sp, #24
 8004c0e:	9203      	str	r2, [sp, #12]
 8004c10:	e88d 0428 	stmia.w	sp, {r3, r5, sl}
 8004c14:	4622      	mov	r2, r4
 8004c16:	4633      	mov	r3, r6
 8004c18:	f000 fcee 	bl	80055f8 <_dtoa_r>
 8004c1c:	2f47      	cmp	r7, #71	; 0x47
 8004c1e:	4680      	mov	r8, r0
 8004c20:	d102      	bne.n	8004c28 <__cvt+0x58>
 8004c22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c24:	07db      	lsls	r3, r3, #31
 8004c26:	d526      	bpl.n	8004c76 <__cvt+0xa6>
 8004c28:	2f46      	cmp	r7, #70	; 0x46
 8004c2a:	eb08 0905 	add.w	r9, r8, r5
 8004c2e:	d111      	bne.n	8004c54 <__cvt+0x84>
 8004c30:	f898 3000 	ldrb.w	r3, [r8]
 8004c34:	2b30      	cmp	r3, #48	; 0x30
 8004c36:	d10a      	bne.n	8004c4e <__cvt+0x7e>
 8004c38:	2200      	movs	r2, #0
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	4620      	mov	r0, r4
 8004c3e:	4631      	mov	r1, r6
 8004c40:	f7fb feae 	bl	80009a0 <__aeabi_dcmpeq>
 8004c44:	b918      	cbnz	r0, 8004c4e <__cvt+0x7e>
 8004c46:	f1c5 0501 	rsb	r5, r5, #1
 8004c4a:	f8ca 5000 	str.w	r5, [sl]
 8004c4e:	f8da 3000 	ldr.w	r3, [sl]
 8004c52:	4499      	add	r9, r3
 8004c54:	2200      	movs	r2, #0
 8004c56:	2300      	movs	r3, #0
 8004c58:	4620      	mov	r0, r4
 8004c5a:	4631      	mov	r1, r6
 8004c5c:	f7fb fea0 	bl	80009a0 <__aeabi_dcmpeq>
 8004c60:	b938      	cbnz	r0, 8004c72 <__cvt+0xa2>
 8004c62:	2230      	movs	r2, #48	; 0x30
 8004c64:	9b07      	ldr	r3, [sp, #28]
 8004c66:	4599      	cmp	r9, r3
 8004c68:	d905      	bls.n	8004c76 <__cvt+0xa6>
 8004c6a:	1c59      	adds	r1, r3, #1
 8004c6c:	9107      	str	r1, [sp, #28]
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	e7f8      	b.n	8004c64 <__cvt+0x94>
 8004c72:	f8cd 901c 	str.w	r9, [sp, #28]
 8004c76:	4640      	mov	r0, r8
 8004c78:	9b07      	ldr	r3, [sp, #28]
 8004c7a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004c7c:	eba3 0308 	sub.w	r3, r3, r8
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	b008      	add	sp, #32
 8004c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004c88 <__exponent>:
 8004c88:	4603      	mov	r3, r0
 8004c8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c8c:	2900      	cmp	r1, #0
 8004c8e:	f803 2b02 	strb.w	r2, [r3], #2
 8004c92:	bfb6      	itet	lt
 8004c94:	222d      	movlt	r2, #45	; 0x2d
 8004c96:	222b      	movge	r2, #43	; 0x2b
 8004c98:	4249      	neglt	r1, r1
 8004c9a:	2909      	cmp	r1, #9
 8004c9c:	7042      	strb	r2, [r0, #1]
 8004c9e:	dd21      	ble.n	8004ce4 <__exponent+0x5c>
 8004ca0:	f10d 0207 	add.w	r2, sp, #7
 8004ca4:	4617      	mov	r7, r2
 8004ca6:	260a      	movs	r6, #10
 8004ca8:	fb91 f5f6 	sdiv	r5, r1, r6
 8004cac:	fb06 1115 	mls	r1, r6, r5, r1
 8004cb0:	2d09      	cmp	r5, #9
 8004cb2:	f101 0130 	add.w	r1, r1, #48	; 0x30
 8004cb6:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004cba:	f102 34ff 	add.w	r4, r2, #4294967295
 8004cbe:	4629      	mov	r1, r5
 8004cc0:	dc09      	bgt.n	8004cd6 <__exponent+0x4e>
 8004cc2:	3130      	adds	r1, #48	; 0x30
 8004cc4:	3a02      	subs	r2, #2
 8004cc6:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004cca:	42ba      	cmp	r2, r7
 8004ccc:	461c      	mov	r4, r3
 8004cce:	d304      	bcc.n	8004cda <__exponent+0x52>
 8004cd0:	1a20      	subs	r0, r4, r0
 8004cd2:	b003      	add	sp, #12
 8004cd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cd6:	4622      	mov	r2, r4
 8004cd8:	e7e6      	b.n	8004ca8 <__exponent+0x20>
 8004cda:	f812 1b01 	ldrb.w	r1, [r2], #1
 8004cde:	f803 1b01 	strb.w	r1, [r3], #1
 8004ce2:	e7f2      	b.n	8004cca <__exponent+0x42>
 8004ce4:	2230      	movs	r2, #48	; 0x30
 8004ce6:	461c      	mov	r4, r3
 8004ce8:	4411      	add	r1, r2
 8004cea:	f804 2b02 	strb.w	r2, [r4], #2
 8004cee:	7059      	strb	r1, [r3, #1]
 8004cf0:	e7ee      	b.n	8004cd0 <__exponent+0x48>
	...

08004cf4 <_printf_float>:
 8004cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cf8:	b091      	sub	sp, #68	; 0x44
 8004cfa:	460c      	mov	r4, r1
 8004cfc:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8004cfe:	4693      	mov	fp, r2
 8004d00:	461e      	mov	r6, r3
 8004d02:	4605      	mov	r5, r0
 8004d04:	f001 fa4c 	bl	80061a0 <_localeconv_r>
 8004d08:	6803      	ldr	r3, [r0, #0]
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	9309      	str	r3, [sp, #36]	; 0x24
 8004d0e:	f7fb fa1f 	bl	8000150 <strlen>
 8004d12:	2300      	movs	r3, #0
 8004d14:	930e      	str	r3, [sp, #56]	; 0x38
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	900a      	str	r0, [sp, #40]	; 0x28
 8004d1a:	3307      	adds	r3, #7
 8004d1c:	f023 0307 	bic.w	r3, r3, #7
 8004d20:	f103 0208 	add.w	r2, r3, #8
 8004d24:	f894 8018 	ldrb.w	r8, [r4, #24]
 8004d28:	f8d4 a000 	ldr.w	sl, [r4]
 8004d2c:	603a      	str	r2, [r7, #0]
 8004d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d32:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d36:	f8d4 904c 	ldr.w	r9, [r4, #76]	; 0x4c
 8004d3a:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8004d3c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d40:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d42:	f04f 32ff 	mov.w	r2, #4294967295
 8004d46:	4ba6      	ldr	r3, [pc, #664]	; (8004fe0 <_printf_float+0x2ec>)
 8004d48:	4638      	mov	r0, r7
 8004d4a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d4c:	f7fb fe5a 	bl	8000a04 <__aeabi_dcmpun>
 8004d50:	2800      	cmp	r0, #0
 8004d52:	f040 81f7 	bne.w	8005144 <_printf_float+0x450>
 8004d56:	f04f 32ff 	mov.w	r2, #4294967295
 8004d5a:	4ba1      	ldr	r3, [pc, #644]	; (8004fe0 <_printf_float+0x2ec>)
 8004d5c:	4638      	mov	r0, r7
 8004d5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004d60:	f7fb fe32 	bl	80009c8 <__aeabi_dcmple>
 8004d64:	2800      	cmp	r0, #0
 8004d66:	f040 81ed 	bne.w	8005144 <_printf_float+0x450>
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	4638      	mov	r0, r7
 8004d70:	4649      	mov	r1, r9
 8004d72:	f7fb fe1f 	bl	80009b4 <__aeabi_dcmplt>
 8004d76:	b110      	cbz	r0, 8004d7e <_printf_float+0x8a>
 8004d78:	232d      	movs	r3, #45	; 0x2d
 8004d7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d7e:	4b99      	ldr	r3, [pc, #612]	; (8004fe4 <_printf_float+0x2f0>)
 8004d80:	4f99      	ldr	r7, [pc, #612]	; (8004fe8 <_printf_float+0x2f4>)
 8004d82:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004d86:	bf98      	it	ls
 8004d88:	461f      	movls	r7, r3
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	f04f 0900 	mov.w	r9, #0
 8004d90:	6123      	str	r3, [r4, #16]
 8004d92:	f02a 0304 	bic.w	r3, sl, #4
 8004d96:	6023      	str	r3, [r4, #0]
 8004d98:	9600      	str	r6, [sp, #0]
 8004d9a:	465b      	mov	r3, fp
 8004d9c:	aa0f      	add	r2, sp, #60	; 0x3c
 8004d9e:	4621      	mov	r1, r4
 8004da0:	4628      	mov	r0, r5
 8004da2:	f000 f9df 	bl	8005164 <_printf_common>
 8004da6:	3001      	adds	r0, #1
 8004da8:	f040 809a 	bne.w	8004ee0 <_printf_float+0x1ec>
 8004dac:	f04f 30ff 	mov.w	r0, #4294967295
 8004db0:	b011      	add	sp, #68	; 0x44
 8004db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db6:	6862      	ldr	r2, [r4, #4]
 8004db8:	a80e      	add	r0, sp, #56	; 0x38
 8004dba:	1c53      	adds	r3, r2, #1
 8004dbc:	f10d 0e34 	add.w	lr, sp, #52	; 0x34
 8004dc0:	f44a 6380 	orr.w	r3, sl, #1024	; 0x400
 8004dc4:	d141      	bne.n	8004e4a <_printf_float+0x156>
 8004dc6:	2206      	movs	r2, #6
 8004dc8:	6062      	str	r2, [r4, #4]
 8004dca:	2100      	movs	r1, #0
 8004dcc:	6023      	str	r3, [r4, #0]
 8004dce:	9301      	str	r3, [sp, #4]
 8004dd0:	6863      	ldr	r3, [r4, #4]
 8004dd2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8004dd6:	9005      	str	r0, [sp, #20]
 8004dd8:	9202      	str	r2, [sp, #8]
 8004dda:	9300      	str	r3, [sp, #0]
 8004ddc:	463a      	mov	r2, r7
 8004dde:	464b      	mov	r3, r9
 8004de0:	9106      	str	r1, [sp, #24]
 8004de2:	f8cd 8010 	str.w	r8, [sp, #16]
 8004de6:	f8cd e00c 	str.w	lr, [sp, #12]
 8004dea:	4628      	mov	r0, r5
 8004dec:	f7ff fef0 	bl	8004bd0 <__cvt>
 8004df0:	f008 03df 	and.w	r3, r8, #223	; 0xdf
 8004df4:	2b47      	cmp	r3, #71	; 0x47
 8004df6:	4607      	mov	r7, r0
 8004df8:	d109      	bne.n	8004e0e <_printf_float+0x11a>
 8004dfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004dfc:	1cd8      	adds	r0, r3, #3
 8004dfe:	db02      	blt.n	8004e06 <_printf_float+0x112>
 8004e00:	6862      	ldr	r2, [r4, #4]
 8004e02:	4293      	cmp	r3, r2
 8004e04:	dd59      	ble.n	8004eba <_printf_float+0x1c6>
 8004e06:	f1a8 0802 	sub.w	r8, r8, #2
 8004e0a:	fa5f f888 	uxtb.w	r8, r8
 8004e0e:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004e12:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004e14:	d836      	bhi.n	8004e84 <_printf_float+0x190>
 8004e16:	3901      	subs	r1, #1
 8004e18:	4642      	mov	r2, r8
 8004e1a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e1e:	910d      	str	r1, [sp, #52]	; 0x34
 8004e20:	f7ff ff32 	bl	8004c88 <__exponent>
 8004e24:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004e26:	4681      	mov	r9, r0
 8004e28:	1883      	adds	r3, r0, r2
 8004e2a:	2a01      	cmp	r2, #1
 8004e2c:	6123      	str	r3, [r4, #16]
 8004e2e:	dc02      	bgt.n	8004e36 <_printf_float+0x142>
 8004e30:	6822      	ldr	r2, [r4, #0]
 8004e32:	07d1      	lsls	r1, r2, #31
 8004e34:	d501      	bpl.n	8004e3a <_printf_float+0x146>
 8004e36:	3301      	adds	r3, #1
 8004e38:	6123      	str	r3, [r4, #16]
 8004e3a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d0aa      	beq.n	8004d98 <_printf_float+0xa4>
 8004e42:	232d      	movs	r3, #45	; 0x2d
 8004e44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e48:	e7a6      	b.n	8004d98 <_printf_float+0xa4>
 8004e4a:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
 8004e4e:	d002      	beq.n	8004e56 <_printf_float+0x162>
 8004e50:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004e54:	d1b9      	bne.n	8004dca <_printf_float+0xd6>
 8004e56:	b19a      	cbz	r2, 8004e80 <_printf_float+0x18c>
 8004e58:	2100      	movs	r1, #0
 8004e5a:	9106      	str	r1, [sp, #24]
 8004e5c:	f10d 0133 	add.w	r1, sp, #51	; 0x33
 8004e60:	e88d 000c 	stmia.w	sp, {r2, r3}
 8004e64:	6023      	str	r3, [r4, #0]
 8004e66:	9005      	str	r0, [sp, #20]
 8004e68:	463a      	mov	r2, r7
 8004e6a:	f8cd 8010 	str.w	r8, [sp, #16]
 8004e6e:	f8cd e00c 	str.w	lr, [sp, #12]
 8004e72:	9102      	str	r1, [sp, #8]
 8004e74:	464b      	mov	r3, r9
 8004e76:	4628      	mov	r0, r5
 8004e78:	f7ff feaa 	bl	8004bd0 <__cvt>
 8004e7c:	4607      	mov	r7, r0
 8004e7e:	e7bc      	b.n	8004dfa <_printf_float+0x106>
 8004e80:	2201      	movs	r2, #1
 8004e82:	e7a1      	b.n	8004dc8 <_printf_float+0xd4>
 8004e84:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
 8004e88:	d119      	bne.n	8004ebe <_printf_float+0x1ca>
 8004e8a:	2900      	cmp	r1, #0
 8004e8c:	6863      	ldr	r3, [r4, #4]
 8004e8e:	dd0c      	ble.n	8004eaa <_printf_float+0x1b6>
 8004e90:	6121      	str	r1, [r4, #16]
 8004e92:	b913      	cbnz	r3, 8004e9a <_printf_float+0x1a6>
 8004e94:	6822      	ldr	r2, [r4, #0]
 8004e96:	07d2      	lsls	r2, r2, #31
 8004e98:	d502      	bpl.n	8004ea0 <_printf_float+0x1ac>
 8004e9a:	3301      	adds	r3, #1
 8004e9c:	440b      	add	r3, r1
 8004e9e:	6123      	str	r3, [r4, #16]
 8004ea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ea2:	f04f 0900 	mov.w	r9, #0
 8004ea6:	65a3      	str	r3, [r4, #88]	; 0x58
 8004ea8:	e7c7      	b.n	8004e3a <_printf_float+0x146>
 8004eaa:	b913      	cbnz	r3, 8004eb2 <_printf_float+0x1be>
 8004eac:	6822      	ldr	r2, [r4, #0]
 8004eae:	07d0      	lsls	r0, r2, #31
 8004eb0:	d501      	bpl.n	8004eb6 <_printf_float+0x1c2>
 8004eb2:	3302      	adds	r3, #2
 8004eb4:	e7f3      	b.n	8004e9e <_printf_float+0x1aa>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e7f1      	b.n	8004e9e <_printf_float+0x1aa>
 8004eba:	f04f 0867 	mov.w	r8, #103	; 0x67
 8004ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004ec0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	db05      	blt.n	8004ed2 <_printf_float+0x1de>
 8004ec6:	6822      	ldr	r2, [r4, #0]
 8004ec8:	6123      	str	r3, [r4, #16]
 8004eca:	07d1      	lsls	r1, r2, #31
 8004ecc:	d5e8      	bpl.n	8004ea0 <_printf_float+0x1ac>
 8004ece:	3301      	adds	r3, #1
 8004ed0:	e7e5      	b.n	8004e9e <_printf_float+0x1aa>
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	bfcc      	ite	gt
 8004ed6:	2301      	movgt	r3, #1
 8004ed8:	f1c3 0302 	rsble	r3, r3, #2
 8004edc:	4413      	add	r3, r2
 8004ede:	e7de      	b.n	8004e9e <_printf_float+0x1aa>
 8004ee0:	6823      	ldr	r3, [r4, #0]
 8004ee2:	055a      	lsls	r2, r3, #21
 8004ee4:	d407      	bmi.n	8004ef6 <_printf_float+0x202>
 8004ee6:	6923      	ldr	r3, [r4, #16]
 8004ee8:	463a      	mov	r2, r7
 8004eea:	4659      	mov	r1, fp
 8004eec:	4628      	mov	r0, r5
 8004eee:	47b0      	blx	r6
 8004ef0:	3001      	adds	r0, #1
 8004ef2:	d12a      	bne.n	8004f4a <_printf_float+0x256>
 8004ef4:	e75a      	b.n	8004dac <_printf_float+0xb8>
 8004ef6:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
 8004efa:	f240 80dc 	bls.w	80050b6 <_printf_float+0x3c2>
 8004efe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f02:	2200      	movs	r2, #0
 8004f04:	2300      	movs	r3, #0
 8004f06:	f7fb fd4b 	bl	80009a0 <__aeabi_dcmpeq>
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	d039      	beq.n	8004f82 <_printf_float+0x28e>
 8004f0e:	2301      	movs	r3, #1
 8004f10:	4a36      	ldr	r2, [pc, #216]	; (8004fec <_printf_float+0x2f8>)
 8004f12:	4659      	mov	r1, fp
 8004f14:	4628      	mov	r0, r5
 8004f16:	47b0      	blx	r6
 8004f18:	3001      	adds	r0, #1
 8004f1a:	f43f af47 	beq.w	8004dac <_printf_float+0xb8>
 8004f1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004f22:	429a      	cmp	r2, r3
 8004f24:	db02      	blt.n	8004f2c <_printf_float+0x238>
 8004f26:	6823      	ldr	r3, [r4, #0]
 8004f28:	07d8      	lsls	r0, r3, #31
 8004f2a:	d50e      	bpl.n	8004f4a <_printf_float+0x256>
 8004f2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f30:	4659      	mov	r1, fp
 8004f32:	4628      	mov	r0, r5
 8004f34:	47b0      	blx	r6
 8004f36:	3001      	adds	r0, #1
 8004f38:	f43f af38 	beq.w	8004dac <_printf_float+0xb8>
 8004f3c:	2700      	movs	r7, #0
 8004f3e:	f104 081a 	add.w	r8, r4, #26
 8004f42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f44:	3b01      	subs	r3, #1
 8004f46:	429f      	cmp	r7, r3
 8004f48:	db11      	blt.n	8004f6e <_printf_float+0x27a>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	079f      	lsls	r7, r3, #30
 8004f4e:	d508      	bpl.n	8004f62 <_printf_float+0x26e>
 8004f50:	2700      	movs	r7, #0
 8004f52:	f104 0819 	add.w	r8, r4, #25
 8004f56:	68e3      	ldr	r3, [r4, #12]
 8004f58:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004f5a:	1a9b      	subs	r3, r3, r2
 8004f5c:	429f      	cmp	r7, r3
 8004f5e:	f2c0 80e7 	blt.w	8005130 <_printf_float+0x43c>
 8004f62:	68e0      	ldr	r0, [r4, #12]
 8004f64:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f66:	4298      	cmp	r0, r3
 8004f68:	bfb8      	it	lt
 8004f6a:	4618      	movlt	r0, r3
 8004f6c:	e720      	b.n	8004db0 <_printf_float+0xbc>
 8004f6e:	2301      	movs	r3, #1
 8004f70:	4642      	mov	r2, r8
 8004f72:	4659      	mov	r1, fp
 8004f74:	4628      	mov	r0, r5
 8004f76:	47b0      	blx	r6
 8004f78:	3001      	adds	r0, #1
 8004f7a:	f43f af17 	beq.w	8004dac <_printf_float+0xb8>
 8004f7e:	3701      	adds	r7, #1
 8004f80:	e7df      	b.n	8004f42 <_printf_float+0x24e>
 8004f82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	dc33      	bgt.n	8004ff0 <_printf_float+0x2fc>
 8004f88:	2301      	movs	r3, #1
 8004f8a:	4a18      	ldr	r2, [pc, #96]	; (8004fec <_printf_float+0x2f8>)
 8004f8c:	4659      	mov	r1, fp
 8004f8e:	4628      	mov	r0, r5
 8004f90:	47b0      	blx	r6
 8004f92:	3001      	adds	r0, #1
 8004f94:	f43f af0a 	beq.w	8004dac <_printf_float+0xb8>
 8004f98:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004f9a:	b923      	cbnz	r3, 8004fa6 <_printf_float+0x2b2>
 8004f9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004f9e:	b913      	cbnz	r3, 8004fa6 <_printf_float+0x2b2>
 8004fa0:	6823      	ldr	r3, [r4, #0]
 8004fa2:	07d9      	lsls	r1, r3, #31
 8004fa4:	d5d1      	bpl.n	8004f4a <_printf_float+0x256>
 8004fa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004faa:	4659      	mov	r1, fp
 8004fac:	4628      	mov	r0, r5
 8004fae:	47b0      	blx	r6
 8004fb0:	3001      	adds	r0, #1
 8004fb2:	f43f aefb 	beq.w	8004dac <_printf_float+0xb8>
 8004fb6:	f04f 0800 	mov.w	r8, #0
 8004fba:	f104 091a 	add.w	r9, r4, #26
 8004fbe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004fc0:	425b      	negs	r3, r3
 8004fc2:	4598      	cmp	r8, r3
 8004fc4:	db01      	blt.n	8004fca <_printf_float+0x2d6>
 8004fc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004fc8:	e78e      	b.n	8004ee8 <_printf_float+0x1f4>
 8004fca:	2301      	movs	r3, #1
 8004fcc:	464a      	mov	r2, r9
 8004fce:	4659      	mov	r1, fp
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	47b0      	blx	r6
 8004fd4:	3001      	adds	r0, #1
 8004fd6:	f43f aee9 	beq.w	8004dac <_printf_float+0xb8>
 8004fda:	f108 0801 	add.w	r8, r8, #1
 8004fde:	e7ee      	b.n	8004fbe <_printf_float+0x2ca>
 8004fe0:	7fefffff 	.word	0x7fefffff
 8004fe4:	08007220 	.word	0x08007220
 8004fe8:	08007224 	.word	0x08007224
 8004fec:	08007230 	.word	0x08007230
 8004ff0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004ff2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004ff4:	429a      	cmp	r2, r3
 8004ff6:	bfa8      	it	ge
 8004ff8:	461a      	movge	r2, r3
 8004ffa:	2a00      	cmp	r2, #0
 8004ffc:	4690      	mov	r8, r2
 8004ffe:	dc36      	bgt.n	800506e <_printf_float+0x37a>
 8005000:	f04f 0a00 	mov.w	sl, #0
 8005004:	f104 031a 	add.w	r3, r4, #26
 8005008:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 800500c:	930b      	str	r3, [sp, #44]	; 0x2c
 800500e:	f8d4 9058 	ldr.w	r9, [r4, #88]	; 0x58
 8005012:	eba9 0308 	sub.w	r3, r9, r8
 8005016:	459a      	cmp	sl, r3
 8005018:	db31      	blt.n	800507e <_printf_float+0x38a>
 800501a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800501c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800501e:	429a      	cmp	r2, r3
 8005020:	db38      	blt.n	8005094 <_printf_float+0x3a0>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	07da      	lsls	r2, r3, #31
 8005026:	d435      	bmi.n	8005094 <_printf_float+0x3a0>
 8005028:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800502a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800502c:	eba3 0209 	sub.w	r2, r3, r9
 8005030:	eba3 0801 	sub.w	r8, r3, r1
 8005034:	4590      	cmp	r8, r2
 8005036:	bfa8      	it	ge
 8005038:	4690      	movge	r8, r2
 800503a:	f1b8 0f00 	cmp.w	r8, #0
 800503e:	dc31      	bgt.n	80050a4 <_printf_float+0x3b0>
 8005040:	2700      	movs	r7, #0
 8005042:	ea28 78e8 	bic.w	r8, r8, r8, asr #31
 8005046:	f104 091a 	add.w	r9, r4, #26
 800504a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800504c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800504e:	1a9b      	subs	r3, r3, r2
 8005050:	eba3 0308 	sub.w	r3, r3, r8
 8005054:	429f      	cmp	r7, r3
 8005056:	f6bf af78 	bge.w	8004f4a <_printf_float+0x256>
 800505a:	2301      	movs	r3, #1
 800505c:	464a      	mov	r2, r9
 800505e:	4659      	mov	r1, fp
 8005060:	4628      	mov	r0, r5
 8005062:	47b0      	blx	r6
 8005064:	3001      	adds	r0, #1
 8005066:	f43f aea1 	beq.w	8004dac <_printf_float+0xb8>
 800506a:	3701      	adds	r7, #1
 800506c:	e7ed      	b.n	800504a <_printf_float+0x356>
 800506e:	4613      	mov	r3, r2
 8005070:	4659      	mov	r1, fp
 8005072:	463a      	mov	r2, r7
 8005074:	4628      	mov	r0, r5
 8005076:	47b0      	blx	r6
 8005078:	3001      	adds	r0, #1
 800507a:	d1c1      	bne.n	8005000 <_printf_float+0x30c>
 800507c:	e696      	b.n	8004dac <_printf_float+0xb8>
 800507e:	2301      	movs	r3, #1
 8005080:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005082:	4659      	mov	r1, fp
 8005084:	4628      	mov	r0, r5
 8005086:	47b0      	blx	r6
 8005088:	3001      	adds	r0, #1
 800508a:	f43f ae8f 	beq.w	8004dac <_printf_float+0xb8>
 800508e:	f10a 0a01 	add.w	sl, sl, #1
 8005092:	e7bc      	b.n	800500e <_printf_float+0x31a>
 8005094:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005096:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005098:	4659      	mov	r1, fp
 800509a:	4628      	mov	r0, r5
 800509c:	47b0      	blx	r6
 800509e:	3001      	adds	r0, #1
 80050a0:	d1c2      	bne.n	8005028 <_printf_float+0x334>
 80050a2:	e683      	b.n	8004dac <_printf_float+0xb8>
 80050a4:	4643      	mov	r3, r8
 80050a6:	eb07 0209 	add.w	r2, r7, r9
 80050aa:	4659      	mov	r1, fp
 80050ac:	4628      	mov	r0, r5
 80050ae:	47b0      	blx	r6
 80050b0:	3001      	adds	r0, #1
 80050b2:	d1c5      	bne.n	8005040 <_printf_float+0x34c>
 80050b4:	e67a      	b.n	8004dac <_printf_float+0xb8>
 80050b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80050b8:	2a01      	cmp	r2, #1
 80050ba:	dc01      	bgt.n	80050c0 <_printf_float+0x3cc>
 80050bc:	07db      	lsls	r3, r3, #31
 80050be:	d534      	bpl.n	800512a <_printf_float+0x436>
 80050c0:	2301      	movs	r3, #1
 80050c2:	463a      	mov	r2, r7
 80050c4:	4659      	mov	r1, fp
 80050c6:	4628      	mov	r0, r5
 80050c8:	47b0      	blx	r6
 80050ca:	3001      	adds	r0, #1
 80050cc:	f43f ae6e 	beq.w	8004dac <_printf_float+0xb8>
 80050d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80050d4:	4659      	mov	r1, fp
 80050d6:	4628      	mov	r0, r5
 80050d8:	47b0      	blx	r6
 80050da:	3001      	adds	r0, #1
 80050dc:	f43f ae66 	beq.w	8004dac <_printf_float+0xb8>
 80050e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80050e4:	2200      	movs	r2, #0
 80050e6:	2300      	movs	r3, #0
 80050e8:	f7fb fc5a 	bl	80009a0 <__aeabi_dcmpeq>
 80050ec:	b150      	cbz	r0, 8005104 <_printf_float+0x410>
 80050ee:	2700      	movs	r7, #0
 80050f0:	f104 081a 	add.w	r8, r4, #26
 80050f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80050f6:	3b01      	subs	r3, #1
 80050f8:	429f      	cmp	r7, r3
 80050fa:	db0c      	blt.n	8005116 <_printf_float+0x422>
 80050fc:	464b      	mov	r3, r9
 80050fe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005102:	e6f2      	b.n	8004eea <_printf_float+0x1f6>
 8005104:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005106:	1c7a      	adds	r2, r7, #1
 8005108:	3b01      	subs	r3, #1
 800510a:	4659      	mov	r1, fp
 800510c:	4628      	mov	r0, r5
 800510e:	47b0      	blx	r6
 8005110:	3001      	adds	r0, #1
 8005112:	d1f3      	bne.n	80050fc <_printf_float+0x408>
 8005114:	e64a      	b.n	8004dac <_printf_float+0xb8>
 8005116:	2301      	movs	r3, #1
 8005118:	4642      	mov	r2, r8
 800511a:	4659      	mov	r1, fp
 800511c:	4628      	mov	r0, r5
 800511e:	47b0      	blx	r6
 8005120:	3001      	adds	r0, #1
 8005122:	f43f ae43 	beq.w	8004dac <_printf_float+0xb8>
 8005126:	3701      	adds	r7, #1
 8005128:	e7e4      	b.n	80050f4 <_printf_float+0x400>
 800512a:	2301      	movs	r3, #1
 800512c:	463a      	mov	r2, r7
 800512e:	e7ec      	b.n	800510a <_printf_float+0x416>
 8005130:	2301      	movs	r3, #1
 8005132:	4642      	mov	r2, r8
 8005134:	4659      	mov	r1, fp
 8005136:	4628      	mov	r0, r5
 8005138:	47b0      	blx	r6
 800513a:	3001      	adds	r0, #1
 800513c:	f43f ae36 	beq.w	8004dac <_printf_float+0xb8>
 8005140:	3701      	adds	r7, #1
 8005142:	e708      	b.n	8004f56 <_printf_float+0x262>
 8005144:	463a      	mov	r2, r7
 8005146:	464b      	mov	r3, r9
 8005148:	4638      	mov	r0, r7
 800514a:	4649      	mov	r1, r9
 800514c:	f7fb fc5a 	bl	8000a04 <__aeabi_dcmpun>
 8005150:	2800      	cmp	r0, #0
 8005152:	f43f ae30 	beq.w	8004db6 <_printf_float+0xc2>
 8005156:	4b01      	ldr	r3, [pc, #4]	; (800515c <_printf_float+0x468>)
 8005158:	4f01      	ldr	r7, [pc, #4]	; (8005160 <_printf_float+0x46c>)
 800515a:	e612      	b.n	8004d82 <_printf_float+0x8e>
 800515c:	08007228 	.word	0x08007228
 8005160:	0800722c 	.word	0x0800722c

08005164 <_printf_common>:
 8005164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005168:	4691      	mov	r9, r2
 800516a:	461f      	mov	r7, r3
 800516c:	688a      	ldr	r2, [r1, #8]
 800516e:	690b      	ldr	r3, [r1, #16]
 8005170:	4606      	mov	r6, r0
 8005172:	4293      	cmp	r3, r2
 8005174:	bfb8      	it	lt
 8005176:	4613      	movlt	r3, r2
 8005178:	f8c9 3000 	str.w	r3, [r9]
 800517c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005180:	460c      	mov	r4, r1
 8005182:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005186:	b112      	cbz	r2, 800518e <_printf_common+0x2a>
 8005188:	3301      	adds	r3, #1
 800518a:	f8c9 3000 	str.w	r3, [r9]
 800518e:	6823      	ldr	r3, [r4, #0]
 8005190:	0699      	lsls	r1, r3, #26
 8005192:	bf42      	ittt	mi
 8005194:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005198:	3302      	addmi	r3, #2
 800519a:	f8c9 3000 	strmi.w	r3, [r9]
 800519e:	6825      	ldr	r5, [r4, #0]
 80051a0:	f015 0506 	ands.w	r5, r5, #6
 80051a4:	d107      	bne.n	80051b6 <_printf_common+0x52>
 80051a6:	f104 0a19 	add.w	sl, r4, #25
 80051aa:	68e3      	ldr	r3, [r4, #12]
 80051ac:	f8d9 2000 	ldr.w	r2, [r9]
 80051b0:	1a9b      	subs	r3, r3, r2
 80051b2:	429d      	cmp	r5, r3
 80051b4:	db2a      	blt.n	800520c <_printf_common+0xa8>
 80051b6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80051ba:	6822      	ldr	r2, [r4, #0]
 80051bc:	3300      	adds	r3, #0
 80051be:	bf18      	it	ne
 80051c0:	2301      	movne	r3, #1
 80051c2:	0692      	lsls	r2, r2, #26
 80051c4:	d42f      	bmi.n	8005226 <_printf_common+0xc2>
 80051c6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051ca:	4639      	mov	r1, r7
 80051cc:	4630      	mov	r0, r6
 80051ce:	47c0      	blx	r8
 80051d0:	3001      	adds	r0, #1
 80051d2:	d022      	beq.n	800521a <_printf_common+0xb6>
 80051d4:	6823      	ldr	r3, [r4, #0]
 80051d6:	68e5      	ldr	r5, [r4, #12]
 80051d8:	f003 0306 	and.w	r3, r3, #6
 80051dc:	2b04      	cmp	r3, #4
 80051de:	bf18      	it	ne
 80051e0:	2500      	movne	r5, #0
 80051e2:	f8d9 2000 	ldr.w	r2, [r9]
 80051e6:	f04f 0900 	mov.w	r9, #0
 80051ea:	bf08      	it	eq
 80051ec:	1aad      	subeq	r5, r5, r2
 80051ee:	68a3      	ldr	r3, [r4, #8]
 80051f0:	6922      	ldr	r2, [r4, #16]
 80051f2:	bf08      	it	eq
 80051f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051f8:	4293      	cmp	r3, r2
 80051fa:	bfc4      	itt	gt
 80051fc:	1a9b      	subgt	r3, r3, r2
 80051fe:	18ed      	addgt	r5, r5, r3
 8005200:	341a      	adds	r4, #26
 8005202:	454d      	cmp	r5, r9
 8005204:	d11b      	bne.n	800523e <_printf_common+0xda>
 8005206:	2000      	movs	r0, #0
 8005208:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800520c:	2301      	movs	r3, #1
 800520e:	4652      	mov	r2, sl
 8005210:	4639      	mov	r1, r7
 8005212:	4630      	mov	r0, r6
 8005214:	47c0      	blx	r8
 8005216:	3001      	adds	r0, #1
 8005218:	d103      	bne.n	8005222 <_printf_common+0xbe>
 800521a:	f04f 30ff 	mov.w	r0, #4294967295
 800521e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005222:	3501      	adds	r5, #1
 8005224:	e7c1      	b.n	80051aa <_printf_common+0x46>
 8005226:	2030      	movs	r0, #48	; 0x30
 8005228:	18e1      	adds	r1, r4, r3
 800522a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005234:	4422      	add	r2, r4
 8005236:	3302      	adds	r3, #2
 8005238:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800523c:	e7c3      	b.n	80051c6 <_printf_common+0x62>
 800523e:	2301      	movs	r3, #1
 8005240:	4622      	mov	r2, r4
 8005242:	4639      	mov	r1, r7
 8005244:	4630      	mov	r0, r6
 8005246:	47c0      	blx	r8
 8005248:	3001      	adds	r0, #1
 800524a:	d0e6      	beq.n	800521a <_printf_common+0xb6>
 800524c:	f109 0901 	add.w	r9, r9, #1
 8005250:	e7d7      	b.n	8005202 <_printf_common+0x9e>
	...

08005254 <_printf_i>:
 8005254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005258:	4617      	mov	r7, r2
 800525a:	7e0a      	ldrb	r2, [r1, #24]
 800525c:	b085      	sub	sp, #20
 800525e:	2a6e      	cmp	r2, #110	; 0x6e
 8005260:	4698      	mov	r8, r3
 8005262:	4606      	mov	r6, r0
 8005264:	460c      	mov	r4, r1
 8005266:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005268:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800526c:	f000 80bc 	beq.w	80053e8 <_printf_i+0x194>
 8005270:	d81a      	bhi.n	80052a8 <_printf_i+0x54>
 8005272:	2a63      	cmp	r2, #99	; 0x63
 8005274:	d02e      	beq.n	80052d4 <_printf_i+0x80>
 8005276:	d80a      	bhi.n	800528e <_printf_i+0x3a>
 8005278:	2a00      	cmp	r2, #0
 800527a:	f000 80c8 	beq.w	800540e <_printf_i+0x1ba>
 800527e:	2a58      	cmp	r2, #88	; 0x58
 8005280:	f000 808a 	beq.w	8005398 <_printf_i+0x144>
 8005284:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005288:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800528c:	e02a      	b.n	80052e4 <_printf_i+0x90>
 800528e:	2a64      	cmp	r2, #100	; 0x64
 8005290:	d001      	beq.n	8005296 <_printf_i+0x42>
 8005292:	2a69      	cmp	r2, #105	; 0x69
 8005294:	d1f6      	bne.n	8005284 <_printf_i+0x30>
 8005296:	6821      	ldr	r1, [r4, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800529e:	d023      	beq.n	80052e8 <_printf_i+0x94>
 80052a0:	1d11      	adds	r1, r2, #4
 80052a2:	6019      	str	r1, [r3, #0]
 80052a4:	6813      	ldr	r3, [r2, #0]
 80052a6:	e027      	b.n	80052f8 <_printf_i+0xa4>
 80052a8:	2a73      	cmp	r2, #115	; 0x73
 80052aa:	f000 80b4 	beq.w	8005416 <_printf_i+0x1c2>
 80052ae:	d808      	bhi.n	80052c2 <_printf_i+0x6e>
 80052b0:	2a6f      	cmp	r2, #111	; 0x6f
 80052b2:	d02a      	beq.n	800530a <_printf_i+0xb6>
 80052b4:	2a70      	cmp	r2, #112	; 0x70
 80052b6:	d1e5      	bne.n	8005284 <_printf_i+0x30>
 80052b8:	680a      	ldr	r2, [r1, #0]
 80052ba:	f042 0220 	orr.w	r2, r2, #32
 80052be:	600a      	str	r2, [r1, #0]
 80052c0:	e003      	b.n	80052ca <_printf_i+0x76>
 80052c2:	2a75      	cmp	r2, #117	; 0x75
 80052c4:	d021      	beq.n	800530a <_printf_i+0xb6>
 80052c6:	2a78      	cmp	r2, #120	; 0x78
 80052c8:	d1dc      	bne.n	8005284 <_printf_i+0x30>
 80052ca:	2278      	movs	r2, #120	; 0x78
 80052cc:	496f      	ldr	r1, [pc, #444]	; (800548c <_printf_i+0x238>)
 80052ce:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80052d2:	e064      	b.n	800539e <_printf_i+0x14a>
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80052da:	1d11      	adds	r1, r2, #4
 80052dc:	6019      	str	r1, [r3, #0]
 80052de:	6813      	ldr	r3, [r2, #0]
 80052e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80052e4:	2301      	movs	r3, #1
 80052e6:	e0a3      	b.n	8005430 <_printf_i+0x1dc>
 80052e8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80052ec:	f102 0104 	add.w	r1, r2, #4
 80052f0:	6019      	str	r1, [r3, #0]
 80052f2:	d0d7      	beq.n	80052a4 <_printf_i+0x50>
 80052f4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	da03      	bge.n	8005304 <_printf_i+0xb0>
 80052fc:	222d      	movs	r2, #45	; 0x2d
 80052fe:	425b      	negs	r3, r3
 8005300:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8005304:	4962      	ldr	r1, [pc, #392]	; (8005490 <_printf_i+0x23c>)
 8005306:	220a      	movs	r2, #10
 8005308:	e017      	b.n	800533a <_printf_i+0xe6>
 800530a:	6820      	ldr	r0, [r4, #0]
 800530c:	6819      	ldr	r1, [r3, #0]
 800530e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8005312:	d003      	beq.n	800531c <_printf_i+0xc8>
 8005314:	1d08      	adds	r0, r1, #4
 8005316:	6018      	str	r0, [r3, #0]
 8005318:	680b      	ldr	r3, [r1, #0]
 800531a:	e006      	b.n	800532a <_printf_i+0xd6>
 800531c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005320:	f101 0004 	add.w	r0, r1, #4
 8005324:	6018      	str	r0, [r3, #0]
 8005326:	d0f7      	beq.n	8005318 <_printf_i+0xc4>
 8005328:	880b      	ldrh	r3, [r1, #0]
 800532a:	2a6f      	cmp	r2, #111	; 0x6f
 800532c:	bf14      	ite	ne
 800532e:	220a      	movne	r2, #10
 8005330:	2208      	moveq	r2, #8
 8005332:	4957      	ldr	r1, [pc, #348]	; (8005490 <_printf_i+0x23c>)
 8005334:	2000      	movs	r0, #0
 8005336:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800533a:	6865      	ldr	r5, [r4, #4]
 800533c:	2d00      	cmp	r5, #0
 800533e:	60a5      	str	r5, [r4, #8]
 8005340:	f2c0 809c 	blt.w	800547c <_printf_i+0x228>
 8005344:	6820      	ldr	r0, [r4, #0]
 8005346:	f020 0004 	bic.w	r0, r0, #4
 800534a:	6020      	str	r0, [r4, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d13f      	bne.n	80053d0 <_printf_i+0x17c>
 8005350:	2d00      	cmp	r5, #0
 8005352:	f040 8095 	bne.w	8005480 <_printf_i+0x22c>
 8005356:	4675      	mov	r5, lr
 8005358:	2a08      	cmp	r2, #8
 800535a:	d10b      	bne.n	8005374 <_printf_i+0x120>
 800535c:	6823      	ldr	r3, [r4, #0]
 800535e:	07da      	lsls	r2, r3, #31
 8005360:	d508      	bpl.n	8005374 <_printf_i+0x120>
 8005362:	6923      	ldr	r3, [r4, #16]
 8005364:	6862      	ldr	r2, [r4, #4]
 8005366:	429a      	cmp	r2, r3
 8005368:	bfde      	ittt	le
 800536a:	2330      	movle	r3, #48	; 0x30
 800536c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005370:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005374:	ebae 0305 	sub.w	r3, lr, r5
 8005378:	6123      	str	r3, [r4, #16]
 800537a:	f8cd 8000 	str.w	r8, [sp]
 800537e:	463b      	mov	r3, r7
 8005380:	aa03      	add	r2, sp, #12
 8005382:	4621      	mov	r1, r4
 8005384:	4630      	mov	r0, r6
 8005386:	f7ff feed 	bl	8005164 <_printf_common>
 800538a:	3001      	adds	r0, #1
 800538c:	d155      	bne.n	800543a <_printf_i+0x1e6>
 800538e:	f04f 30ff 	mov.w	r0, #4294967295
 8005392:	b005      	add	sp, #20
 8005394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005398:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800539c:	493c      	ldr	r1, [pc, #240]	; (8005490 <_printf_i+0x23c>)
 800539e:	6822      	ldr	r2, [r4, #0]
 80053a0:	6818      	ldr	r0, [r3, #0]
 80053a2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80053a6:	f100 0504 	add.w	r5, r0, #4
 80053aa:	601d      	str	r5, [r3, #0]
 80053ac:	d001      	beq.n	80053b2 <_printf_i+0x15e>
 80053ae:	6803      	ldr	r3, [r0, #0]
 80053b0:	e002      	b.n	80053b8 <_printf_i+0x164>
 80053b2:	0655      	lsls	r5, r2, #25
 80053b4:	d5fb      	bpl.n	80053ae <_printf_i+0x15a>
 80053b6:	8803      	ldrh	r3, [r0, #0]
 80053b8:	07d0      	lsls	r0, r2, #31
 80053ba:	bf44      	itt	mi
 80053bc:	f042 0220 	orrmi.w	r2, r2, #32
 80053c0:	6022      	strmi	r2, [r4, #0]
 80053c2:	b91b      	cbnz	r3, 80053cc <_printf_i+0x178>
 80053c4:	6822      	ldr	r2, [r4, #0]
 80053c6:	f022 0220 	bic.w	r2, r2, #32
 80053ca:	6022      	str	r2, [r4, #0]
 80053cc:	2210      	movs	r2, #16
 80053ce:	e7b1      	b.n	8005334 <_printf_i+0xe0>
 80053d0:	4675      	mov	r5, lr
 80053d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80053d6:	fb02 3310 	mls	r3, r2, r0, r3
 80053da:	5ccb      	ldrb	r3, [r1, r3]
 80053dc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80053e0:	4603      	mov	r3, r0
 80053e2:	2800      	cmp	r0, #0
 80053e4:	d1f5      	bne.n	80053d2 <_printf_i+0x17e>
 80053e6:	e7b7      	b.n	8005358 <_printf_i+0x104>
 80053e8:	6808      	ldr	r0, [r1, #0]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	f010 0f80 	tst.w	r0, #128	; 0x80
 80053f0:	6949      	ldr	r1, [r1, #20]
 80053f2:	d004      	beq.n	80053fe <_printf_i+0x1aa>
 80053f4:	1d10      	adds	r0, r2, #4
 80053f6:	6018      	str	r0, [r3, #0]
 80053f8:	6813      	ldr	r3, [r2, #0]
 80053fa:	6019      	str	r1, [r3, #0]
 80053fc:	e007      	b.n	800540e <_printf_i+0x1ba>
 80053fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005402:	f102 0004 	add.w	r0, r2, #4
 8005406:	6018      	str	r0, [r3, #0]
 8005408:	6813      	ldr	r3, [r2, #0]
 800540a:	d0f6      	beq.n	80053fa <_printf_i+0x1a6>
 800540c:	8019      	strh	r1, [r3, #0]
 800540e:	2300      	movs	r3, #0
 8005410:	4675      	mov	r5, lr
 8005412:	6123      	str	r3, [r4, #16]
 8005414:	e7b1      	b.n	800537a <_printf_i+0x126>
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	1d11      	adds	r1, r2, #4
 800541a:	6019      	str	r1, [r3, #0]
 800541c:	6815      	ldr	r5, [r2, #0]
 800541e:	2100      	movs	r1, #0
 8005420:	6862      	ldr	r2, [r4, #4]
 8005422:	4628      	mov	r0, r5
 8005424:	f000 fed2 	bl	80061cc <memchr>
 8005428:	b108      	cbz	r0, 800542e <_printf_i+0x1da>
 800542a:	1b40      	subs	r0, r0, r5
 800542c:	6060      	str	r0, [r4, #4]
 800542e:	6863      	ldr	r3, [r4, #4]
 8005430:	6123      	str	r3, [r4, #16]
 8005432:	2300      	movs	r3, #0
 8005434:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005438:	e79f      	b.n	800537a <_printf_i+0x126>
 800543a:	6923      	ldr	r3, [r4, #16]
 800543c:	462a      	mov	r2, r5
 800543e:	4639      	mov	r1, r7
 8005440:	4630      	mov	r0, r6
 8005442:	47c0      	blx	r8
 8005444:	3001      	adds	r0, #1
 8005446:	d0a2      	beq.n	800538e <_printf_i+0x13a>
 8005448:	6823      	ldr	r3, [r4, #0]
 800544a:	079b      	lsls	r3, r3, #30
 800544c:	d507      	bpl.n	800545e <_printf_i+0x20a>
 800544e:	2500      	movs	r5, #0
 8005450:	f104 0919 	add.w	r9, r4, #25
 8005454:	68e3      	ldr	r3, [r4, #12]
 8005456:	9a03      	ldr	r2, [sp, #12]
 8005458:	1a9b      	subs	r3, r3, r2
 800545a:	429d      	cmp	r5, r3
 800545c:	db05      	blt.n	800546a <_printf_i+0x216>
 800545e:	68e0      	ldr	r0, [r4, #12]
 8005460:	9b03      	ldr	r3, [sp, #12]
 8005462:	4298      	cmp	r0, r3
 8005464:	bfb8      	it	lt
 8005466:	4618      	movlt	r0, r3
 8005468:	e793      	b.n	8005392 <_printf_i+0x13e>
 800546a:	2301      	movs	r3, #1
 800546c:	464a      	mov	r2, r9
 800546e:	4639      	mov	r1, r7
 8005470:	4630      	mov	r0, r6
 8005472:	47c0      	blx	r8
 8005474:	3001      	adds	r0, #1
 8005476:	d08a      	beq.n	800538e <_printf_i+0x13a>
 8005478:	3501      	adds	r5, #1
 800547a:	e7eb      	b.n	8005454 <_printf_i+0x200>
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1a7      	bne.n	80053d0 <_printf_i+0x17c>
 8005480:	780b      	ldrb	r3, [r1, #0]
 8005482:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005486:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800548a:	e765      	b.n	8005358 <_printf_i+0x104>
 800548c:	08007243 	.word	0x08007243
 8005490:	08007232 	.word	0x08007232

08005494 <siprintf>:
 8005494:	b40e      	push	{r1, r2, r3}
 8005496:	f44f 7102 	mov.w	r1, #520	; 0x208
 800549a:	b500      	push	{lr}
 800549c:	b09c      	sub	sp, #112	; 0x70
 800549e:	f8ad 1014 	strh.w	r1, [sp, #20]
 80054a2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80054a6:	9104      	str	r1, [sp, #16]
 80054a8:	9107      	str	r1, [sp, #28]
 80054aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80054ae:	ab1d      	add	r3, sp, #116	; 0x74
 80054b0:	9002      	str	r0, [sp, #8]
 80054b2:	9006      	str	r0, [sp, #24]
 80054b4:	4808      	ldr	r0, [pc, #32]	; (80054d8 <siprintf+0x44>)
 80054b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80054ba:	f8ad 1016 	strh.w	r1, [sp, #22]
 80054be:	6800      	ldr	r0, [r0, #0]
 80054c0:	a902      	add	r1, sp, #8
 80054c2:	9301      	str	r3, [sp, #4]
 80054c4:	f001 fa80 	bl	80069c8 <_svfiprintf_r>
 80054c8:	2200      	movs	r2, #0
 80054ca:	9b02      	ldr	r3, [sp, #8]
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	b01c      	add	sp, #112	; 0x70
 80054d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80054d4:	b003      	add	sp, #12
 80054d6:	4770      	bx	lr
 80054d8:	20000020 	.word	0x20000020

080054dc <quorem>:
 80054dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e0:	6903      	ldr	r3, [r0, #16]
 80054e2:	690c      	ldr	r4, [r1, #16]
 80054e4:	4680      	mov	r8, r0
 80054e6:	429c      	cmp	r4, r3
 80054e8:	f300 8082 	bgt.w	80055f0 <quorem+0x114>
 80054ec:	3c01      	subs	r4, #1
 80054ee:	f101 0714 	add.w	r7, r1, #20
 80054f2:	f100 0614 	add.w	r6, r0, #20
 80054f6:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 80054fa:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 80054fe:	3501      	adds	r5, #1
 8005500:	fbb0 f5f5 	udiv	r5, r0, r5
 8005504:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8005508:	eb06 030e 	add.w	r3, r6, lr
 800550c:	eb07 090e 	add.w	r9, r7, lr
 8005510:	9301      	str	r3, [sp, #4]
 8005512:	b38d      	cbz	r5, 8005578 <quorem+0x9c>
 8005514:	f04f 0a00 	mov.w	sl, #0
 8005518:	4638      	mov	r0, r7
 800551a:	46b4      	mov	ip, r6
 800551c:	46d3      	mov	fp, sl
 800551e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005522:	b293      	uxth	r3, r2
 8005524:	fb05 a303 	mla	r3, r5, r3, sl
 8005528:	0c12      	lsrs	r2, r2, #16
 800552a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800552e:	fb05 a202 	mla	r2, r5, r2, sl
 8005532:	b29b      	uxth	r3, r3
 8005534:	ebab 0303 	sub.w	r3, fp, r3
 8005538:	f8bc b000 	ldrh.w	fp, [ip]
 800553c:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8005540:	445b      	add	r3, fp
 8005542:	fa1f fb82 	uxth.w	fp, r2
 8005546:	f8dc 2000 	ldr.w	r2, [ip]
 800554a:	4581      	cmp	r9, r0
 800554c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8005550:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005554:	b29b      	uxth	r3, r3
 8005556:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800555a:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800555e:	f84c 3b04 	str.w	r3, [ip], #4
 8005562:	d2dc      	bcs.n	800551e <quorem+0x42>
 8005564:	f856 300e 	ldr.w	r3, [r6, lr]
 8005568:	b933      	cbnz	r3, 8005578 <quorem+0x9c>
 800556a:	9b01      	ldr	r3, [sp, #4]
 800556c:	3b04      	subs	r3, #4
 800556e:	429e      	cmp	r6, r3
 8005570:	461a      	mov	r2, r3
 8005572:	d331      	bcc.n	80055d8 <quorem+0xfc>
 8005574:	f8c8 4010 	str.w	r4, [r8, #16]
 8005578:	4640      	mov	r0, r8
 800557a:	f001 f848 	bl	800660e <__mcmp>
 800557e:	2800      	cmp	r0, #0
 8005580:	db26      	blt.n	80055d0 <quorem+0xf4>
 8005582:	4630      	mov	r0, r6
 8005584:	f04f 0e00 	mov.w	lr, #0
 8005588:	3501      	adds	r5, #1
 800558a:	f857 1b04 	ldr.w	r1, [r7], #4
 800558e:	f8d0 c000 	ldr.w	ip, [r0]
 8005592:	b28b      	uxth	r3, r1
 8005594:	ebae 0303 	sub.w	r3, lr, r3
 8005598:	fa1f f28c 	uxth.w	r2, ip
 800559c:	4413      	add	r3, r2
 800559e:	0c0a      	lsrs	r2, r1, #16
 80055a0:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80055a4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055a8:	b29b      	uxth	r3, r3
 80055aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055ae:	45b9      	cmp	r9, r7
 80055b0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80055b4:	f840 3b04 	str.w	r3, [r0], #4
 80055b8:	d2e7      	bcs.n	800558a <quorem+0xae>
 80055ba:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80055be:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80055c2:	b92a      	cbnz	r2, 80055d0 <quorem+0xf4>
 80055c4:	3b04      	subs	r3, #4
 80055c6:	429e      	cmp	r6, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	d30b      	bcc.n	80055e4 <quorem+0x108>
 80055cc:	f8c8 4010 	str.w	r4, [r8, #16]
 80055d0:	4628      	mov	r0, r5
 80055d2:	b003      	add	sp, #12
 80055d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055d8:	6812      	ldr	r2, [r2, #0]
 80055da:	3b04      	subs	r3, #4
 80055dc:	2a00      	cmp	r2, #0
 80055de:	d1c9      	bne.n	8005574 <quorem+0x98>
 80055e0:	3c01      	subs	r4, #1
 80055e2:	e7c4      	b.n	800556e <quorem+0x92>
 80055e4:	6812      	ldr	r2, [r2, #0]
 80055e6:	3b04      	subs	r3, #4
 80055e8:	2a00      	cmp	r2, #0
 80055ea:	d1ef      	bne.n	80055cc <quorem+0xf0>
 80055ec:	3c01      	subs	r4, #1
 80055ee:	e7ea      	b.n	80055c6 <quorem+0xea>
 80055f0:	2000      	movs	r0, #0
 80055f2:	e7ee      	b.n	80055d2 <quorem+0xf6>
 80055f4:	0000      	movs	r0, r0
	...

080055f8 <_dtoa_r>:
 80055f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055fc:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80055fe:	b095      	sub	sp, #84	; 0x54
 8005600:	4604      	mov	r4, r0
 8005602:	9d21      	ldr	r5, [sp, #132]	; 0x84
 8005604:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005608:	b93e      	cbnz	r6, 800561a <_dtoa_r+0x22>
 800560a:	2010      	movs	r0, #16
 800560c:	f000 fdd6 	bl	80061bc <malloc>
 8005610:	6260      	str	r0, [r4, #36]	; 0x24
 8005612:	6046      	str	r6, [r0, #4]
 8005614:	6086      	str	r6, [r0, #8]
 8005616:	6006      	str	r6, [r0, #0]
 8005618:	60c6      	str	r6, [r0, #12]
 800561a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800561c:	6819      	ldr	r1, [r3, #0]
 800561e:	b151      	cbz	r1, 8005636 <_dtoa_r+0x3e>
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	2301      	movs	r3, #1
 8005624:	4093      	lsls	r3, r2
 8005626:	604a      	str	r2, [r1, #4]
 8005628:	608b      	str	r3, [r1, #8]
 800562a:	4620      	mov	r0, r4
 800562c:	f000 fe1b 	bl	8006266 <_Bfree>
 8005630:	2200      	movs	r2, #0
 8005632:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	9b03      	ldr	r3, [sp, #12]
 8005638:	2b00      	cmp	r3, #0
 800563a:	bfb7      	itett	lt
 800563c:	2301      	movlt	r3, #1
 800563e:	2300      	movge	r3, #0
 8005640:	602b      	strlt	r3, [r5, #0]
 8005642:	9b03      	ldrlt	r3, [sp, #12]
 8005644:	bfae      	itee	ge
 8005646:	602b      	strge	r3, [r5, #0]
 8005648:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800564c:	9303      	strlt	r3, [sp, #12]
 800564e:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005652:	4bab      	ldr	r3, [pc, #684]	; (8005900 <_dtoa_r+0x308>)
 8005654:	ea33 0309 	bics.w	r3, r3, r9
 8005658:	d11b      	bne.n	8005692 <_dtoa_r+0x9a>
 800565a:	f242 730f 	movw	r3, #9999	; 0x270f
 800565e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005660:	6013      	str	r3, [r2, #0]
 8005662:	9b02      	ldr	r3, [sp, #8]
 8005664:	b923      	cbnz	r3, 8005670 <_dtoa_r+0x78>
 8005666:	f3c9 0013 	ubfx	r0, r9, #0, #20
 800566a:	2800      	cmp	r0, #0
 800566c:	f000 8583 	beq.w	8006176 <_dtoa_r+0xb7e>
 8005670:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005672:	b953      	cbnz	r3, 800568a <_dtoa_r+0x92>
 8005674:	4ba3      	ldr	r3, [pc, #652]	; (8005904 <_dtoa_r+0x30c>)
 8005676:	e021      	b.n	80056bc <_dtoa_r+0xc4>
 8005678:	4ba3      	ldr	r3, [pc, #652]	; (8005908 <_dtoa_r+0x310>)
 800567a:	9306      	str	r3, [sp, #24]
 800567c:	3308      	adds	r3, #8
 800567e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	9806      	ldr	r0, [sp, #24]
 8005684:	b015      	add	sp, #84	; 0x54
 8005686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800568a:	4b9e      	ldr	r3, [pc, #632]	; (8005904 <_dtoa_r+0x30c>)
 800568c:	9306      	str	r3, [sp, #24]
 800568e:	3303      	adds	r3, #3
 8005690:	e7f5      	b.n	800567e <_dtoa_r+0x86>
 8005692:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005696:	2200      	movs	r2, #0
 8005698:	2300      	movs	r3, #0
 800569a:	4630      	mov	r0, r6
 800569c:	4639      	mov	r1, r7
 800569e:	f7fb f97f 	bl	80009a0 <__aeabi_dcmpeq>
 80056a2:	4680      	mov	r8, r0
 80056a4:	b160      	cbz	r0, 80056c0 <_dtoa_r+0xc8>
 80056a6:	2301      	movs	r3, #1
 80056a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	f000 855e 	beq.w	8006170 <_dtoa_r+0xb78>
 80056b4:	4b95      	ldr	r3, [pc, #596]	; (800590c <_dtoa_r+0x314>)
 80056b6:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80056b8:	6013      	str	r3, [r2, #0]
 80056ba:	3b01      	subs	r3, #1
 80056bc:	9306      	str	r3, [sp, #24]
 80056be:	e7e0      	b.n	8005682 <_dtoa_r+0x8a>
 80056c0:	ab12      	add	r3, sp, #72	; 0x48
 80056c2:	9301      	str	r3, [sp, #4]
 80056c4:	ab13      	add	r3, sp, #76	; 0x4c
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	4632      	mov	r2, r6
 80056ca:	463b      	mov	r3, r7
 80056cc:	4620      	mov	r0, r4
 80056ce:	f001 f817 	bl	8006700 <__d2b>
 80056d2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80056d6:	4682      	mov	sl, r0
 80056d8:	2d00      	cmp	r5, #0
 80056da:	d07d      	beq.n	80057d8 <_dtoa_r+0x1e0>
 80056dc:	4630      	mov	r0, r6
 80056de:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80056e2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 80056e6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80056ea:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80056ee:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80056f2:	2200      	movs	r2, #0
 80056f4:	4b86      	ldr	r3, [pc, #536]	; (8005910 <_dtoa_r+0x318>)
 80056f6:	f7fa fd37 	bl	8000168 <__aeabi_dsub>
 80056fa:	a37b      	add	r3, pc, #492	; (adr r3, 80058e8 <_dtoa_r+0x2f0>)
 80056fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005700:	f7fa fee6 	bl	80004d0 <__aeabi_dmul>
 8005704:	a37a      	add	r3, pc, #488	; (adr r3, 80058f0 <_dtoa_r+0x2f8>)
 8005706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570a:	f7fa fd2f 	bl	800016c <__adddf3>
 800570e:	4606      	mov	r6, r0
 8005710:	4628      	mov	r0, r5
 8005712:	460f      	mov	r7, r1
 8005714:	f7fa fe76 	bl	8000404 <__aeabi_i2d>
 8005718:	a377      	add	r3, pc, #476	; (adr r3, 80058f8 <_dtoa_r+0x300>)
 800571a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800571e:	f7fa fed7 	bl	80004d0 <__aeabi_dmul>
 8005722:	4602      	mov	r2, r0
 8005724:	460b      	mov	r3, r1
 8005726:	4630      	mov	r0, r6
 8005728:	4639      	mov	r1, r7
 800572a:	f7fa fd1f 	bl	800016c <__adddf3>
 800572e:	4606      	mov	r6, r0
 8005730:	460f      	mov	r7, r1
 8005732:	f7fb f97d 	bl	8000a30 <__aeabi_d2iz>
 8005736:	2200      	movs	r2, #0
 8005738:	4683      	mov	fp, r0
 800573a:	2300      	movs	r3, #0
 800573c:	4630      	mov	r0, r6
 800573e:	4639      	mov	r1, r7
 8005740:	f7fb f938 	bl	80009b4 <__aeabi_dcmplt>
 8005744:	b158      	cbz	r0, 800575e <_dtoa_r+0x166>
 8005746:	4658      	mov	r0, fp
 8005748:	f7fa fe5c 	bl	8000404 <__aeabi_i2d>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4630      	mov	r0, r6
 8005752:	4639      	mov	r1, r7
 8005754:	f7fb f924 	bl	80009a0 <__aeabi_dcmpeq>
 8005758:	b908      	cbnz	r0, 800575e <_dtoa_r+0x166>
 800575a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800575e:	f1bb 0f16 	cmp.w	fp, #22
 8005762:	d858      	bhi.n	8005816 <_dtoa_r+0x21e>
 8005764:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005768:	496a      	ldr	r1, [pc, #424]	; (8005914 <_dtoa_r+0x31c>)
 800576a:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800576e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005772:	f7fb f93d 	bl	80009f0 <__aeabi_dcmpgt>
 8005776:	2800      	cmp	r0, #0
 8005778:	d04f      	beq.n	800581a <_dtoa_r+0x222>
 800577a:	2300      	movs	r3, #0
 800577c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005780:	930d      	str	r3, [sp, #52]	; 0x34
 8005782:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005784:	1b5d      	subs	r5, r3, r5
 8005786:	1e6b      	subs	r3, r5, #1
 8005788:	9307      	str	r3, [sp, #28]
 800578a:	bf43      	ittte	mi
 800578c:	2300      	movmi	r3, #0
 800578e:	f1c5 0801 	rsbmi	r8, r5, #1
 8005792:	9307      	strmi	r3, [sp, #28]
 8005794:	f04f 0800 	movpl.w	r8, #0
 8005798:	f1bb 0f00 	cmp.w	fp, #0
 800579c:	db3f      	blt.n	800581e <_dtoa_r+0x226>
 800579e:	9b07      	ldr	r3, [sp, #28]
 80057a0:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 80057a4:	445b      	add	r3, fp
 80057a6:	9307      	str	r3, [sp, #28]
 80057a8:	2300      	movs	r3, #0
 80057aa:	9308      	str	r3, [sp, #32]
 80057ac:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80057ae:	2b09      	cmp	r3, #9
 80057b0:	f200 80b4 	bhi.w	800591c <_dtoa_r+0x324>
 80057b4:	2b05      	cmp	r3, #5
 80057b6:	bfc4      	itt	gt
 80057b8:	3b04      	subgt	r3, #4
 80057ba:	931e      	strgt	r3, [sp, #120]	; 0x78
 80057bc:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80057be:	bfc8      	it	gt
 80057c0:	2600      	movgt	r6, #0
 80057c2:	f1a3 0302 	sub.w	r3, r3, #2
 80057c6:	bfd8      	it	le
 80057c8:	2601      	movle	r6, #1
 80057ca:	2b03      	cmp	r3, #3
 80057cc:	f200 80b2 	bhi.w	8005934 <_dtoa_r+0x33c>
 80057d0:	e8df f003 	tbb	[pc, r3]
 80057d4:	782d8684 	.word	0x782d8684
 80057d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80057da:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80057dc:	441d      	add	r5, r3
 80057de:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80057e2:	2b20      	cmp	r3, #32
 80057e4:	dd11      	ble.n	800580a <_dtoa_r+0x212>
 80057e6:	9a02      	ldr	r2, [sp, #8]
 80057e8:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80057ec:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 80057f0:	fa22 f000 	lsr.w	r0, r2, r0
 80057f4:	fa09 f303 	lsl.w	r3, r9, r3
 80057f8:	4318      	orrs	r0, r3
 80057fa:	f7fa fdf3 	bl	80003e4 <__aeabi_ui2d>
 80057fe:	2301      	movs	r3, #1
 8005800:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005804:	3d01      	subs	r5, #1
 8005806:	9310      	str	r3, [sp, #64]	; 0x40
 8005808:	e773      	b.n	80056f2 <_dtoa_r+0xfa>
 800580a:	f1c3 0020 	rsb	r0, r3, #32
 800580e:	9b02      	ldr	r3, [sp, #8]
 8005810:	fa03 f000 	lsl.w	r0, r3, r0
 8005814:	e7f1      	b.n	80057fa <_dtoa_r+0x202>
 8005816:	2301      	movs	r3, #1
 8005818:	e7b2      	b.n	8005780 <_dtoa_r+0x188>
 800581a:	900d      	str	r0, [sp, #52]	; 0x34
 800581c:	e7b1      	b.n	8005782 <_dtoa_r+0x18a>
 800581e:	f1cb 0300 	rsb	r3, fp, #0
 8005822:	9308      	str	r3, [sp, #32]
 8005824:	2300      	movs	r3, #0
 8005826:	eba8 080b 	sub.w	r8, r8, fp
 800582a:	930c      	str	r3, [sp, #48]	; 0x30
 800582c:	e7be      	b.n	80057ac <_dtoa_r+0x1b4>
 800582e:	2301      	movs	r3, #1
 8005830:	9309      	str	r3, [sp, #36]	; 0x24
 8005832:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005834:	2b00      	cmp	r3, #0
 8005836:	f340 8080 	ble.w	800593a <_dtoa_r+0x342>
 800583a:	4699      	mov	r9, r3
 800583c:	9304      	str	r3, [sp, #16]
 800583e:	2200      	movs	r2, #0
 8005840:	2104      	movs	r1, #4
 8005842:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8005844:	606a      	str	r2, [r5, #4]
 8005846:	f101 0214 	add.w	r2, r1, #20
 800584a:	429a      	cmp	r2, r3
 800584c:	d97a      	bls.n	8005944 <_dtoa_r+0x34c>
 800584e:	6869      	ldr	r1, [r5, #4]
 8005850:	4620      	mov	r0, r4
 8005852:	f000 fcd4 	bl	80061fe <_Balloc>
 8005856:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005858:	6028      	str	r0, [r5, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f1b9 0f0e 	cmp.w	r9, #14
 8005860:	9306      	str	r3, [sp, #24]
 8005862:	f200 80f0 	bhi.w	8005a46 <_dtoa_r+0x44e>
 8005866:	2e00      	cmp	r6, #0
 8005868:	f000 80ed 	beq.w	8005a46 <_dtoa_r+0x44e>
 800586c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005870:	f1bb 0f00 	cmp.w	fp, #0
 8005874:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8005878:	dd79      	ble.n	800596e <_dtoa_r+0x376>
 800587a:	4a26      	ldr	r2, [pc, #152]	; (8005914 <_dtoa_r+0x31c>)
 800587c:	f00b 030f 	and.w	r3, fp, #15
 8005880:	ea4f 162b 	mov.w	r6, fp, asr #4
 8005884:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005888:	06f0      	lsls	r0, r6, #27
 800588a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800588e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8005892:	d55c      	bpl.n	800594e <_dtoa_r+0x356>
 8005894:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005898:	4b1f      	ldr	r3, [pc, #124]	; (8005918 <_dtoa_r+0x320>)
 800589a:	2503      	movs	r5, #3
 800589c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80058a0:	f7fa ff40 	bl	8000724 <__aeabi_ddiv>
 80058a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058a8:	f006 060f 	and.w	r6, r6, #15
 80058ac:	4f1a      	ldr	r7, [pc, #104]	; (8005918 <_dtoa_r+0x320>)
 80058ae:	2e00      	cmp	r6, #0
 80058b0:	d14f      	bne.n	8005952 <_dtoa_r+0x35a>
 80058b2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80058b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80058ba:	f7fa ff33 	bl	8000724 <__aeabi_ddiv>
 80058be:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80058c2:	e06e      	b.n	80059a2 <_dtoa_r+0x3aa>
 80058c4:	2301      	movs	r3, #1
 80058c6:	9309      	str	r3, [sp, #36]	; 0x24
 80058c8:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80058ca:	445b      	add	r3, fp
 80058cc:	f103 0901 	add.w	r9, r3, #1
 80058d0:	9304      	str	r3, [sp, #16]
 80058d2:	464b      	mov	r3, r9
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	bfb8      	it	lt
 80058d8:	2301      	movlt	r3, #1
 80058da:	e7b0      	b.n	800583e <_dtoa_r+0x246>
 80058dc:	2300      	movs	r3, #0
 80058de:	e7a7      	b.n	8005830 <_dtoa_r+0x238>
 80058e0:	2300      	movs	r3, #0
 80058e2:	e7f0      	b.n	80058c6 <_dtoa_r+0x2ce>
 80058e4:	f3af 8000 	nop.w
 80058e8:	636f4361 	.word	0x636f4361
 80058ec:	3fd287a7 	.word	0x3fd287a7
 80058f0:	8b60c8b3 	.word	0x8b60c8b3
 80058f4:	3fc68a28 	.word	0x3fc68a28
 80058f8:	509f79fb 	.word	0x509f79fb
 80058fc:	3fd34413 	.word	0x3fd34413
 8005900:	7ff00000 	.word	0x7ff00000
 8005904:	0800725d 	.word	0x0800725d
 8005908:	08007254 	.word	0x08007254
 800590c:	08007231 	.word	0x08007231
 8005910:	3ff80000 	.word	0x3ff80000
 8005914:	08007290 	.word	0x08007290
 8005918:	08007268 	.word	0x08007268
 800591c:	2601      	movs	r6, #1
 800591e:	2300      	movs	r3, #0
 8005920:	9609      	str	r6, [sp, #36]	; 0x24
 8005922:	931e      	str	r3, [sp, #120]	; 0x78
 8005924:	f04f 33ff 	mov.w	r3, #4294967295
 8005928:	2200      	movs	r2, #0
 800592a:	9304      	str	r3, [sp, #16]
 800592c:	4699      	mov	r9, r3
 800592e:	2312      	movs	r3, #18
 8005930:	921f      	str	r2, [sp, #124]	; 0x7c
 8005932:	e784      	b.n	800583e <_dtoa_r+0x246>
 8005934:	2301      	movs	r3, #1
 8005936:	9309      	str	r3, [sp, #36]	; 0x24
 8005938:	e7f4      	b.n	8005924 <_dtoa_r+0x32c>
 800593a:	2301      	movs	r3, #1
 800593c:	9304      	str	r3, [sp, #16]
 800593e:	4699      	mov	r9, r3
 8005940:	461a      	mov	r2, r3
 8005942:	e7f5      	b.n	8005930 <_dtoa_r+0x338>
 8005944:	686a      	ldr	r2, [r5, #4]
 8005946:	0049      	lsls	r1, r1, #1
 8005948:	3201      	adds	r2, #1
 800594a:	606a      	str	r2, [r5, #4]
 800594c:	e77b      	b.n	8005846 <_dtoa_r+0x24e>
 800594e:	2502      	movs	r5, #2
 8005950:	e7ac      	b.n	80058ac <_dtoa_r+0x2b4>
 8005952:	07f1      	lsls	r1, r6, #31
 8005954:	d508      	bpl.n	8005968 <_dtoa_r+0x370>
 8005956:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800595a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800595e:	f7fa fdb7 	bl	80004d0 <__aeabi_dmul>
 8005962:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005966:	3501      	adds	r5, #1
 8005968:	1076      	asrs	r6, r6, #1
 800596a:	3708      	adds	r7, #8
 800596c:	e79f      	b.n	80058ae <_dtoa_r+0x2b6>
 800596e:	f000 80a5 	beq.w	8005abc <_dtoa_r+0x4c4>
 8005972:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8005976:	f1cb 0600 	rsb	r6, fp, #0
 800597a:	4ba2      	ldr	r3, [pc, #648]	; (8005c04 <_dtoa_r+0x60c>)
 800597c:	f006 020f 	and.w	r2, r6, #15
 8005980:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005988:	f7fa fda2 	bl	80004d0 <__aeabi_dmul>
 800598c:	2502      	movs	r5, #2
 800598e:	2300      	movs	r3, #0
 8005990:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005994:	4f9c      	ldr	r7, [pc, #624]	; (8005c08 <_dtoa_r+0x610>)
 8005996:	1136      	asrs	r6, r6, #4
 8005998:	2e00      	cmp	r6, #0
 800599a:	f040 8084 	bne.w	8005aa6 <_dtoa_r+0x4ae>
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d18d      	bne.n	80058be <_dtoa_r+0x2c6>
 80059a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	f000 808b 	beq.w	8005ac0 <_dtoa_r+0x4c8>
 80059aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059ae:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80059b2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059b6:	2200      	movs	r2, #0
 80059b8:	4b94      	ldr	r3, [pc, #592]	; (8005c0c <_dtoa_r+0x614>)
 80059ba:	f7fa fffb 	bl	80009b4 <__aeabi_dcmplt>
 80059be:	2800      	cmp	r0, #0
 80059c0:	d07e      	beq.n	8005ac0 <_dtoa_r+0x4c8>
 80059c2:	f1b9 0f00 	cmp.w	r9, #0
 80059c6:	d07b      	beq.n	8005ac0 <_dtoa_r+0x4c8>
 80059c8:	9b04      	ldr	r3, [sp, #16]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	dd37      	ble.n	8005a3e <_dtoa_r+0x446>
 80059ce:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80059d2:	2200      	movs	r2, #0
 80059d4:	4b8e      	ldr	r3, [pc, #568]	; (8005c10 <_dtoa_r+0x618>)
 80059d6:	f7fa fd7b 	bl	80004d0 <__aeabi_dmul>
 80059da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059de:	9e04      	ldr	r6, [sp, #16]
 80059e0:	f10b 37ff 	add.w	r7, fp, #4294967295
 80059e4:	3501      	adds	r5, #1
 80059e6:	4628      	mov	r0, r5
 80059e8:	f7fa fd0c 	bl	8000404 <__aeabi_i2d>
 80059ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80059f0:	f7fa fd6e 	bl	80004d0 <__aeabi_dmul>
 80059f4:	4b87      	ldr	r3, [pc, #540]	; (8005c14 <_dtoa_r+0x61c>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	f7fa fbb8 	bl	800016c <__adddf3>
 80059fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a02:	f1a3 7550 	sub.w	r5, r3, #54525952	; 0x3400000
 8005a06:	950b      	str	r5, [sp, #44]	; 0x2c
 8005a08:	2e00      	cmp	r6, #0
 8005a0a:	d15c      	bne.n	8005ac6 <_dtoa_r+0x4ce>
 8005a0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a10:	2200      	movs	r2, #0
 8005a12:	4b81      	ldr	r3, [pc, #516]	; (8005c18 <_dtoa_r+0x620>)
 8005a14:	f7fa fba8 	bl	8000168 <__aeabi_dsub>
 8005a18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a1a:	462b      	mov	r3, r5
 8005a1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a20:	f7fa ffe6 	bl	80009f0 <__aeabi_dcmpgt>
 8005a24:	2800      	cmp	r0, #0
 8005a26:	f040 82f7 	bne.w	8006018 <_dtoa_r+0xa20>
 8005a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005a30:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8005a34:	f7fa ffbe 	bl	80009b4 <__aeabi_dcmplt>
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	f040 82eb 	bne.w	8006014 <_dtoa_r+0xa1c>
 8005a3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005a42:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005a46:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	f2c0 8150 	blt.w	8005cee <_dtoa_r+0x6f6>
 8005a4e:	f1bb 0f0e 	cmp.w	fp, #14
 8005a52:	f300 814c 	bgt.w	8005cee <_dtoa_r+0x6f6>
 8005a56:	4b6b      	ldr	r3, [pc, #428]	; (8005c04 <_dtoa_r+0x60c>)
 8005a58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005a64:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	f280 80da 	bge.w	8005c20 <_dtoa_r+0x628>
 8005a6c:	f1b9 0f00 	cmp.w	r9, #0
 8005a70:	f300 80d6 	bgt.w	8005c20 <_dtoa_r+0x628>
 8005a74:	f040 82cd 	bne.w	8006012 <_dtoa_r+0xa1a>
 8005a78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	4b66      	ldr	r3, [pc, #408]	; (8005c18 <_dtoa_r+0x620>)
 8005a80:	f7fa fd26 	bl	80004d0 <__aeabi_dmul>
 8005a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005a88:	f7fa ffa8 	bl	80009dc <__aeabi_dcmpge>
 8005a8c:	464e      	mov	r6, r9
 8005a8e:	464f      	mov	r7, r9
 8005a90:	2800      	cmp	r0, #0
 8005a92:	f040 82a4 	bne.w	8005fde <_dtoa_r+0x9e6>
 8005a96:	9b06      	ldr	r3, [sp, #24]
 8005a98:	9a06      	ldr	r2, [sp, #24]
 8005a9a:	1c5d      	adds	r5, r3, #1
 8005a9c:	2331      	movs	r3, #49	; 0x31
 8005a9e:	f10b 0b01 	add.w	fp, fp, #1
 8005aa2:	7013      	strb	r3, [r2, #0]
 8005aa4:	e29f      	b.n	8005fe6 <_dtoa_r+0x9ee>
 8005aa6:	07f2      	lsls	r2, r6, #31
 8005aa8:	d505      	bpl.n	8005ab6 <_dtoa_r+0x4be>
 8005aaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005aae:	f7fa fd0f 	bl	80004d0 <__aeabi_dmul>
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	3501      	adds	r5, #1
 8005ab6:	1076      	asrs	r6, r6, #1
 8005ab8:	3708      	adds	r7, #8
 8005aba:	e76d      	b.n	8005998 <_dtoa_r+0x3a0>
 8005abc:	2502      	movs	r5, #2
 8005abe:	e770      	b.n	80059a2 <_dtoa_r+0x3aa>
 8005ac0:	465f      	mov	r7, fp
 8005ac2:	464e      	mov	r6, r9
 8005ac4:	e78f      	b.n	80059e6 <_dtoa_r+0x3ee>
 8005ac6:	9a06      	ldr	r2, [sp, #24]
 8005ac8:	4b4e      	ldr	r3, [pc, #312]	; (8005c04 <_dtoa_r+0x60c>)
 8005aca:	4432      	add	r2, r6
 8005acc:	9211      	str	r2, [sp, #68]	; 0x44
 8005ace:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ad0:	1e71      	subs	r1, r6, #1
 8005ad2:	2a00      	cmp	r2, #0
 8005ad4:	d048      	beq.n	8005b68 <_dtoa_r+0x570>
 8005ad6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8005ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ade:	2000      	movs	r0, #0
 8005ae0:	494e      	ldr	r1, [pc, #312]	; (8005c1c <_dtoa_r+0x624>)
 8005ae2:	f7fa fe1f 	bl	8000724 <__aeabi_ddiv>
 8005ae6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005aea:	f7fa fb3d 	bl	8000168 <__aeabi_dsub>
 8005aee:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005af2:	9d06      	ldr	r5, [sp, #24]
 8005af4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005af8:	f7fa ff9a 	bl	8000a30 <__aeabi_d2iz>
 8005afc:	4606      	mov	r6, r0
 8005afe:	f7fa fc81 	bl	8000404 <__aeabi_i2d>
 8005b02:	4602      	mov	r2, r0
 8005b04:	460b      	mov	r3, r1
 8005b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b0a:	f7fa fb2d 	bl	8000168 <__aeabi_dsub>
 8005b0e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b12:	3630      	adds	r6, #48	; 0x30
 8005b14:	f805 6b01 	strb.w	r6, [r5], #1
 8005b18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b1c:	f7fa ff4a 	bl	80009b4 <__aeabi_dcmplt>
 8005b20:	2800      	cmp	r0, #0
 8005b22:	d164      	bne.n	8005bee <_dtoa_r+0x5f6>
 8005b24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b28:	2000      	movs	r0, #0
 8005b2a:	4938      	ldr	r1, [pc, #224]	; (8005c0c <_dtoa_r+0x614>)
 8005b2c:	f7fa fb1c 	bl	8000168 <__aeabi_dsub>
 8005b30:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b34:	f7fa ff3e 	bl	80009b4 <__aeabi_dcmplt>
 8005b38:	2800      	cmp	r0, #0
 8005b3a:	f040 80b9 	bne.w	8005cb0 <_dtoa_r+0x6b8>
 8005b3e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b40:	429d      	cmp	r5, r3
 8005b42:	f43f af7c 	beq.w	8005a3e <_dtoa_r+0x446>
 8005b46:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	4b30      	ldr	r3, [pc, #192]	; (8005c10 <_dtoa_r+0x618>)
 8005b4e:	f7fa fcbf 	bl	80004d0 <__aeabi_dmul>
 8005b52:	2200      	movs	r2, #0
 8005b54:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005b58:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b5c:	4b2c      	ldr	r3, [pc, #176]	; (8005c10 <_dtoa_r+0x618>)
 8005b5e:	f7fa fcb7 	bl	80004d0 <__aeabi_dmul>
 8005b62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b66:	e7c5      	b.n	8005af4 <_dtoa_r+0x4fc>
 8005b68:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8005b6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005b70:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005b74:	f7fa fcac 	bl	80004d0 <__aeabi_dmul>
 8005b78:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005b7c:	9d06      	ldr	r5, [sp, #24]
 8005b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b82:	f7fa ff55 	bl	8000a30 <__aeabi_d2iz>
 8005b86:	4606      	mov	r6, r0
 8005b88:	f7fa fc3c 	bl	8000404 <__aeabi_i2d>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	460b      	mov	r3, r1
 8005b90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b94:	f7fa fae8 	bl	8000168 <__aeabi_dsub>
 8005b98:	3630      	adds	r6, #48	; 0x30
 8005b9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b9c:	f805 6b01 	strb.w	r6, [r5], #1
 8005ba0:	42ab      	cmp	r3, r5
 8005ba2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ba6:	f04f 0200 	mov.w	r2, #0
 8005baa:	d124      	bne.n	8005bf6 <_dtoa_r+0x5fe>
 8005bac:	4b1b      	ldr	r3, [pc, #108]	; (8005c1c <_dtoa_r+0x624>)
 8005bae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005bb2:	f7fa fadb 	bl	800016c <__adddf3>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bbe:	f7fa ff17 	bl	80009f0 <__aeabi_dcmpgt>
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	d174      	bne.n	8005cb0 <_dtoa_r+0x6b8>
 8005bc6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005bca:	2000      	movs	r0, #0
 8005bcc:	4913      	ldr	r1, [pc, #76]	; (8005c1c <_dtoa_r+0x624>)
 8005bce:	f7fa facb 	bl	8000168 <__aeabi_dsub>
 8005bd2:	4602      	mov	r2, r0
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bda:	f7fa feeb 	bl	80009b4 <__aeabi_dcmplt>
 8005bde:	2800      	cmp	r0, #0
 8005be0:	f43f af2d 	beq.w	8005a3e <_dtoa_r+0x446>
 8005be4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005be8:	1e6a      	subs	r2, r5, #1
 8005bea:	2b30      	cmp	r3, #48	; 0x30
 8005bec:	d001      	beq.n	8005bf2 <_dtoa_r+0x5fa>
 8005bee:	46bb      	mov	fp, r7
 8005bf0:	e04d      	b.n	8005c8e <_dtoa_r+0x696>
 8005bf2:	4615      	mov	r5, r2
 8005bf4:	e7f6      	b.n	8005be4 <_dtoa_r+0x5ec>
 8005bf6:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <_dtoa_r+0x618>)
 8005bf8:	f7fa fc6a 	bl	80004d0 <__aeabi_dmul>
 8005bfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005c00:	e7bd      	b.n	8005b7e <_dtoa_r+0x586>
 8005c02:	bf00      	nop
 8005c04:	08007290 	.word	0x08007290
 8005c08:	08007268 	.word	0x08007268
 8005c0c:	3ff00000 	.word	0x3ff00000
 8005c10:	40240000 	.word	0x40240000
 8005c14:	401c0000 	.word	0x401c0000
 8005c18:	40140000 	.word	0x40140000
 8005c1c:	3fe00000 	.word	0x3fe00000
 8005c20:	9d06      	ldr	r5, [sp, #24]
 8005c22:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005c26:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c2a:	4630      	mov	r0, r6
 8005c2c:	4639      	mov	r1, r7
 8005c2e:	f7fa fd79 	bl	8000724 <__aeabi_ddiv>
 8005c32:	f7fa fefd 	bl	8000a30 <__aeabi_d2iz>
 8005c36:	4680      	mov	r8, r0
 8005c38:	f7fa fbe4 	bl	8000404 <__aeabi_i2d>
 8005c3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c40:	f7fa fc46 	bl	80004d0 <__aeabi_dmul>
 8005c44:	4602      	mov	r2, r0
 8005c46:	460b      	mov	r3, r1
 8005c48:	4630      	mov	r0, r6
 8005c4a:	4639      	mov	r1, r7
 8005c4c:	f7fa fa8c 	bl	8000168 <__aeabi_dsub>
 8005c50:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8005c54:	f805 6b01 	strb.w	r6, [r5], #1
 8005c58:	9e06      	ldr	r6, [sp, #24]
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	1bae      	subs	r6, r5, r6
 8005c5e:	45b1      	cmp	r9, r6
 8005c60:	460b      	mov	r3, r1
 8005c62:	d137      	bne.n	8005cd4 <_dtoa_r+0x6dc>
 8005c64:	f7fa fa82 	bl	800016c <__adddf3>
 8005c68:	4606      	mov	r6, r0
 8005c6a:	460f      	mov	r7, r1
 8005c6c:	4602      	mov	r2, r0
 8005c6e:	460b      	mov	r3, r1
 8005c70:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c74:	f7fa fe9e 	bl	80009b4 <__aeabi_dcmplt>
 8005c78:	b9c8      	cbnz	r0, 8005cae <_dtoa_r+0x6b6>
 8005c7a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005c7e:	4632      	mov	r2, r6
 8005c80:	463b      	mov	r3, r7
 8005c82:	f7fa fe8d 	bl	80009a0 <__aeabi_dcmpeq>
 8005c86:	b110      	cbz	r0, 8005c8e <_dtoa_r+0x696>
 8005c88:	f018 0f01 	tst.w	r8, #1
 8005c8c:	d10f      	bne.n	8005cae <_dtoa_r+0x6b6>
 8005c8e:	4651      	mov	r1, sl
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 fae8 	bl	8006266 <_Bfree>
 8005c96:	2300      	movs	r3, #0
 8005c98:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005c9a:	702b      	strb	r3, [r5, #0]
 8005c9c:	f10b 0301 	add.w	r3, fp, #1
 8005ca0:	6013      	str	r3, [r2, #0]
 8005ca2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	f43f acec 	beq.w	8005682 <_dtoa_r+0x8a>
 8005caa:	601d      	str	r5, [r3, #0]
 8005cac:	e4e9      	b.n	8005682 <_dtoa_r+0x8a>
 8005cae:	465f      	mov	r7, fp
 8005cb0:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005cb4:	1e6b      	subs	r3, r5, #1
 8005cb6:	2a39      	cmp	r2, #57	; 0x39
 8005cb8:	d106      	bne.n	8005cc8 <_dtoa_r+0x6d0>
 8005cba:	9a06      	ldr	r2, [sp, #24]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d107      	bne.n	8005cd0 <_dtoa_r+0x6d8>
 8005cc0:	2330      	movs	r3, #48	; 0x30
 8005cc2:	7013      	strb	r3, [r2, #0]
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	3701      	adds	r7, #1
 8005cc8:	781a      	ldrb	r2, [r3, #0]
 8005cca:	3201      	adds	r2, #1
 8005ccc:	701a      	strb	r2, [r3, #0]
 8005cce:	e78e      	b.n	8005bee <_dtoa_r+0x5f6>
 8005cd0:	461d      	mov	r5, r3
 8005cd2:	e7ed      	b.n	8005cb0 <_dtoa_r+0x6b8>
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	4bb5      	ldr	r3, [pc, #724]	; (8005fac <_dtoa_r+0x9b4>)
 8005cd8:	f7fa fbfa 	bl	80004d0 <__aeabi_dmul>
 8005cdc:	2200      	movs	r2, #0
 8005cde:	2300      	movs	r3, #0
 8005ce0:	4606      	mov	r6, r0
 8005ce2:	460f      	mov	r7, r1
 8005ce4:	f7fa fe5c 	bl	80009a0 <__aeabi_dcmpeq>
 8005ce8:	2800      	cmp	r0, #0
 8005cea:	d09c      	beq.n	8005c26 <_dtoa_r+0x62e>
 8005cec:	e7cf      	b.n	8005c8e <_dtoa_r+0x696>
 8005cee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005cf0:	2a00      	cmp	r2, #0
 8005cf2:	f000 8129 	beq.w	8005f48 <_dtoa_r+0x950>
 8005cf6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005cf8:	2a01      	cmp	r2, #1
 8005cfa:	f300 810e 	bgt.w	8005f1a <_dtoa_r+0x922>
 8005cfe:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005d00:	2a00      	cmp	r2, #0
 8005d02:	f000 8106 	beq.w	8005f12 <_dtoa_r+0x91a>
 8005d06:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d0a:	4645      	mov	r5, r8
 8005d0c:	9e08      	ldr	r6, [sp, #32]
 8005d0e:	9a07      	ldr	r2, [sp, #28]
 8005d10:	2101      	movs	r1, #1
 8005d12:	441a      	add	r2, r3
 8005d14:	4620      	mov	r0, r4
 8005d16:	4498      	add	r8, r3
 8005d18:	9207      	str	r2, [sp, #28]
 8005d1a:	f000 fb44 	bl	80063a6 <__i2b>
 8005d1e:	4607      	mov	r7, r0
 8005d20:	2d00      	cmp	r5, #0
 8005d22:	dd0b      	ble.n	8005d3c <_dtoa_r+0x744>
 8005d24:	9b07      	ldr	r3, [sp, #28]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	dd08      	ble.n	8005d3c <_dtoa_r+0x744>
 8005d2a:	42ab      	cmp	r3, r5
 8005d2c:	bfa8      	it	ge
 8005d2e:	462b      	movge	r3, r5
 8005d30:	9a07      	ldr	r2, [sp, #28]
 8005d32:	eba8 0803 	sub.w	r8, r8, r3
 8005d36:	1aed      	subs	r5, r5, r3
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	9307      	str	r3, [sp, #28]
 8005d3c:	9b08      	ldr	r3, [sp, #32]
 8005d3e:	b1fb      	cbz	r3, 8005d80 <_dtoa_r+0x788>
 8005d40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f000 8104 	beq.w	8005f50 <_dtoa_r+0x958>
 8005d48:	2e00      	cmp	r6, #0
 8005d4a:	dd11      	ble.n	8005d70 <_dtoa_r+0x778>
 8005d4c:	4639      	mov	r1, r7
 8005d4e:	4632      	mov	r2, r6
 8005d50:	4620      	mov	r0, r4
 8005d52:	f000 fbbd 	bl	80064d0 <__pow5mult>
 8005d56:	4652      	mov	r2, sl
 8005d58:	4601      	mov	r1, r0
 8005d5a:	4607      	mov	r7, r0
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	f000 fb2b 	bl	80063b8 <__multiply>
 8005d62:	4651      	mov	r1, sl
 8005d64:	900a      	str	r0, [sp, #40]	; 0x28
 8005d66:	4620      	mov	r0, r4
 8005d68:	f000 fa7d 	bl	8006266 <_Bfree>
 8005d6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d6e:	469a      	mov	sl, r3
 8005d70:	9b08      	ldr	r3, [sp, #32]
 8005d72:	1b9a      	subs	r2, r3, r6
 8005d74:	d004      	beq.n	8005d80 <_dtoa_r+0x788>
 8005d76:	4651      	mov	r1, sl
 8005d78:	4620      	mov	r0, r4
 8005d7a:	f000 fba9 	bl	80064d0 <__pow5mult>
 8005d7e:	4682      	mov	sl, r0
 8005d80:	2101      	movs	r1, #1
 8005d82:	4620      	mov	r0, r4
 8005d84:	f000 fb0f 	bl	80063a6 <__i2b>
 8005d88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d8a:	4606      	mov	r6, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	f340 80e1 	ble.w	8005f54 <_dtoa_r+0x95c>
 8005d92:	461a      	mov	r2, r3
 8005d94:	4601      	mov	r1, r0
 8005d96:	4620      	mov	r0, r4
 8005d98:	f000 fb9a 	bl	80064d0 <__pow5mult>
 8005d9c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005d9e:	4606      	mov	r6, r0
 8005da0:	2b01      	cmp	r3, #1
 8005da2:	f340 80da 	ble.w	8005f5a <_dtoa_r+0x962>
 8005da6:	2300      	movs	r3, #0
 8005da8:	9308      	str	r3, [sp, #32]
 8005daa:	6933      	ldr	r3, [r6, #16]
 8005dac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005db0:	6918      	ldr	r0, [r3, #16]
 8005db2:	f000 faaa 	bl	800630a <__hi0bits>
 8005db6:	f1c0 0020 	rsb	r0, r0, #32
 8005dba:	9b07      	ldr	r3, [sp, #28]
 8005dbc:	4418      	add	r0, r3
 8005dbe:	f010 001f 	ands.w	r0, r0, #31
 8005dc2:	f000 80f0 	beq.w	8005fa6 <_dtoa_r+0x9ae>
 8005dc6:	f1c0 0320 	rsb	r3, r0, #32
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	f340 80e2 	ble.w	8005f94 <_dtoa_r+0x99c>
 8005dd0:	9b07      	ldr	r3, [sp, #28]
 8005dd2:	f1c0 001c 	rsb	r0, r0, #28
 8005dd6:	4480      	add	r8, r0
 8005dd8:	4405      	add	r5, r0
 8005dda:	4403      	add	r3, r0
 8005ddc:	9307      	str	r3, [sp, #28]
 8005dde:	f1b8 0f00 	cmp.w	r8, #0
 8005de2:	dd05      	ble.n	8005df0 <_dtoa_r+0x7f8>
 8005de4:	4651      	mov	r1, sl
 8005de6:	4642      	mov	r2, r8
 8005de8:	4620      	mov	r0, r4
 8005dea:	f000 fbbf 	bl	800656c <__lshift>
 8005dee:	4682      	mov	sl, r0
 8005df0:	9b07      	ldr	r3, [sp, #28]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	dd05      	ble.n	8005e02 <_dtoa_r+0x80a>
 8005df6:	4631      	mov	r1, r6
 8005df8:	461a      	mov	r2, r3
 8005dfa:	4620      	mov	r0, r4
 8005dfc:	f000 fbb6 	bl	800656c <__lshift>
 8005e00:	4606      	mov	r6, r0
 8005e02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	f000 80d3 	beq.w	8005fb0 <_dtoa_r+0x9b8>
 8005e0a:	4631      	mov	r1, r6
 8005e0c:	4650      	mov	r0, sl
 8005e0e:	f000 fbfe 	bl	800660e <__mcmp>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	f280 80cc 	bge.w	8005fb0 <_dtoa_r+0x9b8>
 8005e18:	2300      	movs	r3, #0
 8005e1a:	4651      	mov	r1, sl
 8005e1c:	220a      	movs	r2, #10
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f000 fa38 	bl	8006294 <__multadd>
 8005e24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e26:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005e2a:	4682      	mov	sl, r0
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	f000 81a9 	beq.w	8006184 <_dtoa_r+0xb8c>
 8005e32:	2300      	movs	r3, #0
 8005e34:	4639      	mov	r1, r7
 8005e36:	220a      	movs	r2, #10
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f000 fa2b 	bl	8006294 <__multadd>
 8005e3e:	9b04      	ldr	r3, [sp, #16]
 8005e40:	4607      	mov	r7, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	dc03      	bgt.n	8005e4e <_dtoa_r+0x856>
 8005e46:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	f300 80b9 	bgt.w	8005fc0 <_dtoa_r+0x9c8>
 8005e4e:	2d00      	cmp	r5, #0
 8005e50:	dd05      	ble.n	8005e5e <_dtoa_r+0x866>
 8005e52:	4639      	mov	r1, r7
 8005e54:	462a      	mov	r2, r5
 8005e56:	4620      	mov	r0, r4
 8005e58:	f000 fb88 	bl	800656c <__lshift>
 8005e5c:	4607      	mov	r7, r0
 8005e5e:	9b08      	ldr	r3, [sp, #32]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f000 8110 	beq.w	8006086 <_dtoa_r+0xa8e>
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	4620      	mov	r0, r4
 8005e6a:	f000 f9c8 	bl	80061fe <_Balloc>
 8005e6e:	4605      	mov	r5, r0
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	f107 010c 	add.w	r1, r7, #12
 8005e76:	3202      	adds	r2, #2
 8005e78:	0092      	lsls	r2, r2, #2
 8005e7a:	300c      	adds	r0, #12
 8005e7c:	f000 f9b4 	bl	80061e8 <memcpy>
 8005e80:	2201      	movs	r2, #1
 8005e82:	4629      	mov	r1, r5
 8005e84:	4620      	mov	r0, r4
 8005e86:	f000 fb71 	bl	800656c <__lshift>
 8005e8a:	9707      	str	r7, [sp, #28]
 8005e8c:	4607      	mov	r7, r0
 8005e8e:	9b02      	ldr	r3, [sp, #8]
 8005e90:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005e94:	f003 0301 	and.w	r3, r3, #1
 8005e98:	9308      	str	r3, [sp, #32]
 8005e9a:	4631      	mov	r1, r6
 8005e9c:	4650      	mov	r0, sl
 8005e9e:	f7ff fb1d 	bl	80054dc <quorem>
 8005ea2:	9907      	ldr	r1, [sp, #28]
 8005ea4:	4605      	mov	r5, r0
 8005ea6:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005eaa:	4650      	mov	r0, sl
 8005eac:	f000 fbaf 	bl	800660e <__mcmp>
 8005eb0:	463a      	mov	r2, r7
 8005eb2:	9002      	str	r0, [sp, #8]
 8005eb4:	4631      	mov	r1, r6
 8005eb6:	4620      	mov	r0, r4
 8005eb8:	f000 fbc3 	bl	8006642 <__mdiff>
 8005ebc:	68c3      	ldr	r3, [r0, #12]
 8005ebe:	4602      	mov	r2, r0
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f040 80e2 	bne.w	800608a <_dtoa_r+0xa92>
 8005ec6:	4601      	mov	r1, r0
 8005ec8:	9009      	str	r0, [sp, #36]	; 0x24
 8005eca:	4650      	mov	r0, sl
 8005ecc:	f000 fb9f 	bl	800660e <__mcmp>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005ed4:	4611      	mov	r1, r2
 8005ed6:	4620      	mov	r0, r4
 8005ed8:	9309      	str	r3, [sp, #36]	; 0x24
 8005eda:	f000 f9c4 	bl	8006266 <_Bfree>
 8005ede:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	f040 80d4 	bne.w	800608e <_dtoa_r+0xa96>
 8005ee6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8005ee8:	2a00      	cmp	r2, #0
 8005eea:	f040 80d0 	bne.w	800608e <_dtoa_r+0xa96>
 8005eee:	9a08      	ldr	r2, [sp, #32]
 8005ef0:	2a00      	cmp	r2, #0
 8005ef2:	f040 80cc 	bne.w	800608e <_dtoa_r+0xa96>
 8005ef6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005efa:	f000 80e8 	beq.w	80060ce <_dtoa_r+0xad6>
 8005efe:	9b02      	ldr	r3, [sp, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	dd01      	ble.n	8005f08 <_dtoa_r+0x910>
 8005f04:	f105 0931 	add.w	r9, r5, #49	; 0x31
 8005f08:	f108 0501 	add.w	r5, r8, #1
 8005f0c:	f888 9000 	strb.w	r9, [r8]
 8005f10:	e06b      	b.n	8005fea <_dtoa_r+0x9f2>
 8005f12:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005f14:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f18:	e6f7      	b.n	8005d0a <_dtoa_r+0x712>
 8005f1a:	9b08      	ldr	r3, [sp, #32]
 8005f1c:	f109 36ff 	add.w	r6, r9, #4294967295
 8005f20:	42b3      	cmp	r3, r6
 8005f22:	bfb7      	itett	lt
 8005f24:	9b08      	ldrlt	r3, [sp, #32]
 8005f26:	1b9e      	subge	r6, r3, r6
 8005f28:	1af2      	sublt	r2, r6, r3
 8005f2a:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005f2c:	bfbf      	itttt	lt
 8005f2e:	9608      	strlt	r6, [sp, #32]
 8005f30:	189b      	addlt	r3, r3, r2
 8005f32:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005f34:	2600      	movlt	r6, #0
 8005f36:	f1b9 0f00 	cmp.w	r9, #0
 8005f3a:	bfb9      	ittee	lt
 8005f3c:	eba8 0509 	sublt.w	r5, r8, r9
 8005f40:	2300      	movlt	r3, #0
 8005f42:	4645      	movge	r5, r8
 8005f44:	464b      	movge	r3, r9
 8005f46:	e6e2      	b.n	8005d0e <_dtoa_r+0x716>
 8005f48:	9e08      	ldr	r6, [sp, #32]
 8005f4a:	4645      	mov	r5, r8
 8005f4c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005f4e:	e6e7      	b.n	8005d20 <_dtoa_r+0x728>
 8005f50:	9a08      	ldr	r2, [sp, #32]
 8005f52:	e710      	b.n	8005d76 <_dtoa_r+0x77e>
 8005f54:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	dc18      	bgt.n	8005f8c <_dtoa_r+0x994>
 8005f5a:	9b02      	ldr	r3, [sp, #8]
 8005f5c:	b9b3      	cbnz	r3, 8005f8c <_dtoa_r+0x994>
 8005f5e:	9b03      	ldr	r3, [sp, #12]
 8005f60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f64:	b9a3      	cbnz	r3, 8005f90 <_dtoa_r+0x998>
 8005f66:	9b03      	ldr	r3, [sp, #12]
 8005f68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f6c:	0d1b      	lsrs	r3, r3, #20
 8005f6e:	051b      	lsls	r3, r3, #20
 8005f70:	b12b      	cbz	r3, 8005f7e <_dtoa_r+0x986>
 8005f72:	9b07      	ldr	r3, [sp, #28]
 8005f74:	f108 0801 	add.w	r8, r8, #1
 8005f78:	3301      	adds	r3, #1
 8005f7a:	9307      	str	r3, [sp, #28]
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	9308      	str	r3, [sp, #32]
 8005f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	f47f af11 	bne.w	8005daa <_dtoa_r+0x7b2>
 8005f88:	2001      	movs	r0, #1
 8005f8a:	e716      	b.n	8005dba <_dtoa_r+0x7c2>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	e7f6      	b.n	8005f7e <_dtoa_r+0x986>
 8005f90:	9b02      	ldr	r3, [sp, #8]
 8005f92:	e7f4      	b.n	8005f7e <_dtoa_r+0x986>
 8005f94:	f43f af23 	beq.w	8005dde <_dtoa_r+0x7e6>
 8005f98:	9a07      	ldr	r2, [sp, #28]
 8005f9a:	331c      	adds	r3, #28
 8005f9c:	441a      	add	r2, r3
 8005f9e:	4498      	add	r8, r3
 8005fa0:	441d      	add	r5, r3
 8005fa2:	4613      	mov	r3, r2
 8005fa4:	e71a      	b.n	8005ddc <_dtoa_r+0x7e4>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	e7f6      	b.n	8005f98 <_dtoa_r+0x9a0>
 8005faa:	bf00      	nop
 8005fac:	40240000 	.word	0x40240000
 8005fb0:	f1b9 0f00 	cmp.w	r9, #0
 8005fb4:	dc33      	bgt.n	800601e <_dtoa_r+0xa26>
 8005fb6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005fb8:	2b02      	cmp	r3, #2
 8005fba:	dd30      	ble.n	800601e <_dtoa_r+0xa26>
 8005fbc:	f8cd 9010 	str.w	r9, [sp, #16]
 8005fc0:	9b04      	ldr	r3, [sp, #16]
 8005fc2:	b963      	cbnz	r3, 8005fde <_dtoa_r+0x9e6>
 8005fc4:	4631      	mov	r1, r6
 8005fc6:	2205      	movs	r2, #5
 8005fc8:	4620      	mov	r0, r4
 8005fca:	f000 f963 	bl	8006294 <__multadd>
 8005fce:	4601      	mov	r1, r0
 8005fd0:	4606      	mov	r6, r0
 8005fd2:	4650      	mov	r0, sl
 8005fd4:	f000 fb1b 	bl	800660e <__mcmp>
 8005fd8:	2800      	cmp	r0, #0
 8005fda:	f73f ad5c 	bgt.w	8005a96 <_dtoa_r+0x49e>
 8005fde:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8005fe0:	9d06      	ldr	r5, [sp, #24]
 8005fe2:	ea6f 0b03 	mvn.w	fp, r3
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	9307      	str	r3, [sp, #28]
 8005fea:	4631      	mov	r1, r6
 8005fec:	4620      	mov	r0, r4
 8005fee:	f000 f93a 	bl	8006266 <_Bfree>
 8005ff2:	2f00      	cmp	r7, #0
 8005ff4:	f43f ae4b 	beq.w	8005c8e <_dtoa_r+0x696>
 8005ff8:	9b07      	ldr	r3, [sp, #28]
 8005ffa:	b12b      	cbz	r3, 8006008 <_dtoa_r+0xa10>
 8005ffc:	42bb      	cmp	r3, r7
 8005ffe:	d003      	beq.n	8006008 <_dtoa_r+0xa10>
 8006000:	4619      	mov	r1, r3
 8006002:	4620      	mov	r0, r4
 8006004:	f000 f92f 	bl	8006266 <_Bfree>
 8006008:	4639      	mov	r1, r7
 800600a:	4620      	mov	r0, r4
 800600c:	f000 f92b 	bl	8006266 <_Bfree>
 8006010:	e63d      	b.n	8005c8e <_dtoa_r+0x696>
 8006012:	2600      	movs	r6, #0
 8006014:	4637      	mov	r7, r6
 8006016:	e7e2      	b.n	8005fde <_dtoa_r+0x9e6>
 8006018:	46bb      	mov	fp, r7
 800601a:	4637      	mov	r7, r6
 800601c:	e53b      	b.n	8005a96 <_dtoa_r+0x49e>
 800601e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006020:	f8cd 9010 	str.w	r9, [sp, #16]
 8006024:	2b00      	cmp	r3, #0
 8006026:	f47f af12 	bne.w	8005e4e <_dtoa_r+0x856>
 800602a:	9d06      	ldr	r5, [sp, #24]
 800602c:	4631      	mov	r1, r6
 800602e:	4650      	mov	r0, sl
 8006030:	f7ff fa54 	bl	80054dc <quorem>
 8006034:	9b06      	ldr	r3, [sp, #24]
 8006036:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800603a:	f805 9b01 	strb.w	r9, [r5], #1
 800603e:	9a04      	ldr	r2, [sp, #16]
 8006040:	1aeb      	subs	r3, r5, r3
 8006042:	429a      	cmp	r2, r3
 8006044:	f300 8081 	bgt.w	800614a <_dtoa_r+0xb52>
 8006048:	9b06      	ldr	r3, [sp, #24]
 800604a:	2a01      	cmp	r2, #1
 800604c:	bfac      	ite	ge
 800604e:	189b      	addge	r3, r3, r2
 8006050:	3301      	addlt	r3, #1
 8006052:	4698      	mov	r8, r3
 8006054:	2300      	movs	r3, #0
 8006056:	9307      	str	r3, [sp, #28]
 8006058:	4651      	mov	r1, sl
 800605a:	2201      	movs	r2, #1
 800605c:	4620      	mov	r0, r4
 800605e:	f000 fa85 	bl	800656c <__lshift>
 8006062:	4631      	mov	r1, r6
 8006064:	4682      	mov	sl, r0
 8006066:	f000 fad2 	bl	800660e <__mcmp>
 800606a:	2800      	cmp	r0, #0
 800606c:	dc34      	bgt.n	80060d8 <_dtoa_r+0xae0>
 800606e:	d102      	bne.n	8006076 <_dtoa_r+0xa7e>
 8006070:	f019 0f01 	tst.w	r9, #1
 8006074:	d130      	bne.n	80060d8 <_dtoa_r+0xae0>
 8006076:	4645      	mov	r5, r8
 8006078:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800607c:	1e6a      	subs	r2, r5, #1
 800607e:	2b30      	cmp	r3, #48	; 0x30
 8006080:	d1b3      	bne.n	8005fea <_dtoa_r+0x9f2>
 8006082:	4615      	mov	r5, r2
 8006084:	e7f8      	b.n	8006078 <_dtoa_r+0xa80>
 8006086:	4638      	mov	r0, r7
 8006088:	e6ff      	b.n	8005e8a <_dtoa_r+0x892>
 800608a:	2301      	movs	r3, #1
 800608c:	e722      	b.n	8005ed4 <_dtoa_r+0x8dc>
 800608e:	9a02      	ldr	r2, [sp, #8]
 8006090:	2a00      	cmp	r2, #0
 8006092:	db04      	blt.n	800609e <_dtoa_r+0xaa6>
 8006094:	d128      	bne.n	80060e8 <_dtoa_r+0xaf0>
 8006096:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006098:	bb32      	cbnz	r2, 80060e8 <_dtoa_r+0xaf0>
 800609a:	9a08      	ldr	r2, [sp, #32]
 800609c:	bb22      	cbnz	r2, 80060e8 <_dtoa_r+0xaf0>
 800609e:	2b00      	cmp	r3, #0
 80060a0:	f77f af32 	ble.w	8005f08 <_dtoa_r+0x910>
 80060a4:	4651      	mov	r1, sl
 80060a6:	2201      	movs	r2, #1
 80060a8:	4620      	mov	r0, r4
 80060aa:	f000 fa5f 	bl	800656c <__lshift>
 80060ae:	4631      	mov	r1, r6
 80060b0:	4682      	mov	sl, r0
 80060b2:	f000 faac 	bl	800660e <__mcmp>
 80060b6:	2800      	cmp	r0, #0
 80060b8:	dc05      	bgt.n	80060c6 <_dtoa_r+0xace>
 80060ba:	f47f af25 	bne.w	8005f08 <_dtoa_r+0x910>
 80060be:	f019 0f01 	tst.w	r9, #1
 80060c2:	f43f af21 	beq.w	8005f08 <_dtoa_r+0x910>
 80060c6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80060ca:	f47f af1b 	bne.w	8005f04 <_dtoa_r+0x90c>
 80060ce:	2339      	movs	r3, #57	; 0x39
 80060d0:	f108 0801 	add.w	r8, r8, #1
 80060d4:	f808 3c01 	strb.w	r3, [r8, #-1]
 80060d8:	4645      	mov	r5, r8
 80060da:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80060de:	1e6a      	subs	r2, r5, #1
 80060e0:	2b39      	cmp	r3, #57	; 0x39
 80060e2:	d03a      	beq.n	800615a <_dtoa_r+0xb62>
 80060e4:	3301      	adds	r3, #1
 80060e6:	e03f      	b.n	8006168 <_dtoa_r+0xb70>
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f108 0501 	add.w	r5, r8, #1
 80060ee:	dd05      	ble.n	80060fc <_dtoa_r+0xb04>
 80060f0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80060f4:	d0eb      	beq.n	80060ce <_dtoa_r+0xad6>
 80060f6:	f109 0901 	add.w	r9, r9, #1
 80060fa:	e707      	b.n	8005f0c <_dtoa_r+0x914>
 80060fc:	9b06      	ldr	r3, [sp, #24]
 80060fe:	9a04      	ldr	r2, [sp, #16]
 8006100:	1aeb      	subs	r3, r5, r3
 8006102:	4293      	cmp	r3, r2
 8006104:	46a8      	mov	r8, r5
 8006106:	f805 9c01 	strb.w	r9, [r5, #-1]
 800610a:	d0a5      	beq.n	8006058 <_dtoa_r+0xa60>
 800610c:	4651      	mov	r1, sl
 800610e:	2300      	movs	r3, #0
 8006110:	220a      	movs	r2, #10
 8006112:	4620      	mov	r0, r4
 8006114:	f000 f8be 	bl	8006294 <__multadd>
 8006118:	9b07      	ldr	r3, [sp, #28]
 800611a:	4682      	mov	sl, r0
 800611c:	42bb      	cmp	r3, r7
 800611e:	f04f 020a 	mov.w	r2, #10
 8006122:	f04f 0300 	mov.w	r3, #0
 8006126:	9907      	ldr	r1, [sp, #28]
 8006128:	4620      	mov	r0, r4
 800612a:	d104      	bne.n	8006136 <_dtoa_r+0xb3e>
 800612c:	f000 f8b2 	bl	8006294 <__multadd>
 8006130:	9007      	str	r0, [sp, #28]
 8006132:	4607      	mov	r7, r0
 8006134:	e6b1      	b.n	8005e9a <_dtoa_r+0x8a2>
 8006136:	f000 f8ad 	bl	8006294 <__multadd>
 800613a:	2300      	movs	r3, #0
 800613c:	9007      	str	r0, [sp, #28]
 800613e:	220a      	movs	r2, #10
 8006140:	4639      	mov	r1, r7
 8006142:	4620      	mov	r0, r4
 8006144:	f000 f8a6 	bl	8006294 <__multadd>
 8006148:	e7f3      	b.n	8006132 <_dtoa_r+0xb3a>
 800614a:	4651      	mov	r1, sl
 800614c:	2300      	movs	r3, #0
 800614e:	220a      	movs	r2, #10
 8006150:	4620      	mov	r0, r4
 8006152:	f000 f89f 	bl	8006294 <__multadd>
 8006156:	4682      	mov	sl, r0
 8006158:	e768      	b.n	800602c <_dtoa_r+0xa34>
 800615a:	9b06      	ldr	r3, [sp, #24]
 800615c:	4293      	cmp	r3, r2
 800615e:	d105      	bne.n	800616c <_dtoa_r+0xb74>
 8006160:	2331      	movs	r3, #49	; 0x31
 8006162:	9a06      	ldr	r2, [sp, #24]
 8006164:	f10b 0b01 	add.w	fp, fp, #1
 8006168:	7013      	strb	r3, [r2, #0]
 800616a:	e73e      	b.n	8005fea <_dtoa_r+0x9f2>
 800616c:	4615      	mov	r5, r2
 800616e:	e7b4      	b.n	80060da <_dtoa_r+0xae2>
 8006170:	4b09      	ldr	r3, [pc, #36]	; (8006198 <_dtoa_r+0xba0>)
 8006172:	f7ff baa3 	b.w	80056bc <_dtoa_r+0xc4>
 8006176:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006178:	2b00      	cmp	r3, #0
 800617a:	f47f aa7d 	bne.w	8005678 <_dtoa_r+0x80>
 800617e:	4b07      	ldr	r3, [pc, #28]	; (800619c <_dtoa_r+0xba4>)
 8006180:	f7ff ba9c 	b.w	80056bc <_dtoa_r+0xc4>
 8006184:	9b04      	ldr	r3, [sp, #16]
 8006186:	2b00      	cmp	r3, #0
 8006188:	f73f af4f 	bgt.w	800602a <_dtoa_r+0xa32>
 800618c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800618e:	2b02      	cmp	r3, #2
 8006190:	f77f af4b 	ble.w	800602a <_dtoa_r+0xa32>
 8006194:	e714      	b.n	8005fc0 <_dtoa_r+0x9c8>
 8006196:	bf00      	nop
 8006198:	08007230 	.word	0x08007230
 800619c:	08007254 	.word	0x08007254

080061a0 <_localeconv_r>:
 80061a0:	4b04      	ldr	r3, [pc, #16]	; (80061b4 <_localeconv_r+0x14>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6a18      	ldr	r0, [r3, #32]
 80061a6:	4b04      	ldr	r3, [pc, #16]	; (80061b8 <_localeconv_r+0x18>)
 80061a8:	2800      	cmp	r0, #0
 80061aa:	bf08      	it	eq
 80061ac:	4618      	moveq	r0, r3
 80061ae:	30f0      	adds	r0, #240	; 0xf0
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	20000020 	.word	0x20000020
 80061b8:	20000084 	.word	0x20000084

080061bc <malloc>:
 80061bc:	4b02      	ldr	r3, [pc, #8]	; (80061c8 <malloc+0xc>)
 80061be:	4601      	mov	r1, r0
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	f000 bb47 	b.w	8006854 <_malloc_r>
 80061c6:	bf00      	nop
 80061c8:	20000020 	.word	0x20000020

080061cc <memchr>:
 80061cc:	b510      	push	{r4, lr}
 80061ce:	b2c9      	uxtb	r1, r1
 80061d0:	4402      	add	r2, r0
 80061d2:	4290      	cmp	r0, r2
 80061d4:	4603      	mov	r3, r0
 80061d6:	d101      	bne.n	80061dc <memchr+0x10>
 80061d8:	2000      	movs	r0, #0
 80061da:	bd10      	pop	{r4, pc}
 80061dc:	781c      	ldrb	r4, [r3, #0]
 80061de:	3001      	adds	r0, #1
 80061e0:	428c      	cmp	r4, r1
 80061e2:	d1f6      	bne.n	80061d2 <memchr+0x6>
 80061e4:	4618      	mov	r0, r3
 80061e6:	bd10      	pop	{r4, pc}

080061e8 <memcpy>:
 80061e8:	b510      	push	{r4, lr}
 80061ea:	1e43      	subs	r3, r0, #1
 80061ec:	440a      	add	r2, r1
 80061ee:	4291      	cmp	r1, r2
 80061f0:	d100      	bne.n	80061f4 <memcpy+0xc>
 80061f2:	bd10      	pop	{r4, pc}
 80061f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061fc:	e7f7      	b.n	80061ee <memcpy+0x6>

080061fe <_Balloc>:
 80061fe:	b570      	push	{r4, r5, r6, lr}
 8006200:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006202:	4604      	mov	r4, r0
 8006204:	460e      	mov	r6, r1
 8006206:	b93d      	cbnz	r5, 8006218 <_Balloc+0x1a>
 8006208:	2010      	movs	r0, #16
 800620a:	f7ff ffd7 	bl	80061bc <malloc>
 800620e:	6260      	str	r0, [r4, #36]	; 0x24
 8006210:	6045      	str	r5, [r0, #4]
 8006212:	6085      	str	r5, [r0, #8]
 8006214:	6005      	str	r5, [r0, #0]
 8006216:	60c5      	str	r5, [r0, #12]
 8006218:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800621a:	68eb      	ldr	r3, [r5, #12]
 800621c:	b183      	cbz	r3, 8006240 <_Balloc+0x42>
 800621e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8006226:	b9b8      	cbnz	r0, 8006258 <_Balloc+0x5a>
 8006228:	2101      	movs	r1, #1
 800622a:	fa01 f506 	lsl.w	r5, r1, r6
 800622e:	1d6a      	adds	r2, r5, #5
 8006230:	0092      	lsls	r2, r2, #2
 8006232:	4620      	mov	r0, r4
 8006234:	f000 fab3 	bl	800679e <_calloc_r>
 8006238:	b160      	cbz	r0, 8006254 <_Balloc+0x56>
 800623a:	6046      	str	r6, [r0, #4]
 800623c:	6085      	str	r5, [r0, #8]
 800623e:	e00e      	b.n	800625e <_Balloc+0x60>
 8006240:	2221      	movs	r2, #33	; 0x21
 8006242:	2104      	movs	r1, #4
 8006244:	4620      	mov	r0, r4
 8006246:	f000 faaa 	bl	800679e <_calloc_r>
 800624a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800624c:	60e8      	str	r0, [r5, #12]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d1e4      	bne.n	800621e <_Balloc+0x20>
 8006254:	2000      	movs	r0, #0
 8006256:	bd70      	pop	{r4, r5, r6, pc}
 8006258:	6802      	ldr	r2, [r0, #0]
 800625a:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800625e:	2300      	movs	r3, #0
 8006260:	6103      	str	r3, [r0, #16]
 8006262:	60c3      	str	r3, [r0, #12]
 8006264:	bd70      	pop	{r4, r5, r6, pc}

08006266 <_Bfree>:
 8006266:	b570      	push	{r4, r5, r6, lr}
 8006268:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800626a:	4606      	mov	r6, r0
 800626c:	460d      	mov	r5, r1
 800626e:	b93c      	cbnz	r4, 8006280 <_Bfree+0x1a>
 8006270:	2010      	movs	r0, #16
 8006272:	f7ff ffa3 	bl	80061bc <malloc>
 8006276:	6270      	str	r0, [r6, #36]	; 0x24
 8006278:	6044      	str	r4, [r0, #4]
 800627a:	6084      	str	r4, [r0, #8]
 800627c:	6004      	str	r4, [r0, #0]
 800627e:	60c4      	str	r4, [r0, #12]
 8006280:	b13d      	cbz	r5, 8006292 <_Bfree+0x2c>
 8006282:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006284:	686a      	ldr	r2, [r5, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800628c:	6029      	str	r1, [r5, #0]
 800628e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8006292:	bd70      	pop	{r4, r5, r6, pc}

08006294 <__multadd>:
 8006294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006298:	461f      	mov	r7, r3
 800629a:	4606      	mov	r6, r0
 800629c:	460c      	mov	r4, r1
 800629e:	2300      	movs	r3, #0
 80062a0:	690d      	ldr	r5, [r1, #16]
 80062a2:	f101 0e14 	add.w	lr, r1, #20
 80062a6:	f8de 0000 	ldr.w	r0, [lr]
 80062aa:	3301      	adds	r3, #1
 80062ac:	b281      	uxth	r1, r0
 80062ae:	fb02 7101 	mla	r1, r2, r1, r7
 80062b2:	0c00      	lsrs	r0, r0, #16
 80062b4:	0c0f      	lsrs	r7, r1, #16
 80062b6:	fb02 7000 	mla	r0, r2, r0, r7
 80062ba:	b289      	uxth	r1, r1
 80062bc:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80062c0:	429d      	cmp	r5, r3
 80062c2:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80062c6:	f84e 1b04 	str.w	r1, [lr], #4
 80062ca:	dcec      	bgt.n	80062a6 <__multadd+0x12>
 80062cc:	b1d7      	cbz	r7, 8006304 <__multadd+0x70>
 80062ce:	68a3      	ldr	r3, [r4, #8]
 80062d0:	429d      	cmp	r5, r3
 80062d2:	db12      	blt.n	80062fa <__multadd+0x66>
 80062d4:	6861      	ldr	r1, [r4, #4]
 80062d6:	4630      	mov	r0, r6
 80062d8:	3101      	adds	r1, #1
 80062da:	f7ff ff90 	bl	80061fe <_Balloc>
 80062de:	4680      	mov	r8, r0
 80062e0:	6922      	ldr	r2, [r4, #16]
 80062e2:	f104 010c 	add.w	r1, r4, #12
 80062e6:	3202      	adds	r2, #2
 80062e8:	0092      	lsls	r2, r2, #2
 80062ea:	300c      	adds	r0, #12
 80062ec:	f7ff ff7c 	bl	80061e8 <memcpy>
 80062f0:	4621      	mov	r1, r4
 80062f2:	4630      	mov	r0, r6
 80062f4:	f7ff ffb7 	bl	8006266 <_Bfree>
 80062f8:	4644      	mov	r4, r8
 80062fa:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80062fe:	3501      	adds	r5, #1
 8006300:	615f      	str	r7, [r3, #20]
 8006302:	6125      	str	r5, [r4, #16]
 8006304:	4620      	mov	r0, r4
 8006306:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800630a <__hi0bits>:
 800630a:	0c02      	lsrs	r2, r0, #16
 800630c:	0412      	lsls	r2, r2, #16
 800630e:	4603      	mov	r3, r0
 8006310:	b9b2      	cbnz	r2, 8006340 <__hi0bits+0x36>
 8006312:	0403      	lsls	r3, r0, #16
 8006314:	2010      	movs	r0, #16
 8006316:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800631a:	bf04      	itt	eq
 800631c:	021b      	lsleq	r3, r3, #8
 800631e:	3008      	addeq	r0, #8
 8006320:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006324:	bf04      	itt	eq
 8006326:	011b      	lsleq	r3, r3, #4
 8006328:	3004      	addeq	r0, #4
 800632a:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800632e:	bf04      	itt	eq
 8006330:	009b      	lsleq	r3, r3, #2
 8006332:	3002      	addeq	r0, #2
 8006334:	2b00      	cmp	r3, #0
 8006336:	db06      	blt.n	8006346 <__hi0bits+0x3c>
 8006338:	005b      	lsls	r3, r3, #1
 800633a:	d503      	bpl.n	8006344 <__hi0bits+0x3a>
 800633c:	3001      	adds	r0, #1
 800633e:	4770      	bx	lr
 8006340:	2000      	movs	r0, #0
 8006342:	e7e8      	b.n	8006316 <__hi0bits+0xc>
 8006344:	2020      	movs	r0, #32
 8006346:	4770      	bx	lr

08006348 <__lo0bits>:
 8006348:	6803      	ldr	r3, [r0, #0]
 800634a:	4601      	mov	r1, r0
 800634c:	f013 0207 	ands.w	r2, r3, #7
 8006350:	d00b      	beq.n	800636a <__lo0bits+0x22>
 8006352:	07da      	lsls	r2, r3, #31
 8006354:	d423      	bmi.n	800639e <__lo0bits+0x56>
 8006356:	0798      	lsls	r0, r3, #30
 8006358:	bf49      	itett	mi
 800635a:	085b      	lsrmi	r3, r3, #1
 800635c:	089b      	lsrpl	r3, r3, #2
 800635e:	2001      	movmi	r0, #1
 8006360:	600b      	strmi	r3, [r1, #0]
 8006362:	bf5c      	itt	pl
 8006364:	600b      	strpl	r3, [r1, #0]
 8006366:	2002      	movpl	r0, #2
 8006368:	4770      	bx	lr
 800636a:	b298      	uxth	r0, r3
 800636c:	b9a8      	cbnz	r0, 800639a <__lo0bits+0x52>
 800636e:	2010      	movs	r0, #16
 8006370:	0c1b      	lsrs	r3, r3, #16
 8006372:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006376:	bf04      	itt	eq
 8006378:	0a1b      	lsreq	r3, r3, #8
 800637a:	3008      	addeq	r0, #8
 800637c:	071a      	lsls	r2, r3, #28
 800637e:	bf04      	itt	eq
 8006380:	091b      	lsreq	r3, r3, #4
 8006382:	3004      	addeq	r0, #4
 8006384:	079a      	lsls	r2, r3, #30
 8006386:	bf04      	itt	eq
 8006388:	089b      	lsreq	r3, r3, #2
 800638a:	3002      	addeq	r0, #2
 800638c:	07da      	lsls	r2, r3, #31
 800638e:	d402      	bmi.n	8006396 <__lo0bits+0x4e>
 8006390:	085b      	lsrs	r3, r3, #1
 8006392:	d006      	beq.n	80063a2 <__lo0bits+0x5a>
 8006394:	3001      	adds	r0, #1
 8006396:	600b      	str	r3, [r1, #0]
 8006398:	4770      	bx	lr
 800639a:	4610      	mov	r0, r2
 800639c:	e7e9      	b.n	8006372 <__lo0bits+0x2a>
 800639e:	2000      	movs	r0, #0
 80063a0:	4770      	bx	lr
 80063a2:	2020      	movs	r0, #32
 80063a4:	4770      	bx	lr

080063a6 <__i2b>:
 80063a6:	b510      	push	{r4, lr}
 80063a8:	460c      	mov	r4, r1
 80063aa:	2101      	movs	r1, #1
 80063ac:	f7ff ff27 	bl	80061fe <_Balloc>
 80063b0:	2201      	movs	r2, #1
 80063b2:	6144      	str	r4, [r0, #20]
 80063b4:	6102      	str	r2, [r0, #16]
 80063b6:	bd10      	pop	{r4, pc}

080063b8 <__multiply>:
 80063b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063bc:	4614      	mov	r4, r2
 80063be:	690a      	ldr	r2, [r1, #16]
 80063c0:	6923      	ldr	r3, [r4, #16]
 80063c2:	4689      	mov	r9, r1
 80063c4:	429a      	cmp	r2, r3
 80063c6:	bfbe      	ittt	lt
 80063c8:	460b      	movlt	r3, r1
 80063ca:	46a1      	movlt	r9, r4
 80063cc:	461c      	movlt	r4, r3
 80063ce:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80063d2:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80063d6:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80063da:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80063de:	eb07 060a 	add.w	r6, r7, sl
 80063e2:	429e      	cmp	r6, r3
 80063e4:	bfc8      	it	gt
 80063e6:	3101      	addgt	r1, #1
 80063e8:	f7ff ff09 	bl	80061fe <_Balloc>
 80063ec:	f100 0514 	add.w	r5, r0, #20
 80063f0:	462b      	mov	r3, r5
 80063f2:	2200      	movs	r2, #0
 80063f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80063f8:	4543      	cmp	r3, r8
 80063fa:	d316      	bcc.n	800642a <__multiply+0x72>
 80063fc:	f104 0214 	add.w	r2, r4, #20
 8006400:	f109 0114 	add.w	r1, r9, #20
 8006404:	eb02 038a 	add.w	r3, r2, sl, lsl #2
 8006408:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800640c:	9301      	str	r3, [sp, #4]
 800640e:	9c01      	ldr	r4, [sp, #4]
 8006410:	4613      	mov	r3, r2
 8006412:	4294      	cmp	r4, r2
 8006414:	d80c      	bhi.n	8006430 <__multiply+0x78>
 8006416:	2e00      	cmp	r6, #0
 8006418:	dd03      	ble.n	8006422 <__multiply+0x6a>
 800641a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800641e:	2b00      	cmp	r3, #0
 8006420:	d054      	beq.n	80064cc <__multiply+0x114>
 8006422:	6106      	str	r6, [r0, #16]
 8006424:	b003      	add	sp, #12
 8006426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800642a:	f843 2b04 	str.w	r2, [r3], #4
 800642e:	e7e3      	b.n	80063f8 <__multiply+0x40>
 8006430:	f8b3 a000 	ldrh.w	sl, [r3]
 8006434:	3204      	adds	r2, #4
 8006436:	f1ba 0f00 	cmp.w	sl, #0
 800643a:	d020      	beq.n	800647e <__multiply+0xc6>
 800643c:	46ae      	mov	lr, r5
 800643e:	4689      	mov	r9, r1
 8006440:	f04f 0c00 	mov.w	ip, #0
 8006444:	f859 4b04 	ldr.w	r4, [r9], #4
 8006448:	f8be b000 	ldrh.w	fp, [lr]
 800644c:	b2a3      	uxth	r3, r4
 800644e:	fb0a b303 	mla	r3, sl, r3, fp
 8006452:	ea4f 4b14 	mov.w	fp, r4, lsr #16
 8006456:	f8de 4000 	ldr.w	r4, [lr]
 800645a:	4463      	add	r3, ip
 800645c:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006460:	fb0a c40b 	mla	r4, sl, fp, ip
 8006464:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8006468:	b29b      	uxth	r3, r3
 800646a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800646e:	454f      	cmp	r7, r9
 8006470:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8006474:	f84e 3b04 	str.w	r3, [lr], #4
 8006478:	d8e4      	bhi.n	8006444 <__multiply+0x8c>
 800647a:	f8ce c000 	str.w	ip, [lr]
 800647e:	f832 9c02 	ldrh.w	r9, [r2, #-2]
 8006482:	f1b9 0f00 	cmp.w	r9, #0
 8006486:	d01f      	beq.n	80064c8 <__multiply+0x110>
 8006488:	46ae      	mov	lr, r5
 800648a:	468c      	mov	ip, r1
 800648c:	f04f 0a00 	mov.w	sl, #0
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	f8bc 4000 	ldrh.w	r4, [ip]
 8006496:	f8be b002 	ldrh.w	fp, [lr, #2]
 800649a:	b29b      	uxth	r3, r3
 800649c:	fb09 b404 	mla	r4, r9, r4, fp
 80064a0:	44a2      	add	sl, r4
 80064a2:	ea43 430a 	orr.w	r3, r3, sl, lsl #16
 80064a6:	f84e 3b04 	str.w	r3, [lr], #4
 80064aa:	f85c 3b04 	ldr.w	r3, [ip], #4
 80064ae:	f8be 4000 	ldrh.w	r4, [lr]
 80064b2:	0c1b      	lsrs	r3, r3, #16
 80064b4:	fb09 4303 	mla	r3, r9, r3, r4
 80064b8:	4567      	cmp	r7, ip
 80064ba:	eb03 431a 	add.w	r3, r3, sl, lsr #16
 80064be:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80064c2:	d8e6      	bhi.n	8006492 <__multiply+0xda>
 80064c4:	f8ce 3000 	str.w	r3, [lr]
 80064c8:	3504      	adds	r5, #4
 80064ca:	e7a0      	b.n	800640e <__multiply+0x56>
 80064cc:	3e01      	subs	r6, #1
 80064ce:	e7a2      	b.n	8006416 <__multiply+0x5e>

080064d0 <__pow5mult>:
 80064d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064d4:	4615      	mov	r5, r2
 80064d6:	f012 0203 	ands.w	r2, r2, #3
 80064da:	4606      	mov	r6, r0
 80064dc:	460f      	mov	r7, r1
 80064de:	d007      	beq.n	80064f0 <__pow5mult+0x20>
 80064e0:	4c21      	ldr	r4, [pc, #132]	; (8006568 <__pow5mult+0x98>)
 80064e2:	3a01      	subs	r2, #1
 80064e4:	2300      	movs	r3, #0
 80064e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80064ea:	f7ff fed3 	bl	8006294 <__multadd>
 80064ee:	4607      	mov	r7, r0
 80064f0:	10ad      	asrs	r5, r5, #2
 80064f2:	d035      	beq.n	8006560 <__pow5mult+0x90>
 80064f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80064f6:	b93c      	cbnz	r4, 8006508 <__pow5mult+0x38>
 80064f8:	2010      	movs	r0, #16
 80064fa:	f7ff fe5f 	bl	80061bc <malloc>
 80064fe:	6270      	str	r0, [r6, #36]	; 0x24
 8006500:	6044      	str	r4, [r0, #4]
 8006502:	6084      	str	r4, [r0, #8]
 8006504:	6004      	str	r4, [r0, #0]
 8006506:	60c4      	str	r4, [r0, #12]
 8006508:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800650c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006510:	b94c      	cbnz	r4, 8006526 <__pow5mult+0x56>
 8006512:	f240 2171 	movw	r1, #625	; 0x271
 8006516:	4630      	mov	r0, r6
 8006518:	f7ff ff45 	bl	80063a6 <__i2b>
 800651c:	2300      	movs	r3, #0
 800651e:	4604      	mov	r4, r0
 8006520:	f8c8 0008 	str.w	r0, [r8, #8]
 8006524:	6003      	str	r3, [r0, #0]
 8006526:	f04f 0800 	mov.w	r8, #0
 800652a:	07eb      	lsls	r3, r5, #31
 800652c:	d50a      	bpl.n	8006544 <__pow5mult+0x74>
 800652e:	4639      	mov	r1, r7
 8006530:	4622      	mov	r2, r4
 8006532:	4630      	mov	r0, r6
 8006534:	f7ff ff40 	bl	80063b8 <__multiply>
 8006538:	4681      	mov	r9, r0
 800653a:	4639      	mov	r1, r7
 800653c:	4630      	mov	r0, r6
 800653e:	f7ff fe92 	bl	8006266 <_Bfree>
 8006542:	464f      	mov	r7, r9
 8006544:	106d      	asrs	r5, r5, #1
 8006546:	d00b      	beq.n	8006560 <__pow5mult+0x90>
 8006548:	6820      	ldr	r0, [r4, #0]
 800654a:	b938      	cbnz	r0, 800655c <__pow5mult+0x8c>
 800654c:	4622      	mov	r2, r4
 800654e:	4621      	mov	r1, r4
 8006550:	4630      	mov	r0, r6
 8006552:	f7ff ff31 	bl	80063b8 <__multiply>
 8006556:	6020      	str	r0, [r4, #0]
 8006558:	f8c0 8000 	str.w	r8, [r0]
 800655c:	4604      	mov	r4, r0
 800655e:	e7e4      	b.n	800652a <__pow5mult+0x5a>
 8006560:	4638      	mov	r0, r7
 8006562:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006566:	bf00      	nop
 8006568:	08007358 	.word	0x08007358

0800656c <__lshift>:
 800656c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006570:	460c      	mov	r4, r1
 8006572:	4607      	mov	r7, r0
 8006574:	4616      	mov	r6, r2
 8006576:	6923      	ldr	r3, [r4, #16]
 8006578:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800657c:	eb0a 0903 	add.w	r9, sl, r3
 8006580:	6849      	ldr	r1, [r1, #4]
 8006582:	68a3      	ldr	r3, [r4, #8]
 8006584:	f109 0501 	add.w	r5, r9, #1
 8006588:	42ab      	cmp	r3, r5
 800658a:	db31      	blt.n	80065f0 <__lshift+0x84>
 800658c:	4638      	mov	r0, r7
 800658e:	f7ff fe36 	bl	80061fe <_Balloc>
 8006592:	2200      	movs	r2, #0
 8006594:	4680      	mov	r8, r0
 8006596:	4611      	mov	r1, r2
 8006598:	f100 0314 	add.w	r3, r0, #20
 800659c:	4552      	cmp	r2, sl
 800659e:	db2a      	blt.n	80065f6 <__lshift+0x8a>
 80065a0:	6920      	ldr	r0, [r4, #16]
 80065a2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80065a6:	f104 0114 	add.w	r1, r4, #20
 80065aa:	f016 021f 	ands.w	r2, r6, #31
 80065ae:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80065b2:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 80065b6:	d022      	beq.n	80065fe <__lshift+0x92>
 80065b8:	2000      	movs	r0, #0
 80065ba:	f1c2 0c20 	rsb	ip, r2, #32
 80065be:	680e      	ldr	r6, [r1, #0]
 80065c0:	4096      	lsls	r6, r2
 80065c2:	4330      	orrs	r0, r6
 80065c4:	f843 0b04 	str.w	r0, [r3], #4
 80065c8:	f851 0b04 	ldr.w	r0, [r1], #4
 80065cc:	458e      	cmp	lr, r1
 80065ce:	fa20 f00c 	lsr.w	r0, r0, ip
 80065d2:	d8f4      	bhi.n	80065be <__lshift+0x52>
 80065d4:	6018      	str	r0, [r3, #0]
 80065d6:	b108      	cbz	r0, 80065dc <__lshift+0x70>
 80065d8:	f109 0502 	add.w	r5, r9, #2
 80065dc:	3d01      	subs	r5, #1
 80065de:	4638      	mov	r0, r7
 80065e0:	f8c8 5010 	str.w	r5, [r8, #16]
 80065e4:	4621      	mov	r1, r4
 80065e6:	f7ff fe3e 	bl	8006266 <_Bfree>
 80065ea:	4640      	mov	r0, r8
 80065ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065f0:	3101      	adds	r1, #1
 80065f2:	005b      	lsls	r3, r3, #1
 80065f4:	e7c8      	b.n	8006588 <__lshift+0x1c>
 80065f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80065fa:	3201      	adds	r2, #1
 80065fc:	e7ce      	b.n	800659c <__lshift+0x30>
 80065fe:	3b04      	subs	r3, #4
 8006600:	f851 2b04 	ldr.w	r2, [r1], #4
 8006604:	458e      	cmp	lr, r1
 8006606:	f843 2f04 	str.w	r2, [r3, #4]!
 800660a:	d8f9      	bhi.n	8006600 <__lshift+0x94>
 800660c:	e7e6      	b.n	80065dc <__lshift+0x70>

0800660e <__mcmp>:
 800660e:	6903      	ldr	r3, [r0, #16]
 8006610:	690a      	ldr	r2, [r1, #16]
 8006612:	b530      	push	{r4, r5, lr}
 8006614:	1a9b      	subs	r3, r3, r2
 8006616:	d10c      	bne.n	8006632 <__mcmp+0x24>
 8006618:	0092      	lsls	r2, r2, #2
 800661a:	3014      	adds	r0, #20
 800661c:	3114      	adds	r1, #20
 800661e:	1884      	adds	r4, r0, r2
 8006620:	4411      	add	r1, r2
 8006622:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006626:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800662a:	4295      	cmp	r5, r2
 800662c:	d003      	beq.n	8006636 <__mcmp+0x28>
 800662e:	d305      	bcc.n	800663c <__mcmp+0x2e>
 8006630:	2301      	movs	r3, #1
 8006632:	4618      	mov	r0, r3
 8006634:	bd30      	pop	{r4, r5, pc}
 8006636:	42a0      	cmp	r0, r4
 8006638:	d3f3      	bcc.n	8006622 <__mcmp+0x14>
 800663a:	e7fa      	b.n	8006632 <__mcmp+0x24>
 800663c:	f04f 33ff 	mov.w	r3, #4294967295
 8006640:	e7f7      	b.n	8006632 <__mcmp+0x24>

08006642 <__mdiff>:
 8006642:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006646:	460d      	mov	r5, r1
 8006648:	4607      	mov	r7, r0
 800664a:	4611      	mov	r1, r2
 800664c:	4628      	mov	r0, r5
 800664e:	4614      	mov	r4, r2
 8006650:	f7ff ffdd 	bl	800660e <__mcmp>
 8006654:	1e06      	subs	r6, r0, #0
 8006656:	d108      	bne.n	800666a <__mdiff+0x28>
 8006658:	4631      	mov	r1, r6
 800665a:	4638      	mov	r0, r7
 800665c:	f7ff fdcf 	bl	80061fe <_Balloc>
 8006660:	2301      	movs	r3, #1
 8006662:	6146      	str	r6, [r0, #20]
 8006664:	6103      	str	r3, [r0, #16]
 8006666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800666a:	bfa4      	itt	ge
 800666c:	4623      	movge	r3, r4
 800666e:	462c      	movge	r4, r5
 8006670:	4638      	mov	r0, r7
 8006672:	6861      	ldr	r1, [r4, #4]
 8006674:	bfa6      	itte	ge
 8006676:	461d      	movge	r5, r3
 8006678:	2600      	movge	r6, #0
 800667a:	2601      	movlt	r6, #1
 800667c:	f7ff fdbf 	bl	80061fe <_Balloc>
 8006680:	f04f 0c00 	mov.w	ip, #0
 8006684:	60c6      	str	r6, [r0, #12]
 8006686:	692b      	ldr	r3, [r5, #16]
 8006688:	6926      	ldr	r6, [r4, #16]
 800668a:	f104 0214 	add.w	r2, r4, #20
 800668e:	f105 0914 	add.w	r9, r5, #20
 8006692:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8006696:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800669a:	f100 0114 	add.w	r1, r0, #20
 800669e:	f852 ab04 	ldr.w	sl, [r2], #4
 80066a2:	f859 5b04 	ldr.w	r5, [r9], #4
 80066a6:	fa1f f38a 	uxth.w	r3, sl
 80066aa:	4463      	add	r3, ip
 80066ac:	b2ac      	uxth	r4, r5
 80066ae:	1b1b      	subs	r3, r3, r4
 80066b0:	0c2c      	lsrs	r4, r5, #16
 80066b2:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 80066b6:	eb04 4423 	add.w	r4, r4, r3, asr #16
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80066c0:	45c8      	cmp	r8, r9
 80066c2:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80066c6:	4696      	mov	lr, r2
 80066c8:	f841 4b04 	str.w	r4, [r1], #4
 80066cc:	d8e7      	bhi.n	800669e <__mdiff+0x5c>
 80066ce:	45be      	cmp	lr, r7
 80066d0:	d305      	bcc.n	80066de <__mdiff+0x9c>
 80066d2:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80066d6:	b18b      	cbz	r3, 80066fc <__mdiff+0xba>
 80066d8:	6106      	str	r6, [r0, #16]
 80066da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066de:	f85e 4b04 	ldr.w	r4, [lr], #4
 80066e2:	b2a2      	uxth	r2, r4
 80066e4:	4462      	add	r2, ip
 80066e6:	1413      	asrs	r3, r2, #16
 80066e8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80066ec:	b292      	uxth	r2, r2
 80066ee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80066f2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80066f6:	f841 2b04 	str.w	r2, [r1], #4
 80066fa:	e7e8      	b.n	80066ce <__mdiff+0x8c>
 80066fc:	3e01      	subs	r6, #1
 80066fe:	e7e8      	b.n	80066d2 <__mdiff+0x90>

08006700 <__d2b>:
 8006700:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006704:	461c      	mov	r4, r3
 8006706:	2101      	movs	r1, #1
 8006708:	4690      	mov	r8, r2
 800670a:	9e08      	ldr	r6, [sp, #32]
 800670c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800670e:	f7ff fd76 	bl	80061fe <_Balloc>
 8006712:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8006716:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800671a:	4607      	mov	r7, r0
 800671c:	bb34      	cbnz	r4, 800676c <__d2b+0x6c>
 800671e:	9201      	str	r2, [sp, #4]
 8006720:	f1b8 0f00 	cmp.w	r8, #0
 8006724:	d027      	beq.n	8006776 <__d2b+0x76>
 8006726:	a802      	add	r0, sp, #8
 8006728:	f840 8d08 	str.w	r8, [r0, #-8]!
 800672c:	f7ff fe0c 	bl	8006348 <__lo0bits>
 8006730:	9900      	ldr	r1, [sp, #0]
 8006732:	b1f0      	cbz	r0, 8006772 <__d2b+0x72>
 8006734:	9a01      	ldr	r2, [sp, #4]
 8006736:	f1c0 0320 	rsb	r3, r0, #32
 800673a:	fa02 f303 	lsl.w	r3, r2, r3
 800673e:	430b      	orrs	r3, r1
 8006740:	40c2      	lsrs	r2, r0
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	9201      	str	r2, [sp, #4]
 8006746:	9b01      	ldr	r3, [sp, #4]
 8006748:	2b00      	cmp	r3, #0
 800674a:	bf14      	ite	ne
 800674c:	2102      	movne	r1, #2
 800674e:	2101      	moveq	r1, #1
 8006750:	61bb      	str	r3, [r7, #24]
 8006752:	6139      	str	r1, [r7, #16]
 8006754:	b1c4      	cbz	r4, 8006788 <__d2b+0x88>
 8006756:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800675a:	4404      	add	r4, r0
 800675c:	6034      	str	r4, [r6, #0]
 800675e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006762:	6028      	str	r0, [r5, #0]
 8006764:	4638      	mov	r0, r7
 8006766:	b002      	add	sp, #8
 8006768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800676c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006770:	e7d5      	b.n	800671e <__d2b+0x1e>
 8006772:	6179      	str	r1, [r7, #20]
 8006774:	e7e7      	b.n	8006746 <__d2b+0x46>
 8006776:	a801      	add	r0, sp, #4
 8006778:	f7ff fde6 	bl	8006348 <__lo0bits>
 800677c:	2101      	movs	r1, #1
 800677e:	9b01      	ldr	r3, [sp, #4]
 8006780:	6139      	str	r1, [r7, #16]
 8006782:	617b      	str	r3, [r7, #20]
 8006784:	3020      	adds	r0, #32
 8006786:	e7e5      	b.n	8006754 <__d2b+0x54>
 8006788:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800678c:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8006790:	6030      	str	r0, [r6, #0]
 8006792:	6918      	ldr	r0, [r3, #16]
 8006794:	f7ff fdb9 	bl	800630a <__hi0bits>
 8006798:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800679c:	e7e1      	b.n	8006762 <__d2b+0x62>

0800679e <_calloc_r>:
 800679e:	b538      	push	{r3, r4, r5, lr}
 80067a0:	fb02 f401 	mul.w	r4, r2, r1
 80067a4:	4621      	mov	r1, r4
 80067a6:	f000 f855 	bl	8006854 <_malloc_r>
 80067aa:	4605      	mov	r5, r0
 80067ac:	b118      	cbz	r0, 80067b6 <_calloc_r+0x18>
 80067ae:	4622      	mov	r2, r4
 80067b0:	2100      	movs	r1, #0
 80067b2:	f7fe fa05 	bl	8004bc0 <memset>
 80067b6:	4628      	mov	r0, r5
 80067b8:	bd38      	pop	{r3, r4, r5, pc}
	...

080067bc <_free_r>:
 80067bc:	b538      	push	{r3, r4, r5, lr}
 80067be:	4605      	mov	r5, r0
 80067c0:	2900      	cmp	r1, #0
 80067c2:	d043      	beq.n	800684c <_free_r+0x90>
 80067c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067c8:	1f0c      	subs	r4, r1, #4
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	bfb8      	it	lt
 80067ce:	18e4      	addlt	r4, r4, r3
 80067d0:	f000 fa2a 	bl	8006c28 <__malloc_lock>
 80067d4:	4a1e      	ldr	r2, [pc, #120]	; (8006850 <_free_r+0x94>)
 80067d6:	6813      	ldr	r3, [r2, #0]
 80067d8:	4610      	mov	r0, r2
 80067da:	b933      	cbnz	r3, 80067ea <_free_r+0x2e>
 80067dc:	6063      	str	r3, [r4, #4]
 80067de:	6014      	str	r4, [r2, #0]
 80067e0:	4628      	mov	r0, r5
 80067e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80067e6:	f000 ba20 	b.w	8006c2a <__malloc_unlock>
 80067ea:	42a3      	cmp	r3, r4
 80067ec:	d90b      	bls.n	8006806 <_free_r+0x4a>
 80067ee:	6821      	ldr	r1, [r4, #0]
 80067f0:	1862      	adds	r2, r4, r1
 80067f2:	4293      	cmp	r3, r2
 80067f4:	bf01      	itttt	eq
 80067f6:	681a      	ldreq	r2, [r3, #0]
 80067f8:	685b      	ldreq	r3, [r3, #4]
 80067fa:	1852      	addeq	r2, r2, r1
 80067fc:	6022      	streq	r2, [r4, #0]
 80067fe:	6063      	str	r3, [r4, #4]
 8006800:	6004      	str	r4, [r0, #0]
 8006802:	e7ed      	b.n	80067e0 <_free_r+0x24>
 8006804:	4613      	mov	r3, r2
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	b10a      	cbz	r2, 800680e <_free_r+0x52>
 800680a:	42a2      	cmp	r2, r4
 800680c:	d9fa      	bls.n	8006804 <_free_r+0x48>
 800680e:	6819      	ldr	r1, [r3, #0]
 8006810:	1858      	adds	r0, r3, r1
 8006812:	42a0      	cmp	r0, r4
 8006814:	d10b      	bne.n	800682e <_free_r+0x72>
 8006816:	6820      	ldr	r0, [r4, #0]
 8006818:	4401      	add	r1, r0
 800681a:	1858      	adds	r0, r3, r1
 800681c:	4282      	cmp	r2, r0
 800681e:	6019      	str	r1, [r3, #0]
 8006820:	d1de      	bne.n	80067e0 <_free_r+0x24>
 8006822:	6810      	ldr	r0, [r2, #0]
 8006824:	6852      	ldr	r2, [r2, #4]
 8006826:	4401      	add	r1, r0
 8006828:	6019      	str	r1, [r3, #0]
 800682a:	605a      	str	r2, [r3, #4]
 800682c:	e7d8      	b.n	80067e0 <_free_r+0x24>
 800682e:	d902      	bls.n	8006836 <_free_r+0x7a>
 8006830:	230c      	movs	r3, #12
 8006832:	602b      	str	r3, [r5, #0]
 8006834:	e7d4      	b.n	80067e0 <_free_r+0x24>
 8006836:	6820      	ldr	r0, [r4, #0]
 8006838:	1821      	adds	r1, r4, r0
 800683a:	428a      	cmp	r2, r1
 800683c:	bf01      	itttt	eq
 800683e:	6811      	ldreq	r1, [r2, #0]
 8006840:	6852      	ldreq	r2, [r2, #4]
 8006842:	1809      	addeq	r1, r1, r0
 8006844:	6021      	streq	r1, [r4, #0]
 8006846:	6062      	str	r2, [r4, #4]
 8006848:	605c      	str	r4, [r3, #4]
 800684a:	e7c9      	b.n	80067e0 <_free_r+0x24>
 800684c:	bd38      	pop	{r3, r4, r5, pc}
 800684e:	bf00      	nop
 8006850:	20000210 	.word	0x20000210

08006854 <_malloc_r>:
 8006854:	b570      	push	{r4, r5, r6, lr}
 8006856:	1ccd      	adds	r5, r1, #3
 8006858:	f025 0503 	bic.w	r5, r5, #3
 800685c:	3508      	adds	r5, #8
 800685e:	2d0c      	cmp	r5, #12
 8006860:	bf38      	it	cc
 8006862:	250c      	movcc	r5, #12
 8006864:	2d00      	cmp	r5, #0
 8006866:	4606      	mov	r6, r0
 8006868:	db01      	blt.n	800686e <_malloc_r+0x1a>
 800686a:	42a9      	cmp	r1, r5
 800686c:	d903      	bls.n	8006876 <_malloc_r+0x22>
 800686e:	230c      	movs	r3, #12
 8006870:	6033      	str	r3, [r6, #0]
 8006872:	2000      	movs	r0, #0
 8006874:	bd70      	pop	{r4, r5, r6, pc}
 8006876:	f000 f9d7 	bl	8006c28 <__malloc_lock>
 800687a:	4a23      	ldr	r2, [pc, #140]	; (8006908 <_malloc_r+0xb4>)
 800687c:	6814      	ldr	r4, [r2, #0]
 800687e:	4621      	mov	r1, r4
 8006880:	b991      	cbnz	r1, 80068a8 <_malloc_r+0x54>
 8006882:	4c22      	ldr	r4, [pc, #136]	; (800690c <_malloc_r+0xb8>)
 8006884:	6823      	ldr	r3, [r4, #0]
 8006886:	b91b      	cbnz	r3, 8006890 <_malloc_r+0x3c>
 8006888:	4630      	mov	r0, r6
 800688a:	f000 f991 	bl	8006bb0 <_sbrk_r>
 800688e:	6020      	str	r0, [r4, #0]
 8006890:	4629      	mov	r1, r5
 8006892:	4630      	mov	r0, r6
 8006894:	f000 f98c 	bl	8006bb0 <_sbrk_r>
 8006898:	1c43      	adds	r3, r0, #1
 800689a:	d126      	bne.n	80068ea <_malloc_r+0x96>
 800689c:	230c      	movs	r3, #12
 800689e:	4630      	mov	r0, r6
 80068a0:	6033      	str	r3, [r6, #0]
 80068a2:	f000 f9c2 	bl	8006c2a <__malloc_unlock>
 80068a6:	e7e4      	b.n	8006872 <_malloc_r+0x1e>
 80068a8:	680b      	ldr	r3, [r1, #0]
 80068aa:	1b5b      	subs	r3, r3, r5
 80068ac:	d41a      	bmi.n	80068e4 <_malloc_r+0x90>
 80068ae:	2b0b      	cmp	r3, #11
 80068b0:	d90f      	bls.n	80068d2 <_malloc_r+0x7e>
 80068b2:	600b      	str	r3, [r1, #0]
 80068b4:	18cc      	adds	r4, r1, r3
 80068b6:	50cd      	str	r5, [r1, r3]
 80068b8:	4630      	mov	r0, r6
 80068ba:	f000 f9b6 	bl	8006c2a <__malloc_unlock>
 80068be:	f104 000b 	add.w	r0, r4, #11
 80068c2:	1d23      	adds	r3, r4, #4
 80068c4:	f020 0007 	bic.w	r0, r0, #7
 80068c8:	1ac3      	subs	r3, r0, r3
 80068ca:	d01b      	beq.n	8006904 <_malloc_r+0xb0>
 80068cc:	425a      	negs	r2, r3
 80068ce:	50e2      	str	r2, [r4, r3]
 80068d0:	bd70      	pop	{r4, r5, r6, pc}
 80068d2:	428c      	cmp	r4, r1
 80068d4:	bf0b      	itete	eq
 80068d6:	6863      	ldreq	r3, [r4, #4]
 80068d8:	684b      	ldrne	r3, [r1, #4]
 80068da:	6013      	streq	r3, [r2, #0]
 80068dc:	6063      	strne	r3, [r4, #4]
 80068de:	bf18      	it	ne
 80068e0:	460c      	movne	r4, r1
 80068e2:	e7e9      	b.n	80068b8 <_malloc_r+0x64>
 80068e4:	460c      	mov	r4, r1
 80068e6:	6849      	ldr	r1, [r1, #4]
 80068e8:	e7ca      	b.n	8006880 <_malloc_r+0x2c>
 80068ea:	1cc4      	adds	r4, r0, #3
 80068ec:	f024 0403 	bic.w	r4, r4, #3
 80068f0:	42a0      	cmp	r0, r4
 80068f2:	d005      	beq.n	8006900 <_malloc_r+0xac>
 80068f4:	1a21      	subs	r1, r4, r0
 80068f6:	4630      	mov	r0, r6
 80068f8:	f000 f95a 	bl	8006bb0 <_sbrk_r>
 80068fc:	3001      	adds	r0, #1
 80068fe:	d0cd      	beq.n	800689c <_malloc_r+0x48>
 8006900:	6025      	str	r5, [r4, #0]
 8006902:	e7d9      	b.n	80068b8 <_malloc_r+0x64>
 8006904:	bd70      	pop	{r4, r5, r6, pc}
 8006906:	bf00      	nop
 8006908:	20000210 	.word	0x20000210
 800690c:	20000214 	.word	0x20000214

08006910 <__ssputs_r>:
 8006910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006914:	688e      	ldr	r6, [r1, #8]
 8006916:	4682      	mov	sl, r0
 8006918:	429e      	cmp	r6, r3
 800691a:	460c      	mov	r4, r1
 800691c:	4691      	mov	r9, r2
 800691e:	4698      	mov	r8, r3
 8006920:	d835      	bhi.n	800698e <__ssputs_r+0x7e>
 8006922:	898a      	ldrh	r2, [r1, #12]
 8006924:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006928:	d031      	beq.n	800698e <__ssputs_r+0x7e>
 800692a:	2302      	movs	r3, #2
 800692c:	6825      	ldr	r5, [r4, #0]
 800692e:	6909      	ldr	r1, [r1, #16]
 8006930:	1a6f      	subs	r7, r5, r1
 8006932:	6965      	ldr	r5, [r4, #20]
 8006934:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006938:	fb95 f5f3 	sdiv	r5, r5, r3
 800693c:	f108 0301 	add.w	r3, r8, #1
 8006940:	443b      	add	r3, r7
 8006942:	429d      	cmp	r5, r3
 8006944:	bf38      	it	cc
 8006946:	461d      	movcc	r5, r3
 8006948:	0553      	lsls	r3, r2, #21
 800694a:	d531      	bpl.n	80069b0 <__ssputs_r+0xa0>
 800694c:	4629      	mov	r1, r5
 800694e:	f7ff ff81 	bl	8006854 <_malloc_r>
 8006952:	4606      	mov	r6, r0
 8006954:	b950      	cbnz	r0, 800696c <__ssputs_r+0x5c>
 8006956:	230c      	movs	r3, #12
 8006958:	f8ca 3000 	str.w	r3, [sl]
 800695c:	89a3      	ldrh	r3, [r4, #12]
 800695e:	f04f 30ff 	mov.w	r0, #4294967295
 8006962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006966:	81a3      	strh	r3, [r4, #12]
 8006968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800696c:	463a      	mov	r2, r7
 800696e:	6921      	ldr	r1, [r4, #16]
 8006970:	f7ff fc3a 	bl	80061e8 <memcpy>
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800697a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800697e:	81a3      	strh	r3, [r4, #12]
 8006980:	6126      	str	r6, [r4, #16]
 8006982:	443e      	add	r6, r7
 8006984:	6026      	str	r6, [r4, #0]
 8006986:	4646      	mov	r6, r8
 8006988:	6165      	str	r5, [r4, #20]
 800698a:	1bed      	subs	r5, r5, r7
 800698c:	60a5      	str	r5, [r4, #8]
 800698e:	4546      	cmp	r6, r8
 8006990:	bf28      	it	cs
 8006992:	4646      	movcs	r6, r8
 8006994:	4649      	mov	r1, r9
 8006996:	4632      	mov	r2, r6
 8006998:	6820      	ldr	r0, [r4, #0]
 800699a:	f000 f92b 	bl	8006bf4 <memmove>
 800699e:	68a3      	ldr	r3, [r4, #8]
 80069a0:	2000      	movs	r0, #0
 80069a2:	1b9b      	subs	r3, r3, r6
 80069a4:	60a3      	str	r3, [r4, #8]
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	441e      	add	r6, r3
 80069aa:	6026      	str	r6, [r4, #0]
 80069ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069b0:	462a      	mov	r2, r5
 80069b2:	f000 f93b 	bl	8006c2c <_realloc_r>
 80069b6:	4606      	mov	r6, r0
 80069b8:	2800      	cmp	r0, #0
 80069ba:	d1e1      	bne.n	8006980 <__ssputs_r+0x70>
 80069bc:	6921      	ldr	r1, [r4, #16]
 80069be:	4650      	mov	r0, sl
 80069c0:	f7ff fefc 	bl	80067bc <_free_r>
 80069c4:	e7c7      	b.n	8006956 <__ssputs_r+0x46>
	...

080069c8 <_svfiprintf_r>:
 80069c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069cc:	b09d      	sub	sp, #116	; 0x74
 80069ce:	9303      	str	r3, [sp, #12]
 80069d0:	898b      	ldrh	r3, [r1, #12]
 80069d2:	4680      	mov	r8, r0
 80069d4:	061c      	lsls	r4, r3, #24
 80069d6:	460d      	mov	r5, r1
 80069d8:	4616      	mov	r6, r2
 80069da:	d50f      	bpl.n	80069fc <_svfiprintf_r+0x34>
 80069dc:	690b      	ldr	r3, [r1, #16]
 80069de:	b96b      	cbnz	r3, 80069fc <_svfiprintf_r+0x34>
 80069e0:	2140      	movs	r1, #64	; 0x40
 80069e2:	f7ff ff37 	bl	8006854 <_malloc_r>
 80069e6:	6028      	str	r0, [r5, #0]
 80069e8:	6128      	str	r0, [r5, #16]
 80069ea:	b928      	cbnz	r0, 80069f8 <_svfiprintf_r+0x30>
 80069ec:	230c      	movs	r3, #12
 80069ee:	f8c8 3000 	str.w	r3, [r8]
 80069f2:	f04f 30ff 	mov.w	r0, #4294967295
 80069f6:	e0c4      	b.n	8006b82 <_svfiprintf_r+0x1ba>
 80069f8:	2340      	movs	r3, #64	; 0x40
 80069fa:	616b      	str	r3, [r5, #20]
 80069fc:	2300      	movs	r3, #0
 80069fe:	9309      	str	r3, [sp, #36]	; 0x24
 8006a00:	2320      	movs	r3, #32
 8006a02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006a06:	2330      	movs	r3, #48	; 0x30
 8006a08:	f04f 0b01 	mov.w	fp, #1
 8006a0c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006a10:	4637      	mov	r7, r6
 8006a12:	463c      	mov	r4, r7
 8006a14:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d13c      	bne.n	8006a96 <_svfiprintf_r+0xce>
 8006a1c:	ebb7 0a06 	subs.w	sl, r7, r6
 8006a20:	d00b      	beq.n	8006a3a <_svfiprintf_r+0x72>
 8006a22:	4653      	mov	r3, sl
 8006a24:	4632      	mov	r2, r6
 8006a26:	4629      	mov	r1, r5
 8006a28:	4640      	mov	r0, r8
 8006a2a:	f7ff ff71 	bl	8006910 <__ssputs_r>
 8006a2e:	3001      	adds	r0, #1
 8006a30:	f000 80a2 	beq.w	8006b78 <_svfiprintf_r+0x1b0>
 8006a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a36:	4453      	add	r3, sl
 8006a38:	9309      	str	r3, [sp, #36]	; 0x24
 8006a3a:	783b      	ldrb	r3, [r7, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f000 809b 	beq.w	8006b78 <_svfiprintf_r+0x1b0>
 8006a42:	2300      	movs	r3, #0
 8006a44:	f04f 32ff 	mov.w	r2, #4294967295
 8006a48:	9304      	str	r3, [sp, #16]
 8006a4a:	9307      	str	r3, [sp, #28]
 8006a4c:	9205      	str	r2, [sp, #20]
 8006a4e:	9306      	str	r3, [sp, #24]
 8006a50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a54:	931a      	str	r3, [sp, #104]	; 0x68
 8006a56:	2205      	movs	r2, #5
 8006a58:	7821      	ldrb	r1, [r4, #0]
 8006a5a:	4850      	ldr	r0, [pc, #320]	; (8006b9c <_svfiprintf_r+0x1d4>)
 8006a5c:	f7ff fbb6 	bl	80061cc <memchr>
 8006a60:	1c67      	adds	r7, r4, #1
 8006a62:	9b04      	ldr	r3, [sp, #16]
 8006a64:	b9d8      	cbnz	r0, 8006a9e <_svfiprintf_r+0xd6>
 8006a66:	06d9      	lsls	r1, r3, #27
 8006a68:	bf44      	itt	mi
 8006a6a:	2220      	movmi	r2, #32
 8006a6c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a70:	071a      	lsls	r2, r3, #28
 8006a72:	bf44      	itt	mi
 8006a74:	222b      	movmi	r2, #43	; 0x2b
 8006a76:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006a7a:	7822      	ldrb	r2, [r4, #0]
 8006a7c:	2a2a      	cmp	r2, #42	; 0x2a
 8006a7e:	d016      	beq.n	8006aae <_svfiprintf_r+0xe6>
 8006a80:	2100      	movs	r1, #0
 8006a82:	200a      	movs	r0, #10
 8006a84:	9a07      	ldr	r2, [sp, #28]
 8006a86:	4627      	mov	r7, r4
 8006a88:	783b      	ldrb	r3, [r7, #0]
 8006a8a:	3401      	adds	r4, #1
 8006a8c:	3b30      	subs	r3, #48	; 0x30
 8006a8e:	2b09      	cmp	r3, #9
 8006a90:	d950      	bls.n	8006b34 <_svfiprintf_r+0x16c>
 8006a92:	b1c9      	cbz	r1, 8006ac8 <_svfiprintf_r+0x100>
 8006a94:	e011      	b.n	8006aba <_svfiprintf_r+0xf2>
 8006a96:	2b25      	cmp	r3, #37	; 0x25
 8006a98:	d0c0      	beq.n	8006a1c <_svfiprintf_r+0x54>
 8006a9a:	4627      	mov	r7, r4
 8006a9c:	e7b9      	b.n	8006a12 <_svfiprintf_r+0x4a>
 8006a9e:	4a3f      	ldr	r2, [pc, #252]	; (8006b9c <_svfiprintf_r+0x1d4>)
 8006aa0:	463c      	mov	r4, r7
 8006aa2:	1a80      	subs	r0, r0, r2
 8006aa4:	fa0b f000 	lsl.w	r0, fp, r0
 8006aa8:	4318      	orrs	r0, r3
 8006aaa:	9004      	str	r0, [sp, #16]
 8006aac:	e7d3      	b.n	8006a56 <_svfiprintf_r+0x8e>
 8006aae:	9a03      	ldr	r2, [sp, #12]
 8006ab0:	1d11      	adds	r1, r2, #4
 8006ab2:	6812      	ldr	r2, [r2, #0]
 8006ab4:	9103      	str	r1, [sp, #12]
 8006ab6:	2a00      	cmp	r2, #0
 8006ab8:	db01      	blt.n	8006abe <_svfiprintf_r+0xf6>
 8006aba:	9207      	str	r2, [sp, #28]
 8006abc:	e004      	b.n	8006ac8 <_svfiprintf_r+0x100>
 8006abe:	4252      	negs	r2, r2
 8006ac0:	f043 0302 	orr.w	r3, r3, #2
 8006ac4:	9207      	str	r2, [sp, #28]
 8006ac6:	9304      	str	r3, [sp, #16]
 8006ac8:	783b      	ldrb	r3, [r7, #0]
 8006aca:	2b2e      	cmp	r3, #46	; 0x2e
 8006acc:	d10d      	bne.n	8006aea <_svfiprintf_r+0x122>
 8006ace:	787b      	ldrb	r3, [r7, #1]
 8006ad0:	1c79      	adds	r1, r7, #1
 8006ad2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ad4:	d132      	bne.n	8006b3c <_svfiprintf_r+0x174>
 8006ad6:	9b03      	ldr	r3, [sp, #12]
 8006ad8:	3702      	adds	r7, #2
 8006ada:	1d1a      	adds	r2, r3, #4
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	9203      	str	r2, [sp, #12]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	bfb8      	it	lt
 8006ae4:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ae8:	9305      	str	r3, [sp, #20]
 8006aea:	4c2d      	ldr	r4, [pc, #180]	; (8006ba0 <_svfiprintf_r+0x1d8>)
 8006aec:	2203      	movs	r2, #3
 8006aee:	7839      	ldrb	r1, [r7, #0]
 8006af0:	4620      	mov	r0, r4
 8006af2:	f7ff fb6b 	bl	80061cc <memchr>
 8006af6:	b138      	cbz	r0, 8006b08 <_svfiprintf_r+0x140>
 8006af8:	2340      	movs	r3, #64	; 0x40
 8006afa:	1b00      	subs	r0, r0, r4
 8006afc:	fa03 f000 	lsl.w	r0, r3, r0
 8006b00:	9b04      	ldr	r3, [sp, #16]
 8006b02:	3701      	adds	r7, #1
 8006b04:	4303      	orrs	r3, r0
 8006b06:	9304      	str	r3, [sp, #16]
 8006b08:	7839      	ldrb	r1, [r7, #0]
 8006b0a:	2206      	movs	r2, #6
 8006b0c:	4825      	ldr	r0, [pc, #148]	; (8006ba4 <_svfiprintf_r+0x1dc>)
 8006b0e:	1c7e      	adds	r6, r7, #1
 8006b10:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b14:	f7ff fb5a 	bl	80061cc <memchr>
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	d035      	beq.n	8006b88 <_svfiprintf_r+0x1c0>
 8006b1c:	4b22      	ldr	r3, [pc, #136]	; (8006ba8 <_svfiprintf_r+0x1e0>)
 8006b1e:	b9fb      	cbnz	r3, 8006b60 <_svfiprintf_r+0x198>
 8006b20:	9b03      	ldr	r3, [sp, #12]
 8006b22:	3307      	adds	r3, #7
 8006b24:	f023 0307 	bic.w	r3, r3, #7
 8006b28:	3308      	adds	r3, #8
 8006b2a:	9303      	str	r3, [sp, #12]
 8006b2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b2e:	444b      	add	r3, r9
 8006b30:	9309      	str	r3, [sp, #36]	; 0x24
 8006b32:	e76d      	b.n	8006a10 <_svfiprintf_r+0x48>
 8006b34:	fb00 3202 	mla	r2, r0, r2, r3
 8006b38:	2101      	movs	r1, #1
 8006b3a:	e7a4      	b.n	8006a86 <_svfiprintf_r+0xbe>
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	240a      	movs	r4, #10
 8006b40:	4618      	mov	r0, r3
 8006b42:	9305      	str	r3, [sp, #20]
 8006b44:	460f      	mov	r7, r1
 8006b46:	783a      	ldrb	r2, [r7, #0]
 8006b48:	3101      	adds	r1, #1
 8006b4a:	3a30      	subs	r2, #48	; 0x30
 8006b4c:	2a09      	cmp	r2, #9
 8006b4e:	d903      	bls.n	8006b58 <_svfiprintf_r+0x190>
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d0ca      	beq.n	8006aea <_svfiprintf_r+0x122>
 8006b54:	9005      	str	r0, [sp, #20]
 8006b56:	e7c8      	b.n	8006aea <_svfiprintf_r+0x122>
 8006b58:	fb04 2000 	mla	r0, r4, r0, r2
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e7f1      	b.n	8006b44 <_svfiprintf_r+0x17c>
 8006b60:	ab03      	add	r3, sp, #12
 8006b62:	9300      	str	r3, [sp, #0]
 8006b64:	462a      	mov	r2, r5
 8006b66:	4b11      	ldr	r3, [pc, #68]	; (8006bac <_svfiprintf_r+0x1e4>)
 8006b68:	a904      	add	r1, sp, #16
 8006b6a:	4640      	mov	r0, r8
 8006b6c:	f7fe f8c2 	bl	8004cf4 <_printf_float>
 8006b70:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006b74:	4681      	mov	r9, r0
 8006b76:	d1d9      	bne.n	8006b2c <_svfiprintf_r+0x164>
 8006b78:	89ab      	ldrh	r3, [r5, #12]
 8006b7a:	065b      	lsls	r3, r3, #25
 8006b7c:	f53f af39 	bmi.w	80069f2 <_svfiprintf_r+0x2a>
 8006b80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b82:	b01d      	add	sp, #116	; 0x74
 8006b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b88:	ab03      	add	r3, sp, #12
 8006b8a:	9300      	str	r3, [sp, #0]
 8006b8c:	462a      	mov	r2, r5
 8006b8e:	4b07      	ldr	r3, [pc, #28]	; (8006bac <_svfiprintf_r+0x1e4>)
 8006b90:	a904      	add	r1, sp, #16
 8006b92:	4640      	mov	r0, r8
 8006b94:	f7fe fb5e 	bl	8005254 <_printf_i>
 8006b98:	e7ea      	b.n	8006b70 <_svfiprintf_r+0x1a8>
 8006b9a:	bf00      	nop
 8006b9c:	08007364 	.word	0x08007364
 8006ba0:	0800736a 	.word	0x0800736a
 8006ba4:	0800736e 	.word	0x0800736e
 8006ba8:	08004cf5 	.word	0x08004cf5
 8006bac:	08006911 	.word	0x08006911

08006bb0 <_sbrk_r>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	4c05      	ldr	r4, [pc, #20]	; (8006bcc <_sbrk_r+0x1c>)
 8006bb6:	4605      	mov	r5, r0
 8006bb8:	4608      	mov	r0, r1
 8006bba:	6023      	str	r3, [r4, #0]
 8006bbc:	f7fa ffee 	bl	8001b9c <_sbrk>
 8006bc0:	1c43      	adds	r3, r0, #1
 8006bc2:	d102      	bne.n	8006bca <_sbrk_r+0x1a>
 8006bc4:	6823      	ldr	r3, [r4, #0]
 8006bc6:	b103      	cbz	r3, 8006bca <_sbrk_r+0x1a>
 8006bc8:	602b      	str	r3, [r5, #0]
 8006bca:	bd38      	pop	{r3, r4, r5, pc}
 8006bcc:	20000368 	.word	0x20000368

08006bd0 <__ascii_mbtowc>:
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	b901      	cbnz	r1, 8006bd6 <__ascii_mbtowc+0x6>
 8006bd4:	a901      	add	r1, sp, #4
 8006bd6:	b142      	cbz	r2, 8006bea <__ascii_mbtowc+0x1a>
 8006bd8:	b14b      	cbz	r3, 8006bee <__ascii_mbtowc+0x1e>
 8006bda:	7813      	ldrb	r3, [r2, #0]
 8006bdc:	600b      	str	r3, [r1, #0]
 8006bde:	7812      	ldrb	r2, [r2, #0]
 8006be0:	1c10      	adds	r0, r2, #0
 8006be2:	bf18      	it	ne
 8006be4:	2001      	movne	r0, #1
 8006be6:	b002      	add	sp, #8
 8006be8:	4770      	bx	lr
 8006bea:	4610      	mov	r0, r2
 8006bec:	e7fb      	b.n	8006be6 <__ascii_mbtowc+0x16>
 8006bee:	f06f 0001 	mvn.w	r0, #1
 8006bf2:	e7f8      	b.n	8006be6 <__ascii_mbtowc+0x16>

08006bf4 <memmove>:
 8006bf4:	4288      	cmp	r0, r1
 8006bf6:	b510      	push	{r4, lr}
 8006bf8:	eb01 0302 	add.w	r3, r1, r2
 8006bfc:	d803      	bhi.n	8006c06 <memmove+0x12>
 8006bfe:	1e42      	subs	r2, r0, #1
 8006c00:	4299      	cmp	r1, r3
 8006c02:	d10c      	bne.n	8006c1e <memmove+0x2a>
 8006c04:	bd10      	pop	{r4, pc}
 8006c06:	4298      	cmp	r0, r3
 8006c08:	d2f9      	bcs.n	8006bfe <memmove+0xa>
 8006c0a:	1881      	adds	r1, r0, r2
 8006c0c:	1ad2      	subs	r2, r2, r3
 8006c0e:	42d3      	cmn	r3, r2
 8006c10:	d100      	bne.n	8006c14 <memmove+0x20>
 8006c12:	bd10      	pop	{r4, pc}
 8006c14:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c18:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006c1c:	e7f7      	b.n	8006c0e <memmove+0x1a>
 8006c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c22:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006c26:	e7eb      	b.n	8006c00 <memmove+0xc>

08006c28 <__malloc_lock>:
 8006c28:	4770      	bx	lr

08006c2a <__malloc_unlock>:
 8006c2a:	4770      	bx	lr

08006c2c <_realloc_r>:
 8006c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c2e:	4607      	mov	r7, r0
 8006c30:	4614      	mov	r4, r2
 8006c32:	460e      	mov	r6, r1
 8006c34:	b921      	cbnz	r1, 8006c40 <_realloc_r+0x14>
 8006c36:	4611      	mov	r1, r2
 8006c38:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006c3c:	f7ff be0a 	b.w	8006854 <_malloc_r>
 8006c40:	b922      	cbnz	r2, 8006c4c <_realloc_r+0x20>
 8006c42:	f7ff fdbb 	bl	80067bc <_free_r>
 8006c46:	4625      	mov	r5, r4
 8006c48:	4628      	mov	r0, r5
 8006c4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c4c:	f000 f821 	bl	8006c92 <_malloc_usable_size_r>
 8006c50:	4284      	cmp	r4, r0
 8006c52:	d90f      	bls.n	8006c74 <_realloc_r+0x48>
 8006c54:	4621      	mov	r1, r4
 8006c56:	4638      	mov	r0, r7
 8006c58:	f7ff fdfc 	bl	8006854 <_malloc_r>
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d0f2      	beq.n	8006c48 <_realloc_r+0x1c>
 8006c62:	4631      	mov	r1, r6
 8006c64:	4622      	mov	r2, r4
 8006c66:	f7ff fabf 	bl	80061e8 <memcpy>
 8006c6a:	4631      	mov	r1, r6
 8006c6c:	4638      	mov	r0, r7
 8006c6e:	f7ff fda5 	bl	80067bc <_free_r>
 8006c72:	e7e9      	b.n	8006c48 <_realloc_r+0x1c>
 8006c74:	4635      	mov	r5, r6
 8006c76:	e7e7      	b.n	8006c48 <_realloc_r+0x1c>

08006c78 <__ascii_wctomb>:
 8006c78:	b149      	cbz	r1, 8006c8e <__ascii_wctomb+0x16>
 8006c7a:	2aff      	cmp	r2, #255	; 0xff
 8006c7c:	bf8b      	itete	hi
 8006c7e:	238a      	movhi	r3, #138	; 0x8a
 8006c80:	700a      	strbls	r2, [r1, #0]
 8006c82:	6003      	strhi	r3, [r0, #0]
 8006c84:	2001      	movls	r0, #1
 8006c86:	bf88      	it	hi
 8006c88:	f04f 30ff 	movhi.w	r0, #4294967295
 8006c8c:	4770      	bx	lr
 8006c8e:	4608      	mov	r0, r1
 8006c90:	4770      	bx	lr

08006c92 <_malloc_usable_size_r>:
 8006c92:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8006c96:	2800      	cmp	r0, #0
 8006c98:	f1a0 0004 	sub.w	r0, r0, #4
 8006c9c:	bfbc      	itt	lt
 8006c9e:	580b      	ldrlt	r3, [r1, r0]
 8006ca0:	18c0      	addlt	r0, r0, r3
 8006ca2:	4770      	bx	lr

08006ca4 <atan2>:
 8006ca4:	f000 b800 	b.w	8006ca8 <__ieee754_atan2>

08006ca8 <__ieee754_atan2>:
 8006ca8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cac:	4256      	negs	r6, r2
 8006cae:	f023 4e00 	bic.w	lr, r3, #2147483648	; 0x80000000
 8006cb2:	4316      	orrs	r6, r2
 8006cb4:	f8df 91a0 	ldr.w	r9, [pc, #416]	; 8006e58 <__ieee754_atan2+0x1b0>
 8006cb8:	ea4e 76d6 	orr.w	r6, lr, r6, lsr #31
 8006cbc:	454e      	cmp	r6, r9
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	460d      	mov	r5, r1
 8006cc2:	4688      	mov	r8, r1
 8006cc4:	d807      	bhi.n	8006cd6 <__ieee754_atan2+0x2e>
 8006cc6:	4246      	negs	r6, r0
 8006cc8:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 8006ccc:	4306      	orrs	r6, r0
 8006cce:	ea47 76d6 	orr.w	r6, r7, r6, lsr #31
 8006cd2:	454e      	cmp	r6, r9
 8006cd4:	d906      	bls.n	8006ce4 <__ieee754_atan2+0x3c>
 8006cd6:	4620      	mov	r0, r4
 8006cd8:	4629      	mov	r1, r5
 8006cda:	f7f9 fa47 	bl	800016c <__adddf3>
 8006cde:	4604      	mov	r4, r0
 8006ce0:	460d      	mov	r5, r1
 8006ce2:	e015      	b.n	8006d10 <__ieee754_atan2+0x68>
 8006ce4:	f103 4640 	add.w	r6, r3, #3221225472	; 0xc0000000
 8006ce8:	f506 1680 	add.w	r6, r6, #1048576	; 0x100000
 8006cec:	4316      	orrs	r6, r2
 8006cee:	d103      	bne.n	8006cf8 <__ieee754_atan2+0x50>
 8006cf0:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf4:	f000 b8b4 	b.w	8006e60 <atan>
 8006cf8:	179e      	asrs	r6, r3, #30
 8006cfa:	f006 0602 	and.w	r6, r6, #2
 8006cfe:	ea46 76d1 	orr.w	r6, r6, r1, lsr #31
 8006d02:	ea50 0107 	orrs.w	r1, r0, r7
 8006d06:	d107      	bne.n	8006d18 <__ieee754_atan2+0x70>
 8006d08:	2e02      	cmp	r6, #2
 8006d0a:	d030      	beq.n	8006d6e <__ieee754_atan2+0xc6>
 8006d0c:	2e03      	cmp	r6, #3
 8006d0e:	d032      	beq.n	8006d76 <__ieee754_atan2+0xce>
 8006d10:	4620      	mov	r0, r4
 8006d12:	4629      	mov	r1, r5
 8006d14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d18:	ea52 010e 	orrs.w	r1, r2, lr
 8006d1c:	d106      	bne.n	8006d2c <__ieee754_atan2+0x84>
 8006d1e:	f1b8 0f00 	cmp.w	r8, #0
 8006d22:	da71      	bge.n	8006e08 <__ieee754_atan2+0x160>
 8006d24:	a53a      	add	r5, pc, #232	; (adr r5, 8006e10 <__ieee754_atan2+0x168>)
 8006d26:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d2a:	e7f1      	b.n	8006d10 <__ieee754_atan2+0x68>
 8006d2c:	45ce      	cmp	lr, r9
 8006d2e:	d126      	bne.n	8006d7e <__ieee754_atan2+0xd6>
 8006d30:	4577      	cmp	r7, lr
 8006d32:	d111      	bne.n	8006d58 <__ieee754_atan2+0xb0>
 8006d34:	2e02      	cmp	r6, #2
 8006d36:	d007      	beq.n	8006d48 <__ieee754_atan2+0xa0>
 8006d38:	2e03      	cmp	r6, #3
 8006d3a:	d009      	beq.n	8006d50 <__ieee754_atan2+0xa8>
 8006d3c:	2e01      	cmp	r6, #1
 8006d3e:	d15d      	bne.n	8006dfc <__ieee754_atan2+0x154>
 8006d40:	a535      	add	r5, pc, #212	; (adr r5, 8006e18 <__ieee754_atan2+0x170>)
 8006d42:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d46:	e7e3      	b.n	8006d10 <__ieee754_atan2+0x68>
 8006d48:	a535      	add	r5, pc, #212	; (adr r5, 8006e20 <__ieee754_atan2+0x178>)
 8006d4a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d4e:	e7df      	b.n	8006d10 <__ieee754_atan2+0x68>
 8006d50:	a535      	add	r5, pc, #212	; (adr r5, 8006e28 <__ieee754_atan2+0x180>)
 8006d52:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d56:	e7db      	b.n	8006d10 <__ieee754_atan2+0x68>
 8006d58:	2e02      	cmp	r6, #2
 8006d5a:	d008      	beq.n	8006d6e <__ieee754_atan2+0xc6>
 8006d5c:	2e03      	cmp	r6, #3
 8006d5e:	d00a      	beq.n	8006d76 <__ieee754_atan2+0xce>
 8006d60:	2e01      	cmp	r6, #1
 8006d62:	f04f 0400 	mov.w	r4, #0
 8006d66:	d14d      	bne.n	8006e04 <__ieee754_atan2+0x15c>
 8006d68:	f04f 4500 	mov.w	r5, #2147483648	; 0x80000000
 8006d6c:	e7d0      	b.n	8006d10 <__ieee754_atan2+0x68>
 8006d6e:	a530      	add	r5, pc, #192	; (adr r5, 8006e30 <__ieee754_atan2+0x188>)
 8006d70:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d74:	e7cc      	b.n	8006d10 <__ieee754_atan2+0x68>
 8006d76:	a530      	add	r5, pc, #192	; (adr r5, 8006e38 <__ieee754_atan2+0x190>)
 8006d78:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006d7c:	e7c8      	b.n	8006d10 <__ieee754_atan2+0x68>
 8006d7e:	454f      	cmp	r7, r9
 8006d80:	d0cd      	beq.n	8006d1e <__ieee754_atan2+0x76>
 8006d82:	eba7 070e 	sub.w	r7, r7, lr
 8006d86:	153f      	asrs	r7, r7, #20
 8006d88:	2f3c      	cmp	r7, #60	; 0x3c
 8006d8a:	dc1e      	bgt.n	8006dca <__ieee754_atan2+0x122>
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	da01      	bge.n	8006d94 <__ieee754_atan2+0xec>
 8006d90:	373c      	adds	r7, #60	; 0x3c
 8006d92:	db1e      	blt.n	8006dd2 <__ieee754_atan2+0x12a>
 8006d94:	4620      	mov	r0, r4
 8006d96:	4629      	mov	r1, r5
 8006d98:	f7f9 fcc4 	bl	8000724 <__aeabi_ddiv>
 8006d9c:	f000 f9f2 	bl	8007184 <fabs>
 8006da0:	f000 f85e 	bl	8006e60 <atan>
 8006da4:	4604      	mov	r4, r0
 8006da6:	460d      	mov	r5, r1
 8006da8:	2e01      	cmp	r6, #1
 8006daa:	d015      	beq.n	8006dd8 <__ieee754_atan2+0x130>
 8006dac:	2e02      	cmp	r6, #2
 8006dae:	d016      	beq.n	8006dde <__ieee754_atan2+0x136>
 8006db0:	2e00      	cmp	r6, #0
 8006db2:	d0ad      	beq.n	8006d10 <__ieee754_atan2+0x68>
 8006db4:	a322      	add	r3, pc, #136	; (adr r3, 8006e40 <__ieee754_atan2+0x198>)
 8006db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dba:	4620      	mov	r0, r4
 8006dbc:	4629      	mov	r1, r5
 8006dbe:	f7f9 f9d3 	bl	8000168 <__aeabi_dsub>
 8006dc2:	a31b      	add	r3, pc, #108	; (adr r3, 8006e30 <__ieee754_atan2+0x188>)
 8006dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc8:	e015      	b.n	8006df6 <__ieee754_atan2+0x14e>
 8006dca:	a51f      	add	r5, pc, #124	; (adr r5, 8006e48 <__ieee754_atan2+0x1a0>)
 8006dcc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006dd0:	e7ea      	b.n	8006da8 <__ieee754_atan2+0x100>
 8006dd2:	2400      	movs	r4, #0
 8006dd4:	2500      	movs	r5, #0
 8006dd6:	e7e7      	b.n	8006da8 <__ieee754_atan2+0x100>
 8006dd8:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
 8006ddc:	e798      	b.n	8006d10 <__ieee754_atan2+0x68>
 8006dde:	a318      	add	r3, pc, #96	; (adr r3, 8006e40 <__ieee754_atan2+0x198>)
 8006de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006de4:	4620      	mov	r0, r4
 8006de6:	4629      	mov	r1, r5
 8006de8:	f7f9 f9be 	bl	8000168 <__aeabi_dsub>
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	a10f      	add	r1, pc, #60	; (adr r1, 8006e30 <__ieee754_atan2+0x188>)
 8006df2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006df6:	f7f9 f9b7 	bl	8000168 <__aeabi_dsub>
 8006dfa:	e770      	b.n	8006cde <__ieee754_atan2+0x36>
 8006dfc:	a514      	add	r5, pc, #80	; (adr r5, 8006e50 <__ieee754_atan2+0x1a8>)
 8006dfe:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e02:	e785      	b.n	8006d10 <__ieee754_atan2+0x68>
 8006e04:	2500      	movs	r5, #0
 8006e06:	e783      	b.n	8006d10 <__ieee754_atan2+0x68>
 8006e08:	a50f      	add	r5, pc, #60	; (adr r5, 8006e48 <__ieee754_atan2+0x1a0>)
 8006e0a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006e0e:	e77f      	b.n	8006d10 <__ieee754_atan2+0x68>
 8006e10:	54442d18 	.word	0x54442d18
 8006e14:	bff921fb 	.word	0xbff921fb
 8006e18:	54442d18 	.word	0x54442d18
 8006e1c:	bfe921fb 	.word	0xbfe921fb
 8006e20:	7f3321d2 	.word	0x7f3321d2
 8006e24:	4002d97c 	.word	0x4002d97c
 8006e28:	7f3321d2 	.word	0x7f3321d2
 8006e2c:	c002d97c 	.word	0xc002d97c
 8006e30:	54442d18 	.word	0x54442d18
 8006e34:	400921fb 	.word	0x400921fb
 8006e38:	54442d18 	.word	0x54442d18
 8006e3c:	c00921fb 	.word	0xc00921fb
 8006e40:	33145c07 	.word	0x33145c07
 8006e44:	3ca1a626 	.word	0x3ca1a626
 8006e48:	54442d18 	.word	0x54442d18
 8006e4c:	3ff921fb 	.word	0x3ff921fb
 8006e50:	54442d18 	.word	0x54442d18
 8006e54:	3fe921fb 	.word	0x3fe921fb
 8006e58:	7ff00000 	.word	0x7ff00000
 8006e5c:	00000000 	.word	0x00000000

08006e60 <atan>:
 8006e60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e64:	4bba      	ldr	r3, [pc, #744]	; (8007150 <atan+0x2f0>)
 8006e66:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8006e6a:	429e      	cmp	r6, r3
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	460d      	mov	r5, r1
 8006e70:	468b      	mov	fp, r1
 8006e72:	dd17      	ble.n	8006ea4 <atan+0x44>
 8006e74:	4ab7      	ldr	r2, [pc, #732]	; (8007154 <atan+0x2f4>)
 8006e76:	4296      	cmp	r6, r2
 8006e78:	dc01      	bgt.n	8006e7e <atan+0x1e>
 8006e7a:	d109      	bne.n	8006e90 <atan+0x30>
 8006e7c:	b140      	cbz	r0, 8006e90 <atan+0x30>
 8006e7e:	4622      	mov	r2, r4
 8006e80:	462b      	mov	r3, r5
 8006e82:	4620      	mov	r0, r4
 8006e84:	4629      	mov	r1, r5
 8006e86:	f7f9 f971 	bl	800016c <__adddf3>
 8006e8a:	4604      	mov	r4, r0
 8006e8c:	460d      	mov	r5, r1
 8006e8e:	e005      	b.n	8006e9c <atan+0x3c>
 8006e90:	f1bb 0f00 	cmp.w	fp, #0
 8006e94:	4cb0      	ldr	r4, [pc, #704]	; (8007158 <atan+0x2f8>)
 8006e96:	f300 8129 	bgt.w	80070ec <atan+0x28c>
 8006e9a:	4db0      	ldr	r5, [pc, #704]	; (800715c <atan+0x2fc>)
 8006e9c:	4620      	mov	r0, r4
 8006e9e:	4629      	mov	r1, r5
 8006ea0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ea4:	4bae      	ldr	r3, [pc, #696]	; (8007160 <atan+0x300>)
 8006ea6:	429e      	cmp	r6, r3
 8006ea8:	dc11      	bgt.n	8006ece <atan+0x6e>
 8006eaa:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8006eae:	429e      	cmp	r6, r3
 8006eb0:	dc0a      	bgt.n	8006ec8 <atan+0x68>
 8006eb2:	a38f      	add	r3, pc, #572	; (adr r3, 80070f0 <atan+0x290>)
 8006eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eb8:	f7f9 f958 	bl	800016c <__adddf3>
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	4ba9      	ldr	r3, [pc, #676]	; (8007164 <atan+0x304>)
 8006ec0:	f7f9 fd96 	bl	80009f0 <__aeabi_dcmpgt>
 8006ec4:	2800      	cmp	r0, #0
 8006ec6:	d1e9      	bne.n	8006e9c <atan+0x3c>
 8006ec8:	f04f 3aff 	mov.w	sl, #4294967295
 8006ecc:	e027      	b.n	8006f1e <atan+0xbe>
 8006ece:	f000 f959 	bl	8007184 <fabs>
 8006ed2:	4ba5      	ldr	r3, [pc, #660]	; (8007168 <atan+0x308>)
 8006ed4:	4604      	mov	r4, r0
 8006ed6:	429e      	cmp	r6, r3
 8006ed8:	460d      	mov	r5, r1
 8006eda:	f300 80b8 	bgt.w	800704e <atan+0x1ee>
 8006ede:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8006ee2:	429e      	cmp	r6, r3
 8006ee4:	f300 809c 	bgt.w	8007020 <atan+0x1c0>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	460b      	mov	r3, r1
 8006eec:	f7f9 f93e 	bl	800016c <__adddf3>
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	4b9c      	ldr	r3, [pc, #624]	; (8007164 <atan+0x304>)
 8006ef4:	f7f9 f938 	bl	8000168 <__aeabi_dsub>
 8006ef8:	2200      	movs	r2, #0
 8006efa:	4606      	mov	r6, r0
 8006efc:	460f      	mov	r7, r1
 8006efe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006f02:	4620      	mov	r0, r4
 8006f04:	4629      	mov	r1, r5
 8006f06:	f7f9 f931 	bl	800016c <__adddf3>
 8006f0a:	4602      	mov	r2, r0
 8006f0c:	460b      	mov	r3, r1
 8006f0e:	4630      	mov	r0, r6
 8006f10:	4639      	mov	r1, r7
 8006f12:	f7f9 fc07 	bl	8000724 <__aeabi_ddiv>
 8006f16:	f04f 0a00 	mov.w	sl, #0
 8006f1a:	4604      	mov	r4, r0
 8006f1c:	460d      	mov	r5, r1
 8006f1e:	4622      	mov	r2, r4
 8006f20:	462b      	mov	r3, r5
 8006f22:	4620      	mov	r0, r4
 8006f24:	4629      	mov	r1, r5
 8006f26:	f7f9 fad3 	bl	80004d0 <__aeabi_dmul>
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	4680      	mov	r8, r0
 8006f30:	4689      	mov	r9, r1
 8006f32:	f7f9 facd 	bl	80004d0 <__aeabi_dmul>
 8006f36:	a370      	add	r3, pc, #448	; (adr r3, 80070f8 <atan+0x298>)
 8006f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3c:	4606      	mov	r6, r0
 8006f3e:	460f      	mov	r7, r1
 8006f40:	f7f9 fac6 	bl	80004d0 <__aeabi_dmul>
 8006f44:	a36e      	add	r3, pc, #440	; (adr r3, 8007100 <atan+0x2a0>)
 8006f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4a:	f7f9 f90f 	bl	800016c <__adddf3>
 8006f4e:	4632      	mov	r2, r6
 8006f50:	463b      	mov	r3, r7
 8006f52:	f7f9 fabd 	bl	80004d0 <__aeabi_dmul>
 8006f56:	a36c      	add	r3, pc, #432	; (adr r3, 8007108 <atan+0x2a8>)
 8006f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5c:	f7f9 f906 	bl	800016c <__adddf3>
 8006f60:	4632      	mov	r2, r6
 8006f62:	463b      	mov	r3, r7
 8006f64:	f7f9 fab4 	bl	80004d0 <__aeabi_dmul>
 8006f68:	a369      	add	r3, pc, #420	; (adr r3, 8007110 <atan+0x2b0>)
 8006f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6e:	f7f9 f8fd 	bl	800016c <__adddf3>
 8006f72:	4632      	mov	r2, r6
 8006f74:	463b      	mov	r3, r7
 8006f76:	f7f9 faab 	bl	80004d0 <__aeabi_dmul>
 8006f7a:	a367      	add	r3, pc, #412	; (adr r3, 8007118 <atan+0x2b8>)
 8006f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f80:	f7f9 f8f4 	bl	800016c <__adddf3>
 8006f84:	4632      	mov	r2, r6
 8006f86:	463b      	mov	r3, r7
 8006f88:	f7f9 faa2 	bl	80004d0 <__aeabi_dmul>
 8006f8c:	a364      	add	r3, pc, #400	; (adr r3, 8007120 <atan+0x2c0>)
 8006f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f92:	f7f9 f8eb 	bl	800016c <__adddf3>
 8006f96:	4642      	mov	r2, r8
 8006f98:	464b      	mov	r3, r9
 8006f9a:	f7f9 fa99 	bl	80004d0 <__aeabi_dmul>
 8006f9e:	a362      	add	r3, pc, #392	; (adr r3, 8007128 <atan+0x2c8>)
 8006fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fa4:	4680      	mov	r8, r0
 8006fa6:	4689      	mov	r9, r1
 8006fa8:	4630      	mov	r0, r6
 8006faa:	4639      	mov	r1, r7
 8006fac:	f7f9 fa90 	bl	80004d0 <__aeabi_dmul>
 8006fb0:	a35f      	add	r3, pc, #380	; (adr r3, 8007130 <atan+0x2d0>)
 8006fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fb6:	f7f9 f8d7 	bl	8000168 <__aeabi_dsub>
 8006fba:	4632      	mov	r2, r6
 8006fbc:	463b      	mov	r3, r7
 8006fbe:	f7f9 fa87 	bl	80004d0 <__aeabi_dmul>
 8006fc2:	a35d      	add	r3, pc, #372	; (adr r3, 8007138 <atan+0x2d8>)
 8006fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc8:	f7f9 f8ce 	bl	8000168 <__aeabi_dsub>
 8006fcc:	4632      	mov	r2, r6
 8006fce:	463b      	mov	r3, r7
 8006fd0:	f7f9 fa7e 	bl	80004d0 <__aeabi_dmul>
 8006fd4:	a35a      	add	r3, pc, #360	; (adr r3, 8007140 <atan+0x2e0>)
 8006fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fda:	f7f9 f8c5 	bl	8000168 <__aeabi_dsub>
 8006fde:	4632      	mov	r2, r6
 8006fe0:	463b      	mov	r3, r7
 8006fe2:	f7f9 fa75 	bl	80004d0 <__aeabi_dmul>
 8006fe6:	a358      	add	r3, pc, #352	; (adr r3, 8007148 <atan+0x2e8>)
 8006fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fec:	f7f9 f8bc 	bl	8000168 <__aeabi_dsub>
 8006ff0:	4632      	mov	r2, r6
 8006ff2:	463b      	mov	r3, r7
 8006ff4:	f7f9 fa6c 	bl	80004d0 <__aeabi_dmul>
 8006ff8:	f1ba 3fff 	cmp.w	sl, #4294967295
 8006ffc:	4602      	mov	r2, r0
 8006ffe:	460b      	mov	r3, r1
 8007000:	d14e      	bne.n	80070a0 <atan+0x240>
 8007002:	4640      	mov	r0, r8
 8007004:	4649      	mov	r1, r9
 8007006:	f7f9 f8b1 	bl	800016c <__adddf3>
 800700a:	4622      	mov	r2, r4
 800700c:	462b      	mov	r3, r5
 800700e:	f7f9 fa5f 	bl	80004d0 <__aeabi_dmul>
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	4620      	mov	r0, r4
 8007018:	4629      	mov	r1, r5
 800701a:	f7f9 f8a5 	bl	8000168 <__aeabi_dsub>
 800701e:	e734      	b.n	8006e8a <atan+0x2a>
 8007020:	2200      	movs	r2, #0
 8007022:	4b50      	ldr	r3, [pc, #320]	; (8007164 <atan+0x304>)
 8007024:	f7f9 f8a0 	bl	8000168 <__aeabi_dsub>
 8007028:	2200      	movs	r2, #0
 800702a:	4606      	mov	r6, r0
 800702c:	460f      	mov	r7, r1
 800702e:	4b4d      	ldr	r3, [pc, #308]	; (8007164 <atan+0x304>)
 8007030:	4620      	mov	r0, r4
 8007032:	4629      	mov	r1, r5
 8007034:	f7f9 f89a 	bl	800016c <__adddf3>
 8007038:	4602      	mov	r2, r0
 800703a:	460b      	mov	r3, r1
 800703c:	4630      	mov	r0, r6
 800703e:	4639      	mov	r1, r7
 8007040:	f7f9 fb70 	bl	8000724 <__aeabi_ddiv>
 8007044:	f04f 0a01 	mov.w	sl, #1
 8007048:	4604      	mov	r4, r0
 800704a:	460d      	mov	r5, r1
 800704c:	e767      	b.n	8006f1e <atan+0xbe>
 800704e:	4b47      	ldr	r3, [pc, #284]	; (800716c <atan+0x30c>)
 8007050:	429e      	cmp	r6, r3
 8007052:	dc1a      	bgt.n	800708a <atan+0x22a>
 8007054:	2200      	movs	r2, #0
 8007056:	4b46      	ldr	r3, [pc, #280]	; (8007170 <atan+0x310>)
 8007058:	f7f9 f886 	bl	8000168 <__aeabi_dsub>
 800705c:	2200      	movs	r2, #0
 800705e:	4606      	mov	r6, r0
 8007060:	460f      	mov	r7, r1
 8007062:	4b43      	ldr	r3, [pc, #268]	; (8007170 <atan+0x310>)
 8007064:	4620      	mov	r0, r4
 8007066:	4629      	mov	r1, r5
 8007068:	f7f9 fa32 	bl	80004d0 <__aeabi_dmul>
 800706c:	2200      	movs	r2, #0
 800706e:	4b3d      	ldr	r3, [pc, #244]	; (8007164 <atan+0x304>)
 8007070:	f7f9 f87c 	bl	800016c <__adddf3>
 8007074:	4602      	mov	r2, r0
 8007076:	460b      	mov	r3, r1
 8007078:	4630      	mov	r0, r6
 800707a:	4639      	mov	r1, r7
 800707c:	f7f9 fb52 	bl	8000724 <__aeabi_ddiv>
 8007080:	f04f 0a02 	mov.w	sl, #2
 8007084:	4604      	mov	r4, r0
 8007086:	460d      	mov	r5, r1
 8007088:	e749      	b.n	8006f1e <atan+0xbe>
 800708a:	4602      	mov	r2, r0
 800708c:	460b      	mov	r3, r1
 800708e:	2000      	movs	r0, #0
 8007090:	4938      	ldr	r1, [pc, #224]	; (8007174 <atan+0x314>)
 8007092:	f7f9 fb47 	bl	8000724 <__aeabi_ddiv>
 8007096:	f04f 0a03 	mov.w	sl, #3
 800709a:	4604      	mov	r4, r0
 800709c:	460d      	mov	r5, r1
 800709e:	e73e      	b.n	8006f1e <atan+0xbe>
 80070a0:	4640      	mov	r0, r8
 80070a2:	4649      	mov	r1, r9
 80070a4:	f7f9 f862 	bl	800016c <__adddf3>
 80070a8:	4622      	mov	r2, r4
 80070aa:	462b      	mov	r3, r5
 80070ac:	f7f9 fa10 	bl	80004d0 <__aeabi_dmul>
 80070b0:	4e31      	ldr	r6, [pc, #196]	; (8007178 <atan+0x318>)
 80070b2:	4b32      	ldr	r3, [pc, #200]	; (800717c <atan+0x31c>)
 80070b4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
 80070b8:	4456      	add	r6, sl
 80070ba:	449a      	add	sl, r3
 80070bc:	e9da 2300 	ldrd	r2, r3, [sl]
 80070c0:	f7f9 f852 	bl	8000168 <__aeabi_dsub>
 80070c4:	4622      	mov	r2, r4
 80070c6:	462b      	mov	r3, r5
 80070c8:	f7f9 f84e 	bl	8000168 <__aeabi_dsub>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	e9d6 0100 	ldrd	r0, r1, [r6]
 80070d4:	f7f9 f848 	bl	8000168 <__aeabi_dsub>
 80070d8:	f1bb 0f00 	cmp.w	fp, #0
 80070dc:	4604      	mov	r4, r0
 80070de:	460d      	mov	r5, r1
 80070e0:	f6bf aedc 	bge.w	8006e9c <atan+0x3c>
 80070e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80070e8:	461d      	mov	r5, r3
 80070ea:	e6d7      	b.n	8006e9c <atan+0x3c>
 80070ec:	4d24      	ldr	r5, [pc, #144]	; (8007180 <atan+0x320>)
 80070ee:	e6d5      	b.n	8006e9c <atan+0x3c>
 80070f0:	8800759c 	.word	0x8800759c
 80070f4:	7e37e43c 	.word	0x7e37e43c
 80070f8:	e322da11 	.word	0xe322da11
 80070fc:	3f90ad3a 	.word	0x3f90ad3a
 8007100:	24760deb 	.word	0x24760deb
 8007104:	3fa97b4b 	.word	0x3fa97b4b
 8007108:	a0d03d51 	.word	0xa0d03d51
 800710c:	3fb10d66 	.word	0x3fb10d66
 8007110:	c54c206e 	.word	0xc54c206e
 8007114:	3fb745cd 	.word	0x3fb745cd
 8007118:	920083ff 	.word	0x920083ff
 800711c:	3fc24924 	.word	0x3fc24924
 8007120:	5555550d 	.word	0x5555550d
 8007124:	3fd55555 	.word	0x3fd55555
 8007128:	2c6a6c2f 	.word	0x2c6a6c2f
 800712c:	bfa2b444 	.word	0xbfa2b444
 8007130:	52defd9a 	.word	0x52defd9a
 8007134:	3fadde2d 	.word	0x3fadde2d
 8007138:	af749a6d 	.word	0xaf749a6d
 800713c:	3fb3b0f2 	.word	0x3fb3b0f2
 8007140:	fe231671 	.word	0xfe231671
 8007144:	3fbc71c6 	.word	0x3fbc71c6
 8007148:	9998ebc4 	.word	0x9998ebc4
 800714c:	3fc99999 	.word	0x3fc99999
 8007150:	440fffff 	.word	0x440fffff
 8007154:	7ff00000 	.word	0x7ff00000
 8007158:	54442d18 	.word	0x54442d18
 800715c:	bff921fb 	.word	0xbff921fb
 8007160:	3fdbffff 	.word	0x3fdbffff
 8007164:	3ff00000 	.word	0x3ff00000
 8007168:	3ff2ffff 	.word	0x3ff2ffff
 800716c:	40037fff 	.word	0x40037fff
 8007170:	3ff80000 	.word	0x3ff80000
 8007174:	bff00000 	.word	0xbff00000
 8007178:	08007480 	.word	0x08007480
 800717c:	080074a0 	.word	0x080074a0
 8007180:	3ff921fb 	.word	0x3ff921fb

08007184 <fabs>:
 8007184:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007188:	4770      	bx	lr
	...

0800718c <_init>:
 800718c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800718e:	bf00      	nop
 8007190:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007192:	bc08      	pop	{r3}
 8007194:	469e      	mov	lr, r3
 8007196:	4770      	bx	lr

08007198 <_fini>:
 8007198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800719a:	bf00      	nop
 800719c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800719e:	bc08      	pop	{r3}
 80071a0:	469e      	mov	lr, r3
 80071a2:	4770      	bx	lr
